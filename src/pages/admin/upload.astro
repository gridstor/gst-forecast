---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Upload Price Curves - Modern Schema">
  <div class="container mx-auto px-4 py-8">
    <!-- Notification Area -->
    <div id="notification" class="fixed top-4 right-4 z-50 hidden p-4 rounded-lg shadow-lg text-white">
      <span id="notification-text"></span>
    </div>

    <h1 class="text-3xl font-bold mb-6">Price Curves Upload</h1>
    <p class="text-gray-600 mb-8">Upload price forecast data using the modern Forecasts schema (CurveDefinition + CurveInstance + PriceForecast)</p>

    <!-- Progress Indicator -->
    <div class="mb-8">
      <div class="flex items-center justify-between mb-2">
        <span class="text-sm font-medium text-gray-700">Upload Progress</span>
        <span class="text-sm text-gray-500" id="progress-text">Step 1 of 3</span>
      </div>
      <div class="w-full bg-gray-200 rounded-full h-2">
        <div id="progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 33%"></div>
      </div>
    </div>

    <!-- Step 1: Curve Definition -->
    <div id="step-1" class="bg-white rounded-lg shadow-md p-6 mb-6">
      <h2 class="text-xl font-semibold mb-4">Step 1: Curve Definition</h2>
      <p class="text-gray-600 mb-4">Define the metadata for your price curve</p>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Curve Name -->
        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-gray-700">Curve Name *</label>
          <input
            type="text"
            id="curveName"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            placeholder="e.g., NP15_Revenue_4H_P50_2024"
            required
          />
        </div>

        <!-- Market -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Market *</label>
          <select id="market" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
            <option value="">Select Market</option>
            <option value="CAISO">CAISO</option>
            <option value="ERCOT">ERCOT</option>
            <option value="PJM">PJM</option>
            <option value="NYISO">NYISO</option>
            <option value="ISO-NE">ISO-NE</option>
            <option value="MISO">MISO</option>
          </select>
        </div>

        <!-- Location -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Location *</label>
          <select id="location" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
            <option value="">Select Location</option>
            <option value="NP15">NP15</option>
            <option value="SP15">SP15</option>
            <option value="ZP26">ZP26</option>
            <option value="Goleta">Goleta</option>
            <option value="Hidden Lakes">Hidden Lakes</option>
            <option value="Houston">Houston</option>
            <option value="North">North</option>
            <option value="West">West</option>
            <option value="MASS">MASS Hub</option>
          </select>
        </div>

        <!-- Product -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Product *</label>
          <input
            type="text"
            id="product"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            placeholder="e.g., Energy Storage, LMP, Ancillary Services"
            required
          />
        </div>

        <!-- Curve Type -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Curve Type *</label>
          <select id="curveType" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
            <option value="">Select Curve Type</option>
            <option value="REVENUE">Revenue</option>
            <option value="REVENUE_OTHER">Revenue Other</option>
            <option value="ENERGY">Energy</option>
            <option value="ENERGY_ARB">Energy Arbitrage</option>
            <option value="AS">Ancillary Services</option>
            <option value="TB2">TB2</option>
            <option value="TB4">TB4</option>
            <option value="RA">Resource Adequacy</option>
            <option value="DA">Day-Ahead</option>
            <option value="RT">Real-Time</option>
            <option value="OTHER">Other</option>
          </select>
        </div>

        <!-- Battery Duration -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Battery Duration</label>
          <select id="batteryDuration" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            <option value="UNKNOWN">Unknown</option>
            <option value="TWO_H">2 Hours</option>
            <option value="TWO_POINT_SIX_H">2.6 Hours</option>
            <option value="FOUR_H">4 Hours</option>
            <option value="EIGHT_H">8 Hours</option>
            <option value="OTHER">Other</option>
          </select>
        </div>

        <!-- Scenario -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Scenario</label>
          <select id="scenario" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            <option value="BASE">Base</option>
            <option value="P50">P50</option>
            <option value="P90">P90</option>
            <option value="P10">P10</option>
            <option value="LOW">Low</option>
            <option value="HIGH">High</option>
            <option value="UPSIDE">Upside</option>
            <option value="DOWNSIDE">Downside</option>
            <option value="ACTUAL">Actual</option>
            <option value="TARGET">Target</option>
            <option value="OTHER">Other</option>
          </select>
        </div>

        <!-- Degradation Type -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Degradation Type</label>
          <select id="degradationType" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            <option value="NONE">None</option>
            <option value="YEAR_1">Year 1</option>
            <option value="YEAR_2">Year 2</option>
            <option value="YEAR_5">Year 5</option>
            <option value="YEAR_10">Year 10</option>
            <option value="YEAR_15">Year 15</option>
            <option value="YEAR_20">Year 20</option>
            <option value="CUSTOM">Custom</option>
            <option value="OTHER">Other</option>
          </select>
        </div>

        <!-- Description -->
        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-gray-700">Description</label>
          <textarea
            id="description"
            rows="3"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            placeholder="Optional description of this curve..."
          ></textarea>
        </div>
      </div>

      <div class="flex justify-end mt-4">
        <button
          id="step1-next"
          class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Next: Instance Details
        </button>
      </div>
    </div>

    <!-- Step 2: Curve Instance -->
    <div id="step-2" class="bg-white rounded-lg shadow-md p-6 mb-6 hidden">
      <h2 class="text-xl font-semibold mb-4">Step 2: Curve Instance</h2>
      <p class="text-gray-600 mb-4">Define the specific instance parameters for this forecast run</p>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Instance Version -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Instance Version *</label>
          <input
            type="text"
            id="instanceVersion"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            placeholder="e.g., v1.0, 2024-01-15, Q1-2024"
            required
          />
        </div>

        <!-- Granularity -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Granularity *</label>
          <select id="granularity" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
            <option value="">Select Granularity</option>
            <option value="HOURLY">Hourly</option>
            <option value="DAILY">Daily</option>
            <option value="MONTHLY">Monthly</option>
            <option value="QUARTERLY">Quarterly</option>
            <option value="ANNUAL">Annual</option>
          </select>
        </div>

        <!-- Delivery Period Start -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Delivery Period Start *</label>
          <input
            type="date"
            id="deliveryPeriodStart"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            required
          />
        </div>

        <!-- Delivery Period End -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Delivery Period End *</label>
          <input
            type="date"
            id="deliveryPeriodEnd"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            required
          />
        </div>

        <!-- Model Type -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Model Type</label>
          <input
            type="text"
            id="modelType"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            placeholder="e.g., Aurora, Gridstor Regression, Manual"
          />
        </div>

        <!-- Created By -->
        <div>
          <label class="block text-sm font-medium text-gray-700">Created By</label>
          <input
            type="text"
            id="createdBy"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            placeholder="Your name/username"
            value="Upload System"
          />
        </div>

        <!-- Notes -->
        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-gray-700">Notes</label>
          <textarea
            id="notes"
            rows="3"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            placeholder="Optional notes about this instance..."
          ></textarea>
        </div>
      </div>

      <div class="flex justify-between mt-4">
        <button
          id="step2-back"
          class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
        >
          Back
        </button>
        <button
          id="step2-next"
          class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Next: Upload Data
        </button>
      </div>
    </div>

    <!-- Step 3: Data Upload -->
    <div id="step-3" class="bg-white rounded-lg shadow-md p-6 mb-6 hidden">
      <h2 class="text-xl font-semibold mb-4">Step 3: Upload Price Data</h2>
      <p class="text-gray-600 mb-4">Upload CSV file with price forecast data</p>

      <!-- CSV Format Guide -->
      <div class="mb-6 p-4 bg-blue-50 rounded-lg">
        <h3 class="font-medium text-blue-900 mb-2">CSV Format Requirements</h3>
        <p class="text-blue-800 text-sm mb-2">Required columns: timestamp, value</p>
        <p class="text-blue-800 text-sm mb-2">Optional columns: pvalue (default: 50), units (default: USD/MWh), granularity (default: MONTHLY)</p>
        <p class="text-blue-800 text-sm">Example: 2024-01-01T00:00:00Z,45.50,50,USD/MWh,MONTHLY</p>
      </div>

      <!-- File Upload -->
      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Select CSV File</label>
        <input
          type="file"
          accept=".csv"
          id="csvFile"
          class="block w-full text-sm text-gray-500
            file:mr-4 file:py-2 file:px-4
            file:rounded-md file:border-0
            file:text-sm file:font-semibold
            file:bg-indigo-50 file:text-indigo-700
            hover:file:bg-indigo-100"
        />
      </div>

      <!-- CSV Preview -->
      <div id="csv-preview" class="hidden mb-4">
        <h4 class="font-medium text-gray-700 mb-2">Data Preview</h4>
        <div id="preview-content" class="bg-gray-50 p-4 rounded-md max-h-48 overflow-auto"></div>
        <p id="preview-stats" class="text-sm text-gray-600 mt-2"></p>
      </div>

      <div class="flex justify-between mt-4">
        <button
          id="step3-back"
          class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
        >
          Back
        </button>
        <button
          id="upload-final"
          class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50"
          disabled
        >
          Upload Complete Curve
        </button>
      </div>
    </div>

    <!-- Success Message -->
    <div id="success-message" class="bg-green-50 rounded-lg p-6 mb-6 hidden">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-green-800">Upload Successful!</h3>
          <div class="mt-2 text-sm text-green-700">
            <p id="success-details"></p>
          </div>
        </div>
      </div>
      <div class="mt-4">
        <button
          id="upload-another"
          class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
        >
          Upload Another Curve
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Global state
  let curveDefinition: any = null;
  let curveInstance: any = null;
  let csvData: any[] = [];

  // Progress management
  function updateProgress(step: number) {
    const progressBar = document.getElementById('progress-bar')!;
    const progressText = document.getElementById('progress-text')!;
    
    progressBar.style.width = `${(step / 3) * 100}%`;
    progressText.textContent = `Step ${step} of 3`;
  }

  function showStep(stepNumber: number) {
    // Hide all steps
    document.getElementById('step-1')?.classList.add('hidden');
    document.getElementById('step-2')?.classList.add('hidden');
    document.getElementById('step-3')?.classList.add('hidden');
    
    // Show target step
    document.getElementById(`step-${stepNumber}`)?.classList.remove('hidden');
    
    updateProgress(stepNumber);
  }

  function showNotification(message: string, isError = false) {
    const notification = document.getElementById('notification')!;
    const notificationText = document.getElementById('notification-text')!;

    notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg text-white ${
      isError ? 'bg-red-500' : 'bg-green-500'
    }`;
    notificationText.textContent = message;
    notification.classList.remove('hidden');

    setTimeout(() => {
      notification.classList.add('hidden');
    }, 5000);
  }

  // Step 1: Create curve definition
  async function createCurveDefinition() {
    const formData = {
      curveName: (document.getElementById('curveName') as HTMLInputElement).value,
      market: (document.getElementById('market') as HTMLSelectElement).value,
      location: (document.getElementById('location') as HTMLSelectElement).value,
      product: (document.getElementById('product') as HTMLInputElement).value,
      curveType: (document.getElementById('curveType') as HTMLSelectElement).value,
      batteryDuration: (document.getElementById('batteryDuration') as HTMLSelectElement).value,
      scenario: (document.getElementById('scenario') as HTMLSelectElement).value,
      degradationType: (document.getElementById('degradationType') as HTMLSelectElement).value,
      description: (document.getElementById('description') as HTMLTextAreaElement).value
    };

    // Validate required fields
    if (!formData.curveName || !formData.market || !formData.location || !formData.product || !formData.curveType) {
      showNotification('Please fill in all required fields', true);
      return false;
    }

    try {
      const response = await fetch('/api/curve-upload/create-definition', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      const result = await response.json();

      if (response.ok) {
        curveDefinition = result.curveDefinition;
        showNotification(result.isNew ? 'Curve definition created' : 'Found existing curve definition');
        return true;
      } else {
        showNotification(result.error || 'Failed to create curve definition', true);
        return false;
      }
    } catch (error) {
      showNotification('Network error creating curve definition', true);
      return false;
    }
  }

  // Step 2: Create curve instance
  async function createCurveInstance() {
    const formData = {
      curveDefinitionId: curveDefinition.id,
      instanceVersion: (document.getElementById('instanceVersion') as HTMLInputElement).value,
      granularity: (document.getElementById('granularity') as HTMLSelectElement).value,
      deliveryPeriodStart: (document.getElementById('deliveryPeriodStart') as HTMLInputElement).value,
      deliveryPeriodEnd: (document.getElementById('deliveryPeriodEnd') as HTMLInputElement).value,
      createdBy: (document.getElementById('createdBy') as HTMLInputElement).value,
      notes: (document.getElementById('notes') as HTMLTextAreaElement).value,
      modelType: (document.getElementById('modelType') as HTMLInputElement).value
    };

    // Validate required fields
    if (!formData.instanceVersion || !formData.granularity || !formData.deliveryPeriodStart || !formData.deliveryPeriodEnd) {
      showNotification('Please fill in all required instance fields', true);
      return false;
    }

    try {
      const response = await fetch('/api/curve-upload/create-instance', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      const result = await response.json();

      if (response.ok) {
        curveInstance = result.curveInstance;
        showNotification('Curve instance created successfully');
        return true;
      } else {
        showNotification(result.error || 'Failed to create curve instance', true);
        return false;
      }
    } catch (error) {
      showNotification('Network error creating curve instance', true);
      return false;
    }
  }

  // Step 3: Upload price data
  async function uploadPriceData() {
    if (csvData.length === 0) {
      showNotification('No CSV data to upload', true);
      return false;
    }

    try {
      const response = await fetch('/api/curve-upload/upload-data', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          curveInstanceId: curveInstance.id,
          priceData: csvData
        })
      });

      const result = await response.json();

      if (response.ok) {
        showSuccessMessage(result);
        return true;
      } else {
        if (result.validationErrors) {
          showNotification(`Validation errors: ${result.validationErrors.slice(0, 3).join(', ')}`, true);
        } else {
          showNotification(result.error || 'Failed to upload price data', true);
        }
        return false;
      }
    } catch (error) {
      showNotification('Network error uploading price data', true);
      return false;
    }
  }

  // CSV parsing
  function parseCSV(csvText: string) {
    const lines = csvText.trim().split('\n');
    const headers = lines[0].split(',').map(h => h.trim());
    
    const requiredColumns = ['timestamp', 'value'];
    const missingColumns = requiredColumns.filter(col => !headers.includes(col));
    
    if (missingColumns.length > 0) {
      throw new Error(`Missing required columns: ${missingColumns.join(', ')}`);
    }

    const data = [];
    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(',').map(v => v.trim());
      const row: any = {};
      
      headers.forEach((header, index) => {
        row[header] = values[index];
      });

      data.push(row);
    }

    return data;
  }

  function showCSVPreview(data: any[]) {
    const preview = document.getElementById('csv-preview')!;
    const content = document.getElementById('preview-content')!;
    const stats = document.getElementById('preview-stats')!;

    // Show first 5 rows
    const previewData = data.slice(0, 5);
    const table = document.createElement('table');
    table.className = 'min-w-full text-sm';
    
    // Headers
    const thead = document.createElement('thead');
    const headerRow = document.createElement('tr');
    Object.keys(previewData[0]).forEach(key => {
      const th = document.createElement('th');
      th.className = 'px-2 py-1 text-left font-medium text-gray-900 border-b';
      th.textContent = key;
      headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);
    table.appendChild(thead);

    // Rows
    const tbody = document.createElement('tbody');
    previewData.forEach(row => {
      const tr = document.createElement('tr');
      Object.values(row).forEach((value: any) => {
        const td = document.createElement('td');
        td.className = 'px-2 py-1 text-gray-700 border-b';
        td.textContent = value;
        tr.appendChild(td);
      });
      tbody.appendChild(tr);
    });
    table.appendChild(tbody);

    content.innerHTML = '';
    content.appendChild(table);

    stats.textContent = `${data.length} rows loaded (showing first ${Math.min(5, data.length)})`;
    preview.classList.remove('hidden');
  }

  function showSuccessMessage(result: any) {
    const successMessage = document.getElementById('success-message')!;
    const successDetails = document.getElementById('success-details')!;
    
    successDetails.innerHTML = `
      <strong>Curve:</strong> ${result.curveInstance.curveName}<br>
      <strong>Version:</strong> ${result.curveInstance.instanceVersion}<br>
      <strong>Records:</strong> ${result.recordsCreated} price points uploaded
    `;
    
    successMessage.classList.remove('hidden');
    
    // Hide all steps
    showStep(1); // This will hide current step but keep progress
    document.getElementById('step-1')?.classList.add('hidden');
  }

  function resetForm() {
    // Reset global state
    curveDefinition = null;
    curveInstance = null;
    csvData = [];
    
    // Reset form fields
    document.querySelectorAll('input, select, textarea').forEach((element: any) => {
      if (element.id === 'batteryDuration') element.value = 'UNKNOWN';
      else if (element.id === 'scenario') element.value = 'BASE';
      else if (element.id === 'degradationType') element.value = 'NONE';
      else if (element.id === 'createdBy') element.value = 'Upload System';
      else element.value = '';
    });

    // Hide preview and success
    document.getElementById('csv-preview')?.classList.add('hidden');
    document.getElementById('success-message')?.classList.add('hidden');
    document.getElementById('upload-final')!.disabled = true;

    // Show step 1
    showStep(1);
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', function() {
    // Step navigation
    document.getElementById('step1-next')?.addEventListener('click', async function() {
      if (await createCurveDefinition()) {
        showStep(2);
      }
    });

    document.getElementById('step2-back')?.addEventListener('click', function() {
      showStep(1);
    });

    document.getElementById('step2-next')?.addEventListener('click', async function() {
      if (await createCurveInstance()) {
        showStep(3);
      }
    });

    document.getElementById('step3-back')?.addEventListener('click', function() {
      showStep(2);
    });

    // CSV upload
    document.getElementById('csvFile')?.addEventListener('change', function(e: any) {
      const file = e.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = function(e: any) {
        try {
          csvData = parseCSV(e.target.result);
          showCSVPreview(csvData);
          document.getElementById('upload-final')!.disabled = false;
        } catch (error: any) {
          showNotification(`CSV parsing error: ${error.message}`, true);
          csvData = [];
          document.getElementById('upload-final')!.disabled = true;
        }
      };
      reader.readAsText(file);
    });

    // Final upload
    document.getElementById('upload-final')?.addEventListener('click', async function() {
      const button = this as HTMLButtonElement;
      button.disabled = true;
      button.textContent = 'Uploading...';

      const success = await uploadPriceData();
      
      button.disabled = false;
      button.textContent = 'Upload Complete Curve';
    });

    // Upload another
    document.getElementById('upload-another')?.addEventListener('click', function() {
      resetForm();
    });
  });
</script>

<style>
  /* Add any custom styles here */
</style> 
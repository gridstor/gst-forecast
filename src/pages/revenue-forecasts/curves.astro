---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Curve Browser">
  <!-- Batch Download Bar (fixed, appears when curves selected) -->
  <div id="batchDownloadBar" class="hidden fixed bottom-6 left-1/2 transform -translate-x-1/2 z-40">
    <div class="bg-blue-600 text-white rounded-lg px-6 py-4 flex items-center gap-4" style="box-shadow: 0 12px 30px rgba(0,0,0,0.2);">
      <div class="flex items-center gap-3">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
        </svg>
        <div>
          <div class="font-semibold"><span id="selectedCount" class="font-mono">0</span> curves selected</div>
          <div class="text-xs text-blue-100">Download all as combined CSV</div>
        </div>
      </div>
      <div class="flex items-center gap-2">
        <button 
          onclick="downloadSelectedCurves()" 
          class="px-4 py-2 bg-white text-blue-700 rounded-md hover:bg-blue-50 transition-colors font-semibold text-sm shadow-sm"
        >
          Download Selected
        </button>
        <button 
          onclick="clearSelection()" 
          class="px-3 py-2 bg-blue-700 text-white rounded-md hover:bg-blue-800 transition-colors text-sm"
        >
          Clear
        </button>
      </div>
    </div>
  </div>

  <!-- Page uses light gray background per design system -->
  <div class="bg-[#F9FAFB] min-h-screen">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    
    <!-- Header -->
    <div class="mb-6">
      <div class="flex items-center justify-between mb-4">
        <div>
          <h1 class="text-3xl font-bold text-[#2A2A2A] mb-2 tracking-tight">
            Curve Browser & Downloader
          </h1>
          <p class="text-base text-[#6B7280] max-w-3xl">
            Browse all curves by ISO, select vintages, and download data. Check boxes to download multiple curves at once.
          </p>
        </div>
        <a href="/revenue-forecasts/admin" class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors shadow-sm">
          ‚Üê Back to Admin
        </a>
      </div>

      <!-- Filters (Design System: Form elements with uppercase labels) -->
      <div class="bg-white rounded-lg border border-gray-200 p-6" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label class="block text-xs uppercase tracking-wide font-medium text-gray-700 mb-2">Search</label>
            <input 
              type="text" 
              id="searchInput" 
              placeholder="Search curves..." 
              class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
            />
          </div>
          <div>
            <label class="block text-xs uppercase tracking-wide font-medium text-gray-700 mb-2">ISO/Market</label>
            <select id="marketFilter" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
              <option value="">All ISOs</option>
            </select>
          </div>
          <div>
            <label class="block text-xs uppercase tracking-wide font-medium text-gray-700 mb-2">Curve Provider</label>
            <select id="providerFilter" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
              <option value="">All Providers</option>
              <option value="GridStor">GridStor</option>
              <option value="External">External</option>
            </select>
          </div>
          <div>
            <label class="block text-xs uppercase tracking-wide font-medium text-gray-700 mb-2">Freshness</label>
            <select id="freshnessFilter" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
              <option value="all">All Vintages</option>
              <option value="current" selected>Current Only</option>
              <option value="archived">Archived Only</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- Loading State (Design System: White card on gray background) -->
    <div id="loadingState" class="bg-white rounded-lg border border-gray-200 p-12 text-center" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
      <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      <p class="mt-4 text-gray-600 text-sm">Loading curves...</p>
    </div>

    <!-- Error State (Design System: Alert styling) -->
    <div id="errorState" class="hidden bg-white border-l-4 border-red-500 rounded-lg p-6" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
      <div class="flex items-center gap-3">
        <svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        <div class="flex-1">
          <div class="text-red-800 font-semibold mb-1">Error Loading Curves</div>
          <p id="errorMessage" class="text-red-700 text-sm"></p>
        </div>
      </div>
    </div>

    <!-- Quick Selection Helpers -->
    <div id="quickSelectSection" class="hidden mb-6">
      <div class="bg-white rounded-lg border border-gray-200 p-4" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div class="flex items-center justify-between mb-3">
          <div>
            <h3 class="text-sm font-semibold text-[#2A2A2A]">Quick Select</h3>
            <p class="text-xs text-gray-600 mt-0.5">Select common curve combinations for batch download</p>
          </div>
        </div>
        <div class="flex flex-wrap gap-2">
          <button 
            onclick="quickSelectByName('Total')" 
            class="px-3 py-2 text-xs font-medium bg-blue-50 text-blue-700 border border-blue-200 rounded-md hover:bg-blue-100 transition-colors"
          >
            All "Total Revenue" Curves
          </button>
          <button 
            onclick="quickSelectByName('EA')" 
            class="px-3 py-2 text-xs font-medium bg-green-50 text-green-700 border border-green-200 rounded-md hover:bg-green-100 transition-colors"
          >
            All "EA" Curves
          </button>
          <button 
            onclick="quickSelectByName('AS')" 
            class="px-3 py-2 text-xs font-medium bg-purple-50 text-purple-700 border border-purple-200 rounded-md hover:bg-purple-100 transition-colors"
          >
            All "AS" Curves
          </button>
          <button 
            onclick="quickSelectRevenuePack()" 
            class="px-3 py-2 text-xs font-medium bg-orange-50 text-orange-700 border border-orange-200 rounded-md hover:bg-orange-100 transition-colors"
          >
            Revenue Pack (Total + EA + AS)
          </button>
          <button 
            onclick="quickSelectCurrentOnly()" 
            class="px-3 py-2 text-xs font-medium bg-emerald-50 text-emerald-700 border border-emerald-200 rounded-md hover:bg-emerald-100 transition-colors"
          >
            All Current/Fresh Curves
          </button>
          <button 
            onclick="quickSelectByLocation()" 
            class="px-3 py-2 text-xs font-medium bg-gray-50 text-gray-700 border border-gray-200 rounded-md hover:bg-gray-100 transition-colors"
          >
            Select by Location...
          </button>
        </div>
      </div>
    </div>

    <!-- Curves by ISO -->
    <div id="curvesContainer" class="hidden space-y-6">
      <!-- ISO sections will be dynamically inserted here -->
    </div>

    <!-- No Results State (Design System: White card) -->
    <div id="noResultsState" class="hidden bg-white border border-gray-200 rounded-lg p-12 text-center" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
      <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
      <h3 class="text-lg font-semibold text-gray-900 mb-2">No curves found</h3>
      <p class="text-sm text-gray-600">Try adjusting your search or filters</p>
    </div>

  </div>

  <!-- Curve Details Modal (Design System: Dialog styling) -->
  <div id="curveModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden flex flex-col" style="box-shadow: 0 12px 30px rgba(0,0,0,0.1);">
      <div class="px-6 py-4 border-b border-gray-200 flex items-center justify-between bg-gray-50">
        <h3 class="text-xl font-semibold text-[#2A2A2A]" id="modalTitle">Curve Details</h3>
        <button id="closeModal" class="text-gray-400 hover:text-gray-600 transition-colors p-1">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
      <div id="modalContent" class="px-6 py-6 overflow-y-auto flex-1">
        <!-- Content will be dynamically inserted -->
      </div>
    </div>
  </div>
  </div>
  </div>

  <script>
    // ISO Color Mapping (consistent with main site)
    interface ISOColor {
      primary: string;
      light: string;
      border: string;
      text: string;
    }

    const ISO_COLORS: Record<string, ISOColor> = {
      'CAISO': { primary: '#3B82F6', light: '#DBEAFE', border: '#93C5FD', text: '#1E40AF' },
      'ERCOT': { primary: '#10B981', light: '#D1FAE5', border: '#6EE7B7', text: '#065F46' },
      'SPP': { primary: '#8B5CF6', light: '#EDE9FE', border: '#C4B5FD', text: '#5B21B6' },
      'PJM': { primary: '#F59E0B', light: '#FEF3C7', border: '#FCD34D', text: '#92400E' },
      'MISO': { primary: '#EF4444', light: '#FEE2E2', border: '#FCA5A5', text: '#991B1B' },
      'NYISO': { primary: '#EC4899', light: '#FCE7F3', border: '#F9A8D4', text: '#9F1239' },
      'DEFAULT': { primary: '#6B7280', light: '#F3F4F6', border: '#D1D5DB', text: '#374151' }
    };

    interface CurveInstance {
      id: number;
      instanceVersion: string;
      curveTypes: string[];
      commodities: string[];
      scenarios: string[];
      granularity: string | null;
      degradationType: string | null;
      deliveryPeriodStart: string;
      deliveryPeriodEnd: string;
      forecastRunDate: string;
      freshnessStartDate: string;
      freshnessEndDate: string | null;
      status: string;
      modelType: string | null;
      createdBy: string;
      createdAt: string;
      isCurrent: boolean;
      hasPValues: boolean;
      [key: string]: any; // Allow additional properties
    }

    interface CurveDefinition {
      id: number;
      curveName: string;
      market: string;
      location: string;
      batteryDuration: string;
      units: string;
      description: string | null;
      instances: CurveInstance[];
      provider: string; // GridStor or External
      [key: string]: any; // Allow additional properties
    }

    interface CurveData {
      byLocation: Record<string, CurveDefinition[]>;
      locations: string[];
    }

    let allData: CurveData | null = null;
    let selectedCurves: Set<number> = new Set(); // Track selected curve instances for batch download

    // Fetch curves
    async function fetchCurves() {
      try {
        const response = await fetch('/api/curves/browser');
        const result = await response.json();
        
        if (!result.success) {
          throw new Error(result.message || 'Failed to fetch curves');
        }

        allData = result;
        populateMarketFilter();
        renderCurves();
        
        document.getElementById('loadingState')!.classList.add('hidden');
        document.getElementById('curvesContainer')!.classList.remove('hidden');
      } catch (error) {
        console.error('Error fetching curves:', error);
        document.getElementById('loadingState')!.classList.add('hidden');
        document.getElementById('errorState')!.classList.remove('hidden');
        document.getElementById('errorMessage')!.textContent = error instanceof Error ? error.message : 'Unknown error';
      }
    }

    // Populate market filter
    function populateMarketFilter() {
      if (!allData) return;

      const markets = new Set<string>();
      Object.values(allData.byLocation).forEach(curves => {
        curves.forEach(curve => markets.add(curve.market));
      });

      const select = document.getElementById('marketFilter') as HTMLSelectElement;
      const currentValue = select.value;
      
      select.innerHTML = '<option value="">All ISOs</option>';
      
      Array.from(markets).sort().forEach(market => {
        const option = document.createElement('option');
        option.value = market;
        option.textContent = market;
        select.appendChild(option);
      });

      select.value = currentValue;
    }

    // Get ISO color
    function getISOColor(market: string): ISOColor {
      return ISO_COLORS[market] || ISO_COLORS['DEFAULT'];
    }

    // Render curves grouped by ISO
    function renderCurves() {
      if (!allData) return;

      const container = document.getElementById('curvesContainer')!;
      const searchTerm = (document.getElementById('searchInput') as HTMLInputElement).value.toLowerCase();
      const marketFilter = (document.getElementById('marketFilter') as HTMLSelectElement).value;
      const providerFilter = (document.getElementById('providerFilter') as HTMLSelectElement).value;
      const freshnessFilter = (document.getElementById('freshnessFilter') as HTMLSelectElement).value;

      // Group curves by market/ISO
      const curvesByMarket = {} as Record<string, CurveDefinition[]>;
      
      Object.values(allData.byLocation).forEach((curves: CurveDefinition[]) => {
        curves.forEach((curve: CurveDefinition) => {
          // Apply filters
          if (marketFilter && curve.market !== marketFilter) return;
          if (providerFilter && curve.provider !== providerFilter) return;
          if (searchTerm) {
            const searchable = `${curve.curveName} ${curve.location} ${curve.market}`.toLowerCase();
            if (!searchable.includes(searchTerm)) return;
          }

          // Filter instances by freshness
          let instances = curve.instances;
          if (freshnessFilter === 'current') {
            instances = instances.filter(inst => inst.isCurrent);
          } else if (freshnessFilter === 'archived') {
            instances = instances.filter(inst => !inst.isCurrent);
          }

          if (instances.length === 0) return;

          // Group by market
          if (!curvesByMarket[curve.market]) {
            curvesByMarket[curve.market] = [];
          }
          curvesByMarket[curve.market].push({ ...curve, instances });
        });
      });

      const markets = Object.keys(curvesByMarket).sort();
      
      if (markets.length === 0) {
        container.classList.add('hidden');
        document.getElementById('noResultsState')!.classList.remove('hidden');
        return;
      }

      container.classList.remove('hidden');
      document.getElementById('noResultsState')!.classList.add('hidden');

      let html = '';

      // Render each ISO section
      for (const market of markets) {
        const curves: CurveDefinition[] = curvesByMarket[market];
        const color = getISOColor(market);
        
        html += `
          <div class="iso-section">
            <!-- ISO Header (Design System: Accent color with left border) -->
            <div class="bg-white rounded-lg overflow-hidden border-l-4" style="border-left-color: ${color.primary}; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
              <div class="px-6 py-4 flex items-center justify-between" style="background: linear-gradient(to right, ${color.light}, transparent);">
                <h2 class="text-2xl font-semibold text-[#2A2A2A]">${market}</h2>
                <span class="px-3 py-1 rounded-full text-sm font-semibold font-mono" style="background-color: ${color.primary}; color: white;">
                  ${curves.length}
                </span>
              </div>
            
              <!-- Curves -->
              <div class="divide-y divide-gray-100">
        `;

        for (const curve of curves as CurveDefinition[]) {
          const currentInstance = curve.instances[0];
          const isFresh = currentInstance.isCurrent;
          const hasPValues = currentInstance.hasPValues;

          html += `
            <div class="p-6 border-b border-gray-100 last:border-b-0">
              <!-- Curve Definition Header -->
              <div class="flex items-start justify-between mb-4">
                <div class="flex-1">
                  <div class="flex items-center gap-2 mb-2">
                    <h3 class="text-lg font-semibold text-[#2A2A2A]">${curve.curveName}</h3>
                  </div>
                  <div class="flex items-center gap-3 text-sm text-gray-600">
                    <span class="font-medium">${curve.location}</span>
                    <span>‚Ä¢</span>
                    <span>${curve.batteryDuration}</span>
                    <span>‚Ä¢</span>
                    <span class="font-medium">${curve.provider}</span>
                  </div>
                </div>
                <div class="flex items-center gap-2">
                  <button 
                    onclick="selectAllInstances(${curve.id})" 
                    class="px-3 py-1 text-xs font-medium text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded transition-colors"
                  >
                    Select All
                  </button>
                  <button 
                    onclick="viewDetails(${curve.id})" 
                    class="px-3 py-2 text-sm font-medium text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-md transition-colors"
                  >
                    View Details
                  </button>
                </div>
              </div>

              <!-- Available Instances (Selectable List) -->
              <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                <div class="mb-3">
                  <div class="text-xs uppercase tracking-wide font-medium text-gray-700">
                    Available Instances <span class="text-gray-500 font-normal lowercase">‚Ä¢ ${curve.instances.length} total</span>
                  </div>
                  <div class="text-xs text-gray-600 mt-1">Check boxes to include in batch download</div>
                </div>
                
                <div class="space-y-2">
                  ${curve.instances.map((inst: CurveInstance) => {
                    const instColor = inst.isCurrent ? color : ISO_COLORS['DEFAULT'];
                    const commoditiesText = inst.commodities?.join(', ') || 'N/A';
                    const scenariosText = inst.scenarios?.join(', ') || 'N/A';
                    
                    return `
                      <div class="bg-white rounded-lg p-3 border-2 transition-all hover:shadow-sm" style="border-color: ${inst.isCurrent ? color.border : '#E5E7EB'};">
                        <div class="flex items-start gap-3">
                          <!-- Checkbox -->
                          <input 
                            type="checkbox" 
                            id="select_${curve.id}_${inst.id}"
                            class="curve-checkbox w-5 h-5 text-blue-600 border-gray-300 rounded focus:ring-2 focus:ring-blue-500 cursor-pointer mt-0.5"
                            data-curve-id="${curve.id}"
                            data-instance-id="${inst.id}"
                            onchange="toggleCurveSelection(${curve.id}, ${inst.id})"
                          />
                          
                          <!-- Instance Details -->
                          <div class="flex-1 min-w-0">
                            <div class="flex items-center gap-2 mb-1">
                              <span class="font-semibold text-sm text-gray-900">${inst.instanceVersion}</span>
                              ${inst.isCurrent ? `
                                <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-semibold" style="background-color: ${color.light}; color: ${color.text};">
                                  Current
                                </span>
                              ` : `
                                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-600">
                                  Archived
                                </span>
                              `}
                              ${inst.hasPValues ? `
                                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-700">
                                  üìä P-values
                                </span>
                              ` : ''}
                            </div>
                            
                            <div class="grid grid-cols-2 gap-2 text-xs text-gray-600 mt-2">
                              <div>
                                <span class="text-gray-500">Commodities:</span>
                                <span class="font-medium">${commoditiesText}</span>
                              </div>
                              <div>
                                <span class="text-gray-500">Scenarios:</span>
                                <span class="font-medium">${scenariosText}</span>
                              </div>
                              <div>
                                <span class="text-gray-500">Fresh from:</span>
                                <span class="font-medium font-mono">${new Date(inst.freshnessStartDate).toLocaleDateString()}</span>
                              </div>
                              <div>
                                <span class="text-gray-500">Created by:</span>
                                <span class="font-medium">${inst.createdBy}</span>
                              </div>
                            </div>
                          </div>
                          
                          <!-- Quick Download Button -->
                          <button 
                            onclick="downloadSingleInstance(${inst.id})" 
                            class="px-3 py-1.5 text-xs font-semibold text-white rounded-md transition-all shadow-sm hover:shadow-md"
                            style="background-color: ${color.primary};"
                            onmouseover="this.style.opacity='0.9'"
                            onmouseout="this.style.opacity='1'"
                            title="Download this instance only"
                          >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"/>
                            </svg>
                          </button>
                        </div>
                      </div>
                    `;
                  }).join('')}
                </div>
              </div>
            </div>
          `;
        }

        html += `
              </div>
            </div>
          </div>
        `;
      }

      container.innerHTML = html;
      
      // Show quick select section if there are curves
      const quickSelectSection = document.getElementById('quickSelectSection');
      if (quickSelectSection) {
        if (markets.length > 0) {
          quickSelectSection.classList.remove('hidden');
        } else {
          quickSelectSection.classList.add('hidden');
        }
      }
    }

    // Quick select functions
    (window as any).quickSelectByName = function(searchTerm: string) {
      if (!allData) return;
      
      let count = 0;
      document.querySelectorAll('.curve-checkbox').forEach((checkbox: Element) => {
        const input = checkbox as HTMLInputElement;
        const curveId = parseInt(input.dataset.curveId || '0');
        
        // Find curve name
        let curveName = '';
        Object.values(allData!.byLocation).forEach((curves: CurveDefinition[]) => {
          const curve = curves.find((c: CurveDefinition) => c.id === curveId);
          if (curve) curveName = curve.curveName;
        });
        
        if (curveName.toUpperCase().includes(searchTerm.toUpperCase())) {
          input.checked = true;
          const instanceId = parseInt(input.dataset.instanceId || '0');
          selectedCurves.add(instanceId);
          count++;
        }
      });
      
      updateBatchDownloadBar();
      showToast(`Selected ${count} "${searchTerm}" curve${count !== 1 ? 's' : ''}`, 'success');
    };

    (window as any).quickSelectRevenuePack = function() {
      if (!allData) return;
      
      const terms = ['TOTAL', 'EA', 'AS'];
      let count = 0;
      
      document.querySelectorAll('.curve-checkbox').forEach((checkbox: Element) => {
        const input = checkbox as HTMLInputElement;
        const curveId = parseInt(input.dataset.curveId || '0');
        
        // Find curve name
        let curveName = '';
        Object.values(allData!.byLocation).forEach((curves: CurveDefinition[]) => {
          const curve = curves.find((c: CurveDefinition) => c.id === curveId);
          if (curve) curveName = curve.curveName;
        });
        
        const nameUpper = curveName.toUpperCase();
        if (terms.some(term => nameUpper.includes(term))) {
          input.checked = true;
          const instanceId = parseInt(input.dataset.instanceId || '0');
          selectedCurves.add(instanceId);
          count++;
        }
      });
      
      updateBatchDownloadBar();
      showToast(`Selected ${count} revenue curves (Total + EA + AS)`, 'success');
    };

    (window as any).quickSelectCurrentOnly = function() {
      let count = 0;
      
      document.querySelectorAll('.curve-checkbox').forEach((checkbox: Element) => {
        const input = checkbox as HTMLInputElement;
        const instanceId = parseInt(input.dataset.instanceId || '0');
        
        // Check if this instance is current
        let isCurrent = false;
        if (allData) {
          Object.values(allData.byLocation).forEach((curves: CurveDefinition[]) => {
            curves.forEach((curve: CurveDefinition) => {
              const instance = curve.instances.find((inst: CurveInstance) => inst.id === instanceId);
              if (instance && instance.isCurrent) {
                isCurrent = true;
              }
            });
          });
        }
        
        if (isCurrent) {
          input.checked = true;
          selectedCurves.add(instanceId);
          count++;
        }
      });
      
      updateBatchDownloadBar();
      showToast(`Selected ${count} current/fresh curve${count !== 1 ? 's' : ''}`, 'success');
    };

    (window as any).quickSelectByLocation = function() {
      if (!allData) return;
      
      const locations = allData.locations;
      const location = prompt(`Select all curves from location:\n\nAvailable: ${locations.join(', ')}\n\nEnter location name:`);
      
      if (!location) return;
      
      let count = 0;
      document.querySelectorAll('.curve-checkbox').forEach((checkbox: Element) => {
        const input = checkbox as HTMLInputElement;
        const curveId = parseInt(input.dataset.curveId || '0');
        
        // Find curve location
        let curveLocation = '';
        Object.values(allData!.byLocation).forEach((curves: CurveDefinition[]) => {
          const curve = curves.find((c: CurveDefinition) => c.id === curveId);
          if (curve) curveLocation = curve.location;
        });
        
        if (curveLocation.toLowerCase() === location.toLowerCase()) {
          input.checked = true;
          const instanceId = parseInt(input.dataset.instanceId || '0');
          selectedCurves.add(instanceId);
          count++;
        }
      });
      
      updateBatchDownloadBar();
      if (count > 0) {
        showToast(`Selected ${count} curve${count !== 1 ? 's' : ''} from ${location}`, 'success');
      } else {
        showToast(`No curves found for location "${location}"`, 'error');
      }
    };

    // Render vintage info (Design System: Uppercase labels, monospace for data)
    function renderVintageInfo(instance: CurveInstance, color: ISOColor): string {
      return `
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div>
            <div class="text-xs uppercase tracking-wide text-gray-500 font-medium mb-1">Status</div>
            <div class="font-semibold" style="color: ${instance.isCurrent ? color.text : '#6B7280'};">
              ${instance.isCurrent ? 'Current' : 'Archived'}
            </div>
          </div>
          <div>
            <div class="text-xs uppercase tracking-wide text-gray-500 font-medium mb-1">Granularity</div>
            <div class="font-semibold text-gray-900">${instance.granularity || 'N/A'}</div>
          </div>
          <div>
            <div class="text-xs uppercase tracking-wide text-gray-500 font-medium mb-1">Created By</div>
            <div class="font-semibold text-gray-900">${instance.createdBy}</div>
          </div>
          <div>
            <div class="text-xs uppercase tracking-wide text-gray-500 font-medium mb-1">Fresh From</div>
            <div class="font-semibold text-gray-900 font-mono">${new Date(instance.freshnessStartDate).toLocaleDateString()}</div>
          </div>
        </div>
      `;
    }

    // Toggle curve selection for batch download
    (window as any).toggleCurveSelection = function(curveId: number, instanceId: number) {
      const checkbox = document.getElementById(`select_${curveId}_${instanceId}`) as HTMLInputElement;
      
      if (checkbox && checkbox.checked) {
        selectedCurves.add(instanceId);
      } else {
        selectedCurves.delete(instanceId);
      }
      
      updateBatchDownloadBar();
    };

    // Select all instances for a curve definition
    (window as any).selectAllInstances = function(curveId: number) {
      if (!allData) return;
      
      let count = 0;
      let curveName = '';
      
      // Find all instances for this curve
      Object.values(allData.byLocation).forEach((curves: CurveDefinition[]) => {
        const curve = curves.find((c: CurveDefinition) => c.id === curveId);
        if (curve) {
          curveName = curve.curveName;
          curve.instances.forEach((inst: CurveInstance) => {
            const checkbox = document.getElementById(`select_${curveId}_${inst.id}`) as HTMLInputElement;
            if (checkbox) {
              checkbox.checked = true;
              selectedCurves.add(inst.id);
              count++;
            }
          });
        }
      });
      
      updateBatchDownloadBar();
      showToast(`Selected ${count} instance${count !== 1 ? 's' : ''} from ${curveName}`, 'success');
    };

    // Download a single instance immediately
    (window as any).downloadSingleInstance = async function(instanceId: number) {
      try {
        const response = await fetch(`/api/curves/download?instanceId=${instanceId}`);
        
        if (!response.ok) {
          throw new Error('Failed to download curve');
        }

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        
        const contentDisposition = response.headers.get('Content-Disposition');
        const filename = contentDisposition 
          ? contentDisposition.split('filename=')[1].replace(/"/g, '')
          : 'curve_data.csv';
        
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        showToast('Curve downloaded successfully', 'success');
      } catch (error) {
        console.error('Error downloading instance:', error);
        showToast('Download failed', 'error');
      }
    };

    // Update batch download bar visibility and count
    function updateBatchDownloadBar() {
      const bar = document.getElementById('batchDownloadBar');
      const countEl = document.getElementById('selectedCount');
      
      if (!bar || !countEl) return;
      
      if (selectedCurves.size > 0) {
        bar.classList.remove('hidden');
        countEl.textContent = selectedCurves.size.toString();
      } else {
        bar.classList.add('hidden');
      }
    }

    // Clear selection
    (window as any).clearSelection = function() {
      selectedCurves.clear();
      
      // Uncheck all checkboxes
      document.querySelectorAll('.curve-checkbox').forEach((checkbox: Element) => {
        (checkbox as HTMLInputElement).checked = false;
      });
      
      updateBatchDownloadBar();
      showToast('Selection cleared', 'info');
    };

    // Download all selected curves
    (window as any).downloadSelectedCurves = async function() {
      if (selectedCurves.size === 0) {
        showToast('No curves selected', 'error');
        return;
      }

      try {
        const instanceIds = Array.from(selectedCurves);
        const response = await fetch('/api/curves/download-batch', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ instanceIds })
        });
        
        if (!response.ok) {
          throw new Error('Failed to download curves');
        }

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        
        const contentDisposition = response.headers.get('Content-Disposition');
        const filename = contentDisposition 
          ? contentDisposition.split('filename=')[1].replace(/"/g, '')
          : `curves_batch_${new Date().toISOString().split('T')[0]}.csv`;
        
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        showToast(`Downloaded ${selectedCurves.size} curve${selectedCurves.size !== 1 ? 's' : ''} successfully`, 'success');
      } catch (error) {
        console.error('Error downloading curves:', error);
        showToast('Batch download failed', 'error');
      }
    };


    // View curve details
    (window as any).viewDetails = function(curveId: number) {
      if (!allData) return;

      let curve: CurveDefinition | null = null;
      Object.values(allData.byLocation).forEach((curves: CurveDefinition[]) => {
        const found = curves.find((c: CurveDefinition) => c.id === curveId);
        if (found) curve = found;
      });

      if (!curve) return;
      
      // Type assertion after null check
      const curveData: CurveDefinition = curve;

      const modal = document.getElementById('curveModal');
      const title = document.getElementById('modalTitle');
      const content = document.getElementById('modalContent');

      if (!modal || !title || !content) return;

      title.textContent = curveData.curveName;
      const color = getISOColor(curveData.market);
      
      content.innerHTML = `
        <div class="space-y-6">
          <!-- Definition Info (Design System: MetricBox style) -->
          <div>
            <h4 class="text-base font-semibold text-[#2A2A2A] mb-3">Curve Definition</h4>
            <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
              <div class="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <div class="text-xs uppercase tracking-wide text-gray-500 font-medium mb-1">ISO/Market</div>
                  <div class="font-semibold text-gray-900">${curveData.market}</div>
                </div>
                <div>
                  <div class="text-xs uppercase tracking-wide text-gray-500 font-medium mb-1">Location</div>
                  <div class="font-semibold text-gray-900">${curveData.location}</div>
                </div>
                <div>
                  <div class="text-xs uppercase tracking-wide text-gray-500 font-medium mb-1">Battery Duration</div>
                  <div class="font-semibold text-gray-900">${curveData.batteryDuration}</div>
                </div>
                <div>
                  <div class="text-xs uppercase tracking-wide text-gray-500 font-medium mb-1">Provider</div>
                  <div class="font-semibold text-gray-900">${curveData.provider}</div>
                </div>
              </div>
            </div>
          </div>

          <!-- All Vintages (Design System: Card list) -->
          <div>
            <div class="flex items-center justify-between mb-3">
              <h4 class="text-base font-semibold text-[#2A2A2A]">All Vintages</h4>
              <span class="px-2.5 py-0.5 rounded-full text-xs font-semibold bg-gray-100 text-gray-800 font-mono">
                ${curveData.instances.length}
              </span>
            </div>
            <div class="space-y-3 max-h-96 overflow-y-auto pr-2">
              ${curveData.instances.map((inst: CurveInstance) => `
                <div class="rounded-lg p-4 transition-all hover:shadow-md" style="background-color: ${inst.isCurrent ? color.light : '#F9FAFB'}; border: 2px solid ${inst.isCurrent ? color.border : '#E5E7EB'};">
                  <div class="flex items-center justify-between mb-3">
                    <div class="flex items-center gap-2">
                      <div class="font-semibold text-base text-gray-900">${inst.instanceVersion}</div>
                      ${inst.isCurrent ? `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-semibold" style="background-color: ${color.light}; color: ${color.text};">Current</span>` : ''}
                    </div>
                    <button 
                      onclick="downloadInstance(${inst.id})" 
                      class="px-3 py-1.5 text-xs font-semibold rounded-md text-white shadow-sm hover:shadow-md transition-all"
                      style="background-color: ${color.primary};"
                      onmouseover="this.style.opacity='0.9'"
                      onmouseout="this.style.opacity='1'"
                    >
                      Download
                    </button>
                  </div>
                  ${renderVintageInfo(inst, color)}
                </div>
              `).join('')}
            </div>
          </div>
        </div>
      `;

      modal.classList.remove('hidden');
    };

    // Download specific instance
    (window as any).downloadInstance = async function(instanceId: number) {
      try {
        const response = await fetch(`/api/curves/download?instanceId=${instanceId}`);
        if (!response.ok) throw new Error('Failed to download');

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        
        const contentDisposition = response.headers.get('Content-Disposition');
        const filename = contentDisposition 
          ? contentDisposition.split('filename=')[1].replace(/"/g, '')
          : 'curve_data.csv';
        
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        showToast('Curve downloaded successfully', 'success');
      } catch (error) {
        console.error('Error:', error);
        showToast('Download failed', 'error');
      }
    };

    // Close modal
    document.getElementById('closeModal')?.addEventListener('click', () => {
      document.getElementById('curveModal')!.classList.add('hidden');
    });

    document.getElementById('curveModal')?.addEventListener('click', (e) => {
      if (e.target === e.currentTarget) {
        document.getElementById('curveModal')!.classList.add('hidden');
      }
    });

    // Toast notification (Design System: Shadow and transitions)
    function showToast(message: string, type: 'success' | 'error' | 'info' = 'info') {
      const toast = document.createElement('div');
      const bgColor = type === 'success' ? '#10B981' : type === 'error' ? '#EF4444' : '#3B82F6';
      toast.className = 'fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white text-sm font-medium flex items-center gap-2';
      toast.style.backgroundColor = bgColor;
      toast.style.boxShadow = '0 4px 6px rgba(0,0,0,0.1)';
      
      const icon = type === 'success' ? '‚úì' : type === 'error' ? '‚úï' : '‚Ñπ';
      toast.innerHTML = `<span class="text-lg">${icon}</span><span>${message}</span>`;
      
      document.body.appendChild(toast);

      setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transition = 'opacity 200ms';
        setTimeout(() => {
          if (toast.parentNode) {
            document.body.removeChild(toast);
          }
        }, 200);
      }, 2500);
    }

    // Event listeners for filters
    document.getElementById('searchInput')?.addEventListener('input', renderCurves);
    document.getElementById('marketFilter')?.addEventListener('change', renderCurves);
    document.getElementById('providerFilter')?.addEventListener('change', renderCurves);
    document.getElementById('freshnessFilter')?.addEventListener('change', renderCurves);

    // Initialize
    document.addEventListener('DOMContentLoaded', fetchCurves);
  </script>
</Layout>

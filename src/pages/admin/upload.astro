---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Curve Management & Upload">
  <!-- Page Header - Design System -->
  <div class="mb-8">
    <h1 class="text-2xl font-bold text-[#2A2A2A] mb-2" style="letter-spacing: -0.01em;">Curve Management & Upload</h1>
    <p class="text-base text-[#6B7280]">Select a definition and instance, then upload or manage data</p>
  </div>

  <div class="max-w-[1800px] mx-auto">
    <!-- Global Filters - Design System Card -->
    <div class="bg-white rounded-lg p-6 mb-6 accent-border-gray" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
      <div class="flex items-center gap-2 mb-4">
        <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/>
        </svg>
        <h2 class="text-lg font-semibold text-[#1F2937]">Global Filters</h2>
        <span class="text-sm text-[#6B7280]">(applies to all sections below)</span>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Market</label>
          <select id="globalMarket" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white text-[#111827] focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all">
            <option value="">All Markets</option>
            <option value="CAISO">CAISO</option>
            <option value="ERCOT">ERCOT</option>
            <option value="PJM">PJM</option>
            <option value="NYISO">NYISO</option>
            <option value="ISO-NE">ISO-NE</option>
            <option value="MISO">MISO</option>
          </select>
        </div>
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Location</label>
          <input type="text" id="globalLocation" placeholder="Any location" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white text-[#111827] placeholder-[#9CA3AF] focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all" />
        </div>
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Product</label>
          <input type="text" id="globalProduct" placeholder="Any product" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white text-[#111827] placeholder-[#9CA3AF] focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all" />
        </div>
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Curve Type</label>
          <select id="globalCurveType" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white text-[#111827] focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all">
            <option value="">All Types</option>
            <option value="REVENUE">Revenue</option>
            <option value="ENERGY">Energy</option>
            <option value="AS">Ancillary Services</option>
            <option value="RA">Resource Adequacy</option>
          </select>
        </div>
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Granularity</label>
          <select id="globalGranularity" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white text-[#111827] focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all">
            <option value="">All</option>
            <option value="HOURLY">Hourly</option>
            <option value="DAILY">Daily</option>
            <option value="MONTHLY">Monthly</option>
            <option value="QUARTERLY">Quarterly</option>
            <option value="ANNUAL">Annual</option>
          </select>
        </div>
      </div>
      <div class="mt-4 flex items-center justify-between">
        <button id="clearFilters" class="text-sm text-[#3B82F6] hover:text-[#2563EB] font-medium">Clear All Filters</button>
        <span id="filterCount" class="text-sm text-[#6B7280] font-mono"></span>
      </div>
    </div>

    <!-- Detail Panel (shows when item selected) - Design System -->
    <div id="detailPanel" class="hidden bg-[#EFF6FF] rounded-lg p-6 mb-6 border-2 border-[#3B82F6]" style="box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
      <div class="flex items-start justify-between">
        <div class="flex-1">
          <div class="flex items-center gap-2 mb-4">
            <h3 class="text-lg font-semibold text-[#1F2937]" id="detailTitle">Selected Item Details</h3>
            <span id="detailBadge" class="px-2 py-1 text-xs font-mono rounded"></span>
          </div>
          <div id="detailContent" class="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm"></div>
        </div>
        <button id="closeDetail" class="text-[#9CA3AF] hover:text-[#6B7280] ml-4 transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
    </div>

    <!-- Three Column Layout - Design System Cards -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      
      <!-- COLUMN 1: CURVE DEFINITIONS -->
      <div class="bg-white rounded-lg overflow-hidden flex flex-col h-[800px] accent-border-blue" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <!-- Header -->
        <div class="px-6 py-4 border-b border-[#F3F4F6]">
          <h2 class="text-lg font-semibold text-[#1F2937]">1. Curve Definitions</h2>
          <p class="text-sm text-[#6B7280] mt-1">Select or create a definition</p>
        </div>

          <!-- Search & Sort -->
          <div class="px-6 py-3 border-b border-gray-200 space-y-3">
            <input 
              type="text" 
              id="defSearch" 
              placeholder="Search definitions..." 
              class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <select id="defSort" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              <option value="recent">Recent First</option>
              <option value="name">Name (A-Z)</option>
              <option value="market">Market</option>
              <option value="location">Location</option>
            </select>
          </div>

          <!-- List -->
          <div id="defList" class="flex-1 overflow-y-auto px-4 py-3">
            <div class="text-center text-gray-500 text-sm py-8">Loading definitions...</div>
          </div>

          <!-- Add New Button -->
          <div class="px-6 py-4 border-t border-[#E5E7EB] bg-[#F9FAFB] space-y-2">
            <button id="addDefBtn" class="w-full px-4 py-2 bg-[#3B82F6] text-white rounded-md hover:bg-[#2563EB] transition-colors text-sm font-medium">
              + Add New Definition
            </button>
            <button id="useDefTemplateBtn" class="w-full px-4 py-2 bg-blue-100 text-blue-700 border border-blue-300 rounded-md hover:bg-blue-200 transition-colors text-sm font-medium" disabled>
              ðŸ“‹ Use Selected as Template
            </button>
          </div>
        </div>

        <!-- COLUMN 2: CURVE INSTANCES -->
        <div class="bg-white rounded-lg overflow-hidden flex flex-col h-[800px] accent-border-green" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
          <!-- Header -->
          <div class="px-6 py-4 border-b border-[#F3F4F6]">
            <h2 class="text-lg font-semibold text-[#1F2937]">2. Curve Instances</h2>
            <p class="text-sm text-[#6B7280] mt-1">Select or create an instance</p>
          </div>

          <!-- Search & Sort -->
          <div class="px-6 py-3 border-b border-gray-200 space-y-3">
            <input 
              type="text" 
              id="instSearch" 
              placeholder="Search instances..." 
              class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent"
              disabled
            />
            <select id="instSort" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-transparent" disabled>
              <option value="recent">Recent First</option>
              <option value="version">Version</option>
              <option value="status">Status</option>
            </select>
          </div>

          <!-- List -->
          <div id="instList" class="flex-1 overflow-y-auto px-4 py-3">
            <div class="text-center text-gray-500 text-sm py-8">Select a definition first</div>
          </div>

          <!-- Add New Button -->
          <div class="px-6 py-4 border-t border-[#E5E7EB] bg-[#F9FAFB] space-y-2">
            <button id="addInstBtn" class="w-full px-4 py-2 bg-[#10B981] text-white rounded-md hover:bg-[#059669] transition-colors text-sm font-medium" disabled>
              + Add New Instance
            </button>
            <button id="useInstTemplateBtn" class="w-full px-4 py-2 bg-green-100 text-green-700 border border-green-300 rounded-md hover:bg-green-200 transition-colors text-sm font-medium" disabled>
              ðŸ“‹ Use Selected as Template
            </button>
          </div>
        </div>

        <!-- COLUMN 3: CURVE DATA -->
        <div class="bg-white rounded-lg overflow-hidden flex flex-col h-[800px] accent-border-purple" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
          <!-- Header -->
          <div class="px-6 py-4 border-b border-[#F3F4F6]">
            <h2 class="text-lg font-semibold text-[#1F2937]">3. Curve Data</h2>
            <p class="text-sm text-[#6B7280] mt-1">Upload or manage data</p>
          </div>

          <!-- Data Info -->
          <div id="dataInfo" class="px-6 py-3 border-b border-gray-200">
            <div class="text-center text-gray-500 text-sm py-8">Select an instance first</div>
          </div>

          <!-- Data Preview / Upload Area -->
          <div id="dataContent" class="flex-1 overflow-y-auto px-6 py-4">
            <!-- Will be populated dynamically -->
          </div>

          <!-- Action Buttons -->
          <div class="px-6 py-4 border-t border-gray-200 bg-gray-50 space-y-2">
            <button id="downloadExistingDataBtn" class="w-full px-4 py-2 bg-purple-100 text-purple-700 border border-purple-300 rounded-md hover:bg-purple-200 transition-colors text-sm font-medium" disabled>
              ðŸ’¾ Download Existing Data
            </button>
            <button id="downloadTemplateBtn" class="w-full px-4 py-2 bg-[#8B5CF6] text-white rounded-md hover:bg-[#7C3AED] transition-colors text-sm font-medium" disabled>
              ðŸ“¥ Download Empty Template
            </button>
            <button id="uploadDataBtn" class="w-full px-4 py-2 bg-[#3B82F6] text-white rounded-md hover:bg-[#2563EB] transition-colors text-sm font-medium" disabled>
              ðŸ“¤ Upload New Data
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Notification Toast -->
    <div id="toast" class="hidden fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg text-white max-w-md"></div>

    <!-- Add/Edit Definition Modal -->
    <div id="defModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div class="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
          <h3 class="text-lg font-semibold" id="defModalTitle">Add Curve Definition</h3>
          <button id="closeDefModal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
        <div class="px-6 py-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="md:col-span-2">
              <label class="block text-sm font-medium text-gray-700 mb-1">Curve Name *</label>
              <input type="text" id="defCurveName" class="w-full px-3 py-2 border rounded-md" required />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Market *</label>
              <select id="defMarket" class="w-full px-3 py-2 border rounded-md" required>
                <option value="">Select</option>
                <option value="CAISO">CAISO</option>
                <option value="ERCOT">ERCOT</option>
                <option value="PJM">PJM</option>
                <option value="NYISO">NYISO</option>
                <option value="ISO-NE">ISO-NE</option>
                <option value="MISO">MISO</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Location *</label>
              <input type="text" id="defLocation" class="w-full px-3 py-2 border rounded-md" placeholder="e.g., SP15, Houston" required />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Battery Duration</label>
              <select id="defBatteryDuration" class="w-full px-3 py-2 border rounded-md">
                <option value="UNKNOWN">Unknown</option>
                <option value="2H">2 Hours</option>
                <option value="4H">4 Hours</option>
                <option value="8H">8 Hours</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Units *</label>
              <select id="defUnits" class="w-full px-3 py-2 border rounded-md" required>
                <option value="$/MWh">$/MWh</option>
                <option value="$/kW-month">$/kW-month</option>
                <option value="$/MW">$/MW</option>
                <option value="$/kW">$/kW</option>
                <option value="MWh">MWh</option>
                <option value="MW">MW</option>
                <option value="%">%</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Timezone</label>
              <input type="text" id="defTimezone" value="UTC" placeholder="UTC, America/Los_Angeles, etc." class="w-full px-3 py-2 border rounded-md" />
            </div>
            <div class="md:col-span-2">
              <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
              <textarea id="defDescription" rows="2" class="w-full px-3 py-2 border rounded-md" placeholder="Optional description"></textarea>
            </div>
          </div>
        </div>
        <div class="px-6 py-4 border-t border-gray-200 bg-gray-50 flex justify-end gap-3">
          <button id="cancelDefModal" class="px-4 py-2 border border-[#E5E7EB] rounded-md text-[#6B7280] hover:bg-[#F3F4F6] font-medium transition-colors">Cancel</button>
          <button id="saveDefModal" class="px-4 py-2 bg-[#3B82F6] text-white rounded-md hover:bg-[#2563EB] font-medium transition-colors">Save Definition</button>
        </div>
      </div>
    </div>

    <!-- Add/Edit Instance Modal -->
    <div id="instModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div class="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
          <h3 class="text-lg font-semibold" id="instModalTitle">Add Curve Instance</h3>
          <button id="closeInstModal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
        <div class="px-6 py-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="md:col-span-2">
              <label class="block text-sm font-medium text-gray-700 mb-1">Instance Version *</label>
              <input type="text" id="instVersion" placeholder="e.g., v1.0, 2024-Q1" class="w-full px-3 py-2 border rounded-md" required />
            </div>
            
            <!-- MOVED FROM DEFINITION: Instance-specific fields -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Curve Type *</label>
              <select id="instCurveType" class="w-full px-3 py-2 border rounded-md" required>
                <option value="">Select</option>
                <option value="Revenue Forecast">Revenue Forecast</option>
                <option value="Price Forecast">Price Forecast</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Commodity *</label>
              <select id="instCommodity" class="w-full px-3 py-2 border rounded-md" required>
                <option value="">Select</option>
                <option value="Total Revenue">Total Revenue</option>
                <option value="EA Revenue">EA Revenue</option>
                <option value="AS Revenue">AS Revenue</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Granularity *</label>
              <select id="instGranularity" class="w-full px-3 py-2 border rounded-md" required>
                <option value="MONTHLY">Monthly</option>
                <option value="QUARTERLY">Quarterly</option>
                <option value="ANNUAL">Annual</option>
                <option value="HOURLY">Hourly</option>
                <option value="DAILY">Daily</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Scenario</label>
              <select id="instScenario" class="w-full px-3 py-2 border rounded-md">
                <option value="BASE">Base</option>
                <option value="HIGH">High</option>
                <option value="LOW">Low</option>
                <option value="P50">P50</option>
                <option value="P90">P90</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Degradation Type</label>
              <select id="instDegradationType" class="w-full px-3 py-2 border rounded-md">
                <option value="NONE">None</option>
                <option value="YEAR_1">Year 1</option>
                <option value="YEAR_5">Year 5</option>
                <option value="YEAR_10">Year 10</option>
                <option value="YEAR_15">Year 15</option>
                <option value="YEAR_20">Year 20</option>
              </select>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Delivery Period Start *</label>
              <input type="date" id="instStartDate" class="w-full px-3 py-2 border rounded-md" required />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Delivery Period End *</label>
              <input type="date" id="instEndDate" class="w-full px-3 py-2 border rounded-md" required />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Model Type</label>
              <input type="text" id="instModelType" placeholder="e.g., Aurora, Manual" class="w-full px-3 py-2 border rounded-md" />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Created By</label>
              <input type="text" id="instCreatedBy" value="Upload System" class="w-full px-3 py-2 border rounded-md" />
            </div>
            <div class="md:col-span-2">
              <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
              <textarea id="instNotes" rows="3" class="w-full px-3 py-2 border rounded-md"></textarea>
            </div>
          </div>
        </div>
        <div class="px-6 py-4 border-t border-gray-200 bg-gray-50 flex justify-end gap-3">
          <button id="cancelInstModal" class="px-4 py-2 border border-[#E5E7EB] rounded-md text-[#6B7280] hover:bg-[#F3F4F6] font-medium transition-colors">Cancel</button>
          <button id="saveInstModal" class="px-4 py-2 bg-[#10B981] text-white rounded-md hover:bg-[#059669] font-medium transition-colors">Save Instance</button>
        </div>
      </div>
    </div>

    <!-- Upload Data Modal -->
    <div id="uploadModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div class="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
          <h3 class="text-lg font-semibold">Upload Curve Data</h3>
          <button id="closeUploadModal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
        <div class="px-6 py-4">
          <div class="mb-4 p-4 bg-blue-50 rounded-lg text-sm">
            <p class="font-medium mb-1">CSV Format:</p>
            <code class="text-xs">timestamp,value,pvalue,units</code>
            <p class="mt-2 text-gray-600">Example: 2024-01-01T00:00:00Z,45.50,50,$/MWh</p>
          </div>
          <input type="file" id="csvFileInput" accept=".csv" class="w-full mb-4 text-sm file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" />
          <div id="csvPreview" class="hidden">
            <h4 class="font-medium mb-2">Preview</h4>
            <div id="csvPreviewContent" class="bg-gray-50 rounded-md p-3 max-h-64 overflow-auto text-sm"></div>
            <p id="csvStats" class="text-sm text-gray-600 mt-2"></p>
          </div>
        </div>
        <div class="px-6 py-4 border-t border-gray-200 bg-gray-50 flex justify-end gap-3">
          <button id="cancelUploadModal" class="px-4 py-2 border border-[#E5E7EB] rounded-md text-[#6B7280] hover:bg-[#F3F4F6] font-medium transition-colors">Cancel</button>
          <button id="confirmUploadModal" class="px-4 py-2 bg-[#3B82F6] text-white rounded-md hover:bg-[#2563EB] font-medium transition-colors" disabled>Upload Data</button>
        </div>
      </div>
    </div>

    <!-- Template Generator Modal -->
    <div id="templateModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div class="bg-white rounded-lg max-w-xl w-full">
        <div class="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
          <h3 class="text-lg font-semibold">Generate CSV Template</h3>
          <button id="closeTemplateModal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
        <div class="px-6 py-4">
          <div class="grid grid-cols-2 gap-4 mb-4">
            <div>
              <label class="block text-sm font-medium mb-1">Start Date</label>
              <input type="date" id="templateStart" class="w-full px-3 py-2 border rounded-md" />
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">End Date</label>
              <input type="date" id="templateEnd" class="w-full px-3 py-2 border rounded-md" />
            </div>
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium mb-1">P-Values</label>
            <div class="flex gap-4 flex-wrap">
              <label class="inline-flex items-center"><input type="checkbox" id="p5" checked class="mr-1" /> P5</label>
              <label class="inline-flex items-center"><input type="checkbox" id="p25" checked class="mr-1" /> P25</label>
              <label class="inline-flex items-center"><input type="checkbox" id="p50" checked class="mr-1" /> P50</label>
              <label class="inline-flex items-center"><input type="checkbox" id="p75" checked class="mr-1" /> P75</label>
              <label class="inline-flex items-center"><input type="checkbox" id="p95" checked class="mr-1" /> P95</label>
            </div>
          </div>
        </div>
        <div class="px-6 py-4 border-t border-gray-200 bg-gray-50 flex justify-end gap-3">
          <button id="cancelTemplateModal" class="px-4 py-2 border border-[#E5E7EB] rounded-md text-[#6B7280] hover:bg-[#F3F4F6] font-medium transition-colors">Cancel</button>
          <button id="generateTemplateBtn" class="px-4 py-2 bg-[#8B5CF6] text-white rounded-md hover:bg-[#7C3AED] font-medium transition-colors">Generate</button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Check for URL parameters (from calendar click)
  const urlParams = new URLSearchParams(window.location.search);
  const curveIdFromCalendar = urlParams.get('curveId');
  const fromCalendar = urlParams.get('fromCalendar') === 'true';

  // State
  let allDefs: any[] = [];
  let allInsts: any[] = [];
  let selectedDef: any = null;
  let selectedInst: any = null;
  let csvData: any[] = [];

  // Toast notification
  function toast(msg: string, type: 'success' | 'error' = 'success') {
    const el = document.getElementById('toast')!;
    el.textContent = msg;
    el.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg text-white max-w-md ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
    el.classList.remove('hidden');
    setTimeout(() => el.classList.add('hidden'), 4000);
  }

  // Load definitions
  async function loadDefinitions() {
    try {
      const res = await fetch('/api/curves/definitions');
      allDefs = await res.json();
      renderDefinitions();
      
      // Auto-select curve if coming from calendar
      if (fromCalendar && curveIdFromCalendar) {
        const curveId = parseInt(curveIdFromCalendar);
        const matchingDef = allDefs.find(def => def.id === curveId);
        if (matchingDef) {
          selectDefinition(matchingDef);
          toast('Curve pre-selected from calendar', 'success');
        }
      }
    } catch (e) {
      toast('Failed to load definitions', 'error');
      console.error(e);
    }
  }

  // Apply global filters
  function applyGlobalFilters(items: any[], type: 'def' | 'inst') {
    const market = (document.getElementById('globalMarket') as HTMLSelectElement).value;
    const location = (document.getElementById('globalLocation') as HTMLInputElement).value.toLowerCase();
    const product = (document.getElementById('globalProduct') as HTMLInputElement).value.toLowerCase();
    const curveType = (document.getElementById('globalCurveType') as HTMLSelectElement).value;
    const granularity = (document.getElementById('globalGranularity') as HTMLSelectElement).value;

    return items.filter(item => {
      if (type === 'def') {
        if (market && item.market !== market) return false;
        if (location && !item.location.toLowerCase().includes(location)) return false;
        if (product && !item.product?.toLowerCase().includes(product)) return false;
        if (curveType && item.curveType !== curveType) return false;
        if (granularity && item.granularity !== granularity) return false;
      }
      // Instances inherit definition filters through selectedDef
      return true;
    });
  }

  function updateFilterCount() {
    const filters = [
      (document.getElementById('globalMarket') as HTMLSelectElement).value,
      (document.getElementById('globalLocation') as HTMLInputElement).value,
      (document.getElementById('globalProduct') as HTMLInputElement).value,
      (document.getElementById('globalCurveType') as HTMLSelectElement).value,
      (document.getElementById('globalGranularity') as HTMLSelectElement).value
    ].filter(v => v).length;

    const el = document.getElementById('filterCount')!;
    el.textContent = filters > 0 ? `${filters} filter${filters > 1 ? 's' : ''} active` : '';
  }

  // Render definitions list
  function renderDefinitions() {
    const container = document.getElementById('defList')!;
    const search = (document.getElementById('defSearch') as HTMLInputElement).value.toLowerCase();
    const sort = (document.getElementById('defSort') as HTMLSelectElement).value;

    // Apply global filters first
    let filtered = applyGlobalFilters(allDefs, 'def');

    // Then apply local search
    filtered = filtered.filter(d => 
      d.curveName.toLowerCase().includes(search) ||
      d.market.toLowerCase().includes(search) ||
      d.location.toLowerCase().includes(search) ||
      d.product?.toLowerCase().includes(search)
    );

    // Sort
    filtered.sort((a, b) => {
      if (sort === 'name') return a.curveName.localeCompare(b.curveName);
      if (sort === 'market') return a.market.localeCompare(b.market);
      if (sort === 'location') return a.location.localeCompare(b.location);
      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
    });

    updateFilterCount();

    if (filtered.length === 0) {
      container.innerHTML = '<div class="text-center text-gray-500 text-sm py-8">No definitions found</div>';
      return;
    }

    container.innerHTML = filtered.map(d => `
      <div class="mb-2 p-3 border rounded-lg cursor-pointer transition-all hover:shadow-md ${selectedDef?.id === d.id ? 'bg-blue-50 border-blue-500 shadow-md' : 'bg-white border-gray-200 hover:border-blue-300'}" data-def-id="${d.id}">
        <div class="font-medium text-gray-900 text-sm">${d.curveName}</div>
        <div class="text-xs text-gray-600 mt-1">${d.market} â€¢ ${d.location}</div>
        <div class="text-xs text-gray-500 mt-1">${d.product || 'N/A'} â€¢ ${d.batteryDuration} â€¢ ${d.granularity}</div>
      </div>
    `).join('');

    container.querySelectorAll('[data-def-id]').forEach(el => {
      el.addEventListener('click', () => {
        const id = el.getAttribute('data-def-id');
        selectDefinition(allDefs.find(d => d.id == id));
      });
    });
  }

  // Select definition
  function selectDefinition(def: any) {
    selectedDef = def;
    selectedInst = null;
    renderDefinitions();
    loadInstances(def.id);
    
    // Enable instance controls
    (document.getElementById('instSearch') as HTMLInputElement).disabled = false;
    (document.getElementById('instSort') as HTMLSelectElement).disabled = false;
    (document.getElementById('addInstBtn') as HTMLButtonElement).disabled = false;
    (document.getElementById('useDefTemplateBtn') as HTMLButtonElement).disabled = false;
    
    // Show detail panel
    showDetailPanel('definition', def);
    
    // Clear data panel
    updateDataPanel();
  }

  // Load instances for selected definition
  async function loadInstances(defId: number) {
    try {
      const res = await fetch(`/api/curves/instances?definitionId=${defId}`);
      const data = await res.json();
      allInsts = data.instances || [];
      renderInstances();
    } catch (e) {
      toast('Failed to load instances', 'error');
      console.error(e);
    }
  }

  // Render instances list
  function renderInstances() {
    const container = document.getElementById('instList')!;
    const search = (document.getElementById('instSearch') as HTMLInputElement).value.toLowerCase();
    const sort = (document.getElementById('instSort') as HTMLSelectElement).value;

    let filtered = allInsts.filter(i =>
      i.instanceVersion.toLowerCase().includes(search) ||
      i.status?.toLowerCase().includes(search) ||
      i.createdBy?.toLowerCase().includes(search)
    );

    // Sort
    filtered.sort((a, b) => {
      if (sort === 'version') return a.instanceVersion.localeCompare(b.instanceVersion);
      if (sort === 'status') return a.status.localeCompare(b.status);
      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
    });

    if (filtered.length === 0) {
      container.innerHTML = '<div class="text-center text-gray-500 text-sm py-8">No instances found</div>';
      return;
    }

    container.innerHTML = filtered.map(i => `
      <div class="mb-2 p-3 border rounded-lg cursor-pointer transition-all hover:shadow-md ${selectedInst?.id === i.id ? 'bg-green-50 border-green-500 shadow-md' : 'bg-white border-gray-200 hover:border-green-300'}" data-inst-id="${i.id}">
        <div class="font-medium text-gray-900 text-sm">${i.instanceVersion}</div>
        <div class="text-xs text-gray-600 mt-1">${i.status} â€¢ ${new Date(i.createdAt).toLocaleDateString()}</div>
        <div class="text-xs text-gray-500 mt-1">By: ${i.createdBy || 'N/A'}</div>
      </div>
    `).join('');

    container.querySelectorAll('[data-inst-id]').forEach(el => {
      el.addEventListener('click', () => {
        const id = el.getAttribute('data-inst-id');
        selectInstance(allInsts.find(i => i.id == id));
      });
    });
  }

  // Select instance
  function selectInstance(inst: any) {
    selectedInst = inst;
    renderInstances();
    
    // Enable instance template button
    (document.getElementById('useInstTemplateBtn') as HTMLButtonElement).disabled = false;
    
    // Show detail panel with both definition and instance
    showDetailPanel('instance', inst);
    
    updateDataPanel();
    loadExistingData(inst.id);
  }

  // Show detail panel with full field information
  function showDetailPanel(type: 'definition' | 'instance', data: any) {
    const panel = document.getElementById('detailPanel')!;
    const title = document.getElementById('detailTitle')!;
    const badge = document.getElementById('detailBadge')!;
    const content = document.getElementById('detailContent')!;

    panel.classList.remove('hidden');

    if (type === 'definition') {
      title.textContent = 'Definition Details';
      badge.textContent = 'Definition';
      badge.className = 'px-2 py-1 text-xs font-medium rounded-full bg-blue-200 text-blue-900';
      
      content.innerHTML = `
        <div><span class="font-medium text-gray-700">ID:</span><div class="text-gray-900">${data.id}</div></div>
        <div><span class="font-medium text-gray-700">Curve Name:</span><div class="text-gray-900">${data.curveName}</div></div>
        <div><span class="font-medium text-gray-700">Market:</span><div class="text-gray-900">${data.market}</div></div>
        <div><span class="font-medium text-gray-700">Location:</span><div class="text-gray-900">${data.location}</div></div>
        <div><span class="font-medium text-gray-700">Product:</span><div class="text-gray-900">${data.product || 'N/A'}</div></div>
        <div><span class="font-medium text-gray-700">Curve Type:</span><div class="text-gray-900">${data.curveType}</div></div>
        <div><span class="font-medium text-gray-700">Battery Duration:</span><div class="text-gray-900">${data.batteryDuration}</div></div>
        <div><span class="font-medium text-gray-700">Granularity:</span><div class="text-gray-900">${data.granularity}</div></div>
        <div><span class="font-medium text-gray-700">Units:</span><div class="text-gray-900">${data.units || 'N/A'}</div></div>
        <div><span class="font-medium text-gray-700">Scenario:</span><div class="text-gray-900">${data.scenario || 'N/A'}</div></div>
        <div><span class="font-medium text-gray-700">Degradation:</span><div class="text-gray-900">${data.degradationType || 'N/A'}</div></div>
        <div><span class="font-medium text-gray-700">Created:</span><div class="text-gray-900">${new Date(data.createdAt).toLocaleString()}</div></div>
      `;
    } else {
      title.textContent = 'Instance Details';
      badge.textContent = 'Instance';
      badge.className = 'px-2 py-1 text-xs font-medium rounded-full bg-green-200 text-green-900';
      
      content.innerHTML = `
        <div class="col-span-2 md:col-span-4 mb-2 pb-2 border-b border-gray-300">
          <div class="font-medium text-sm text-blue-900 mb-1">Definition: ${selectedDef.curveName}</div>
          <div class="text-xs text-gray-600">${selectedDef.market} â€¢ ${selectedDef.location} â€¢ ${selectedDef.granularity}</div>
        </div>
        <div><span class="font-medium text-gray-700">Instance ID:</span><div class="text-gray-900">${data.id}</div></div>
        <div><span class="font-medium text-gray-700">Version:</span><div class="text-gray-900">${data.instanceVersion}</div></div>
        <div><span class="font-medium text-gray-700">Status:</span><div class="text-gray-900"><span class="px-2 py-0.5 rounded-full text-xs ${data.status === 'ACTIVE' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">${data.status}</span></div></div>
        <div><span class="font-medium text-gray-700">Model Type:</span><div class="text-gray-900">${data.modelType || 'N/A'}</div></div>
        <div><span class="font-medium text-gray-700">Delivery Start:</span><div class="text-gray-900">${data.deliveryPeriodStart.split('T')[0]}</div></div>
        <div><span class="font-medium text-gray-700">Delivery End:</span><div class="text-gray-900">${data.deliveryPeriodEnd.split('T')[0]}</div></div>
        <div><span class="font-medium text-gray-700">Created By:</span><div class="text-gray-900">${data.createdBy || 'N/A'}</div></div>
        <div><span class="font-medium text-gray-700">Created At:</span><div class="text-gray-900">${new Date(data.createdAt).toLocaleString()}</div></div>
        <div class="col-span-2 md:col-span-4"><span class="font-medium text-gray-700">Notes:</span><div class="text-gray-900 mt-1">${data.notes || 'No notes'}</div></div>
      `;
    }
  }

  // Update data panel
  function updateDataPanel() {
    const info = document.getElementById('dataInfo')!;
    const content = document.getElementById('dataContent')!;
    const downloadExistingBtn = document.getElementById('downloadExistingDataBtn') as HTMLButtonElement;
    const downloadBtn = document.getElementById('downloadTemplateBtn') as HTMLButtonElement;
    const uploadBtn = document.getElementById('uploadDataBtn') as HTMLButtonElement;

    if (!selectedInst) {
      info.innerHTML = '<div class="text-center text-gray-500 text-sm py-8">Select an instance first</div>';
      content.innerHTML = '';
      downloadExistingBtn.disabled = true;
      downloadBtn.disabled = true;
      uploadBtn.disabled = true;
      return;
    }

    info.innerHTML = `
      <div class="text-sm">
        <div class="font-medium text-gray-900">${selectedDef.curveName}</div>
        <div class="text-gray-600 mt-1">${selectedInst.instanceVersion}</div>
        <div class="text-gray-500 mt-1">Period: ${selectedInst.deliveryPeriodStart.split('T')[0]} to ${selectedInst.deliveryPeriodEnd.split('T')[0]}</div>
      </div>
    `;
    
    content.innerHTML = '<div class="text-center text-gray-500 text-sm py-8">Loading data...</div>';
    downloadExistingBtn.disabled = true; // Will enable if data exists
    downloadBtn.disabled = false;
    uploadBtn.disabled = false;
  }

  // Load existing data
  let currentData: any[] = [];
  
  async function loadExistingData(instId: number) {
    const content = document.getElementById('dataContent')!;
    const downloadExistingBtn = document.getElementById('downloadExistingDataBtn') as HTMLButtonElement;
    
    try {
      const res = await fetch(`/api/curves/${instId}/data`);
      const data = await res.json();
      currentData = data;
      
      if (data.length > 0) {
        // Enable download existing data button
        downloadExistingBtn.disabled = false;
        
        content.innerHTML = `
          <div class="space-y-3">
            <div class="p-4 bg-green-50 border border-green-200 rounded-lg">
              <div class="font-medium text-green-900 mb-2">âœ… Existing Data Found</div>
              <div class="text-sm text-green-800">
                <div><strong>${data.length}</strong> data points</div>
                <div>From: <strong>${data[0].flow_date_start.split('T')[0]}</strong></div>
                <div>To: <strong>${data[data.length-1].flow_date_start.split('T')[0]}</strong></div>
                <div class="mt-2 pt-2 border-t border-green-300">
                  <div>P-Values: ${[data[0].valueP5 ? 'P5' : null, data[0].valueP25 ? 'P25' : null, data[0].valueP50 ? 'P50' : null, data[0].valueP75 ? 'P75' : null, data[0].valueP95 ? 'P95' : null].filter(Boolean).join(', ')}</div>
                </div>
              </div>
            </div>
            <div class="text-sm text-gray-600 p-3 bg-blue-50 rounded-lg">
              <p class="font-medium mb-1">ðŸ’¡ Quick Actions:</p>
              <ul class="list-disc list-inside space-y-1 text-xs">
                <li>Download existing data to edit and re-upload</li>
                <li>Download empty template for new data</li>
                <li>Upload new CSV to replace all existing data</li>
              </ul>
            </div>
          </div>
        `;
      } else {
        downloadExistingBtn.disabled = true;
        currentData = [];
        
        content.innerHTML = `
          <div class="text-center py-8">
            <div class="text-gray-500 mb-4">ðŸ“­ No data uploaded yet</div>
            <p class="text-sm text-gray-600">Download a template or upload your CSV file to get started.</p>
          </div>
        `;
      }
    } catch (e) {
      downloadExistingBtn.disabled = true;
      currentData = [];
      content.innerHTML = '<div class="text-center text-gray-500 text-sm py-8">No data available</div>';
    }
  }

  // Modal handlers
  document.getElementById('addDefBtn')?.addEventListener('click', () => {
    document.getElementById('defModalTitle')!.textContent = 'Add Curve Definition';
    clearDefForm();
    document.getElementById('defModal')!.classList.remove('hidden');
  });

  document.getElementById('useDefTemplateBtn')?.addEventListener('click', () => {
    if (!selectedDef) return;
    document.getElementById('defModalTitle')!.textContent = 'Create Definition from Template';
    fillDefForm(selectedDef);
    // Append " (Copy)" to curve name
    (document.getElementById('defCurveName') as HTMLInputElement).value += ' (Copy)';
    document.getElementById('defModal')!.classList.remove('hidden');
  });

  document.getElementById('closeDefModal')?.addEventListener('click', () => {
    document.getElementById('defModal')!.classList.add('hidden');
  });

  document.getElementById('cancelDefModal')?.addEventListener('click', () => {
    document.getElementById('defModal')!.classList.add('hidden');
  });

  document.getElementById('saveDefModal')?.addEventListener('click', async () => {
    const data = {
      curveName: (document.getElementById('defCurveName') as HTMLInputElement).value,
      market: (document.getElementById('defMarket') as HTMLSelectElement).value,
      location: (document.getElementById('defLocation') as HTMLInputElement).value,
      // product, commodity, curveType, scenario, degradationType, granularity removed - now on instance
      batteryDuration: (document.getElementById('defBatteryDuration') as HTMLSelectElement).value,
      units: (document.getElementById('defUnits') as HTMLSelectElement).value,
      timezone: (document.getElementById('defTimezone') as HTMLInputElement)?.value || 'UTC',
      description: (document.getElementById('defDescription') as HTMLTextAreaElement)?.value
    };

    try {
      console.log('Creating definition with data:', data);
      const res = await fetch('/api/curve-upload/create-definition', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      const result = await res.json();
      console.log('Server response:', result);
      
      if (!res.ok) {
        console.error('Error details:', result.details, result.stack);
        throw new Error(result.details || result.error || 'Unknown error');
      }
      
      toast('Definition created successfully');
      document.getElementById('defModal')!.classList.add('hidden');
      await loadDefinitions();
      selectDefinition(result.curveDefinition);
    } catch (e: any) {
      console.error('Create definition error:', e);
      toast(e.message || 'Failed to create definition', 'error');
    }
  });

  document.getElementById('addInstBtn')?.addEventListener('click', () => {
    document.getElementById('instModalTitle')!.textContent = 'Add Curve Instance';
    clearInstForm();
    document.getElementById('instModal')!.classList.remove('hidden');
  });

  document.getElementById('useInstTemplateBtn')?.addEventListener('click', () => {
    if (!selectedInst) return;
    document.getElementById('instModalTitle')!.textContent = 'Create Instance from Template';
    fillInstForm(selectedInst);
    // Append " (Copy)" to version
    (document.getElementById('instVersion') as HTMLInputElement).value += ' (Copy)';
    document.getElementById('instModal')!.classList.remove('hidden');
  });

  document.getElementById('closeInstModal')?.addEventListener('click', () => {
    document.getElementById('instModal')!.classList.add('hidden');
  });

  document.getElementById('cancelInstModal')?.addEventListener('click', () => {
    document.getElementById('instModal')!.classList.add('hidden');
  });

  document.getElementById('saveInstModal')?.addEventListener('click', async () => {
    const data = {
      curveDefinitionId: selectedDef.id,
      instanceVersion: (document.getElementById('instVersion') as HTMLInputElement).value,
      deliveryPeriodStart: (document.getElementById('instStartDate') as HTMLInputElement).value,
      deliveryPeriodEnd: (document.getElementById('instEndDate') as HTMLInputElement).value,
      modelType: (document.getElementById('instModelType') as HTMLInputElement).value,
      createdBy: (document.getElementById('instCreatedBy') as HTMLInputElement).value,
      notes: (document.getElementById('instNotes') as HTMLTextAreaElement).value,
      // NEW: Fields moved from definition to instance
      curveType: (document.getElementById('instCurveType') as HTMLSelectElement).value,
      commodity: (document.getElementById('instCommodity') as HTMLSelectElement).value,
      granularity: (document.getElementById('instGranularity') as HTMLSelectElement).value,
      scenario: (document.getElementById('instScenario') as HTMLSelectElement)?.value || 'BASE',
      degradationType: (document.getElementById('instDegradationType') as HTMLSelectElement)?.value || 'NONE'
    };

    try {
      const res = await fetch('/api/curve-upload/create-instance', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      const result = await res.json();
      if (!res.ok) throw new Error(result.error);
      
      toast('Instance created successfully');
      document.getElementById('instModal')!.classList.add('hidden');
      await loadInstances(selectedDef.id);
      selectInstance(result.curveInstance);
    } catch (e: any) {
      toast(e.message || 'Failed to create instance', 'error');
    }
  });

  // Upload data modal
  document.getElementById('uploadDataBtn')?.addEventListener('click', () => {
    document.getElementById('uploadModal')!.classList.remove('hidden');
  });

  document.getElementById('closeUploadModal')?.addEventListener('click', () => {
    document.getElementById('uploadModal')!.classList.add('hidden');
  });

  document.getElementById('cancelUploadModal')?.addEventListener('click', () => {
    document.getElementById('uploadModal')!.classList.add('hidden');
  });

  document.getElementById('csvFileInput')?.addEventListener('change', (e: any) => {
    const file = e.target.files[0];
    if (!file) {
      csvData = [];
      document.getElementById('csvPreview')!.classList.add('hidden');
      (document.getElementById('confirmUploadModal') as HTMLButtonElement).disabled = true;
      return;
    }

    const reader = new FileReader();
    reader.onload = (e: any) => {
      try {
        csvData = parseCSV(e.target.result);
        showCSVPreview(csvData);
        (document.getElementById('confirmUploadModal') as HTMLButtonElement).disabled = false;
      } catch (err: any) {
        toast(err.message, 'error');
        csvData = [];
        (document.getElementById('confirmUploadModal') as HTMLButtonElement).disabled = true;
      }
    };
    reader.readAsText(file);
  });

  document.getElementById('confirmUploadModal')?.addEventListener('click', async () => {
    const btn = document.getElementById('confirmUploadModal') as HTMLButtonElement;
    const originalText = btn.textContent;
    btn.disabled = true;
    btn.textContent = 'Uploading...';
    
    try {
      const res = await fetch('/api/curve-upload/upload-data', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ curveInstanceId: selectedInst.id, priceData: csvData })
      });
      const result = await res.json();
      if (!res.ok) throw new Error(result.error || result.details);
      
      toast(`Successfully uploaded ${result.recordsCreated} data points`);
      document.getElementById('uploadModal')!.classList.add('hidden');
      
      // Reset the modal
      (document.getElementById('csvFileInput') as HTMLInputElement).value = '';
      document.getElementById('csvPreview')!.classList.add('hidden');
      csvData = [];
      
      // Reload data in Column 3
      loadExistingData(selectedInst.id);
    } catch (e: any) {
      toast(e.message || 'Upload failed', 'error');
    } finally {
      btn.disabled = false;
      btn.textContent = originalText;
    }
  });

  // Template generator
  document.getElementById('downloadTemplateBtn')?.addEventListener('click', () => {
    const start = selectedInst.deliveryPeriodStart.split('T')[0];
    const end = selectedInst.deliveryPeriodEnd.split('T')[0];
    (document.getElementById('templateStart') as HTMLInputElement).value = start;
    (document.getElementById('templateEnd') as HTMLInputElement).value = end;
    document.getElementById('templateModal')!.classList.remove('hidden');
  });

  document.getElementById('closeTemplateModal')?.addEventListener('click', () => {
    document.getElementById('templateModal')!.classList.add('hidden');
  });

  document.getElementById('cancelTemplateModal')?.addEventListener('click', () => {
    document.getElementById('templateModal')!.classList.add('hidden');
  });

  document.getElementById('generateTemplateBtn')?.addEventListener('click', () => {
    const start = (document.getElementById('templateStart') as HTMLInputElement).value;
    const end = (document.getElementById('templateEnd') as HTMLInputElement).value;
    const gran = selectedDef.granularity;
    const units = selectedDef.units || '$/MWh';
    const pvals = [5, 25, 50, 75, 95].filter(p => (document.getElementById(`p${p}`) as HTMLInputElement).checked);

    const timestamps = generateTimestamps(start, end, gran);
    const rows = [];
    for (const ts of timestamps) {
      for (const pv of pvals) {
        rows.push(`${ts},,${pv},${units}`);
      }
    }
    const csv = ['timestamp,value,pvalue,units', ...rows].join('\n');
    downloadCSV(csv, `template_${selectedDef.curveName}_${start}_to_${end}.csv`);
    
    document.getElementById('templateModal')!.classList.add('hidden');
    toast('Template downloaded');
  });

  // Search & sort handlers
  document.getElementById('defSearch')?.addEventListener('input', renderDefinitions);
  document.getElementById('defSort')?.addEventListener('change', renderDefinitions);
  document.getElementById('instSearch')?.addEventListener('input', renderInstances);
  document.getElementById('instSort')?.addEventListener('change', renderInstances);

  // Helper functions
  function clearDefForm() {
    ['defCurveName', 'defMarket', 'defLocation', 'defBatteryDuration', 'defUnits', 'defTimezone', 'defDescription'].forEach(id => {
      const el = document.getElementById(id) as any;
      if (el) el.value = id === 'defUnits' ? '$/MWh' : (id === 'defBatteryDuration' ? 'UNKNOWN' : (id === 'defTimezone' ? 'UTC' : ''));
    });
  }

  function fillDefForm(def: any) {
    (document.getElementById('defCurveName') as HTMLInputElement).value = def.curveName;
    (document.getElementById('defMarket') as HTMLSelectElement).value = def.market;
    (document.getElementById('defLocation') as HTMLInputElement).value = def.location;
    (document.getElementById('defBatteryDuration') as HTMLSelectElement).value = def.batteryDuration || 'UNKNOWN';
    (document.getElementById('defUnits') as HTMLSelectElement).value = def.units || '$/MWh';
    (document.getElementById('defTimezone') as HTMLInputElement).value = def.timezone || 'UTC';
    (document.getElementById('defDescription') as HTMLTextAreaElement).value = def.description || '';
  }

  function clearInstForm() {
    ['instVersion', 'instCurveType', 'instCommodity', 'instGranularity', 'instScenario', 'instDegradationType', 'instStartDate', 'instEndDate', 'instModelType', 'instCreatedBy', 'instNotes'].forEach(id => {
      const el = document.getElementById(id) as any;
      if (el) {
        if (id === 'instCreatedBy') el.value = 'Upload System';
        else if (id === 'instGranularity') el.value = 'MONTHLY';
        else if (id === 'instScenario') el.value = 'BASE';
        else if (id === 'instDegradationType') el.value = 'NONE';
        else el.value = '';
      }
    });
  }

  function fillInstForm(inst: any) {
    (document.getElementById('instVersion') as HTMLInputElement).value = inst.instanceVersion;
    (document.getElementById('instCurveType') as HTMLSelectElement).value = inst.curveType || '';
    (document.getElementById('instCommodity') as HTMLSelectElement).value = inst.commodity || '';
    (document.getElementById('instGranularity') as HTMLSelectElement).value = inst.granularity || 'MONTHLY';
    (document.getElementById('instScenario') as HTMLSelectElement).value = inst.scenario || 'BASE';
    (document.getElementById('instDegradationType') as HTMLSelectElement).value = inst.degradationType || 'NONE';
    (document.getElementById('instStartDate') as HTMLInputElement).value = inst.deliveryPeriodStart.split('T')[0];
    (document.getElementById('instEndDate') as HTMLInputElement).value = inst.deliveryPeriodEnd.split('T')[0];
    (document.getElementById('instModelType') as HTMLInputElement).value = inst.modelType || '';
    (document.getElementById('instCreatedBy') as HTMLInputElement).value = inst.createdBy || 'Upload System';
    (document.getElementById('instNotes') as HTMLTextAreaElement).value = inst.notes || '';
  }

  function parseCSV(text: string): any[] {
    const lines = text.trim().split('\n');
    const headers = lines[0].split(',').map(h => h.trim());
    const data = [];
    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(',').map(v => v.trim());
      const row: any = {};
      headers.forEach((h, idx) => row[h] = values[idx]);
      data.push(row);
    }
    return data;
  }

  function showCSVPreview(data: any[]) {
    const preview = document.getElementById('csvPreview')!;
    const content = document.getElementById('csvPreviewContent')!;
    const stats = document.getElementById('csvStats')!;
    
    const sample = data.slice(0, 10);
    const headers = Object.keys(sample[0]);
    
    content.innerHTML = `
      <div class="mb-3 p-3 bg-blue-50 border border-blue-200 rounded-md">
        <div class="flex items-center justify-between">
          <div class="text-sm font-medium text-blue-900">ðŸ“Š Data Preview</div>
          <div class="text-xs text-blue-700">Showing first 10 of ${data.length} rows</div>
        </div>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full text-xs border-collapse">
          <thead class="bg-gray-100 sticky top-0">
            <tr>
              ${headers.map(k => `<th class="px-3 py-2 text-left font-medium text-gray-700 border-b-2 border-gray-300">${k}</th>`).join('')}
            </tr>
          </thead>
          <tbody>
            ${sample.map((row, idx) => `
              <tr class="${idx % 2 === 0 ? 'bg-white' : 'bg-gray-50'} hover:bg-blue-50">
                ${Object.values(row).map((v: any) => `<td class="px-3 py-2 border-b border-gray-200 text-gray-900">${v || '<span class="text-gray-400">empty</span>'}</td>`).join('')}
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
    
    // Show summary stats
    const pvalues = new Set(data.map(r => r.pvalue).filter(Boolean));
    const timestamps = data.map(r => r.timestamp).filter(Boolean);
    const dateRange = timestamps.length > 0 ? 
      `${timestamps[0].split('T')[0]} to ${timestamps[timestamps.length-1].split('T')[0]}` : 
      'N/A';
    
    stats.innerHTML = `
      <div class="grid grid-cols-3 gap-4 text-sm">
        <div><span class="font-medium">Total Rows:</span> ${data.length}</div>
        <div><span class="font-medium">P-Values:</span> ${pvalues.size > 0 ? Array.from(pvalues).join(', ') : 'N/A'}</div>
        <div><span class="font-medium">Date Range:</span> ${dateRange}</div>
      </div>
    `;
    
    preview.classList.remove('hidden');
  }

  function generateTimestamps(start: string, end: string, gran: string): string[] {
    const result: string[] = [];
    let curr = new Date(start + 'T00:00:00Z');
    const endDate = new Date(end + 'T00:00:00Z');
    
    while (curr <= endDate) {
      result.push(curr.toISOString());
      if (gran === 'HOURLY') curr = new Date(curr.getTime() + 3600000);
      else if (gran === 'DAILY') curr = new Date(Date.UTC(curr.getUTCFullYear(), curr.getUTCMonth(), curr.getUTCDate() + 1));
      else if (gran === 'MONTHLY') curr = new Date(Date.UTC(curr.getUTCFullYear(), curr.getUTCMonth() + 1, 1));
      else if (gran === 'QUARTERLY') curr = new Date(Date.UTC(curr.getUTCFullYear(), curr.getUTCMonth() + 3, 1));
      else if (gran === 'ANNUAL') curr = new Date(Date.UTC(curr.getUTCFullYear() + 1, 0, 1));
      else break;
    }
    return result;
  }

  function downloadCSV(content: string, filename: string) {
    const blob = new Blob([content], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
  }

  // Global filter handlers
  document.getElementById('globalMarket')?.addEventListener('change', () => {
    renderDefinitions();
    if (selectedDef) renderInstances();
  });
  document.getElementById('globalLocation')?.addEventListener('input', () => {
    renderDefinitions();
    if (selectedDef) renderInstances();
  });
  document.getElementById('globalProduct')?.addEventListener('input', () => {
    renderDefinitions();
    if (selectedDef) renderInstances();
  });
  document.getElementById('globalCurveType')?.addEventListener('change', () => {
    renderDefinitions();
    if (selectedDef) renderInstances();
  });
  document.getElementById('globalGranularity')?.addEventListener('change', () => {
    renderDefinitions();
    if (selectedDef) renderInstances();
  });

  document.getElementById('clearFilters')?.addEventListener('click', () => {
    (document.getElementById('globalMarket') as HTMLSelectElement).value = '';
    (document.getElementById('globalLocation') as HTMLInputElement).value = '';
    (document.getElementById('globalProduct') as HTMLInputElement).value = '';
    (document.getElementById('globalCurveType') as HTMLSelectElement).value = '';
    (document.getElementById('globalGranularity') as HTMLSelectElement).value = '';
    renderDefinitions();
    if (selectedDef) renderInstances();
  });

  document.getElementById('closeDetail')?.addEventListener('click', () => {
    document.getElementById('detailPanel')!.classList.add('hidden');
  });

  // Download existing data as CSV
  document.getElementById('downloadExistingDataBtn')?.addEventListener('click', () => {
    if (currentData.length === 0) {
      toast('No data to download', 'error');
      return;
    }

    const units = selectedDef.units || '$/MWh';
    const rows = [];
    
    // Create rows for each timestamp with all available p-values
    for (const point of currentData) {
      const timestamp = point.flow_date_start;
      
      // Add row for each p-value that exists
      if (point.valueP5 !== null) rows.push(`${timestamp},${point.valueP5},5,${units}`);
      if (point.valueP25 !== null) rows.push(`${timestamp},${point.valueP25},25,${units}`);
      if (point.valueP50 !== null) rows.push(`${timestamp},${point.valueP50},50,${units}`);
      if (point.valueP75 !== null) rows.push(`${timestamp},${point.valueP75},75,${units}`);
      if (point.valueP95 !== null) rows.push(`${timestamp},${point.valueP95},95,${units}`);
    }

    const csv = ['timestamp,value,pvalue,units', ...rows].join('\n');
    const filename = `${selectedDef.curveName}_${selectedInst.instanceVersion}_data.csv`;
    downloadCSV(csv, filename);
    toast('Existing data downloaded - edit and re-upload!');
  });

  // Initialize autocomplete for form fields
  async function initAutocomplete() {
    try {
      const { initializeAutocompleteFields } = await import('../../lib/autocomplete-fields');
      await initializeAutocompleteFields(document.body);
      console.log('âœ“ Autocomplete fields initialized with database values');
    } catch (e) {
      console.error('Failed to initialize autocomplete:', e);
    }
  }

  // Initialize
  loadDefinitions();
  initAutocomplete();
</script>
</Layout>


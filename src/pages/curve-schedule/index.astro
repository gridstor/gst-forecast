---
import Layout from '../../layouts/Layout.astro';
import { prisma } from '../../lib/prisma';

// Get the current month's start and end dates (with URL param support)
const urlParams = new URL(Astro.request.url).searchParams;
const yearParam = urlParams.get('year');
const monthParam = urlParams.get('month');

const today = new Date();
const currentYear = yearParam ? parseInt(yearParam) : today.getFullYear();
const currentMonth = monthParam ? parseInt(monthParam) - 1 : today.getMonth();

const displayDate = new Date(currentYear, currentMonth, 1);
const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);

// Fetch all curve schedules with their definitions for the calendar
let schedules: any[] = [];
let schedulesByDate: Record<string, any[]> = {};
try {
  schedules = await prisma.curveSchedule.findMany({
    where: {
      isActive: true
    },
    select: {
      id: true,
      importance: true,
      frequency: true,
      curveDefinition: {
        select: {
          curveName: true,
          location: true,
          market: true
        }
      },
      scheduleRuns: {
        where: {
          runDate: {
            gte: firstDayOfMonth,
            lte: lastDayOfMonth
          }
        },
        select: {
          runDate: true,
          status: true
        },
        orderBy: {
          runDate: 'asc'
        }
      }
    }
  });

  // Group schedules by their run dates
  schedules.forEach((schedule: any) => {
    schedule.scheduleRuns.forEach((run: any) => {
      const dateKey = run.runDate.toISOString().split('T')[0];
      if (!schedulesByDate[dateKey]) {
        schedulesByDate[dateKey] = [];
      }
      schedulesByDate[dateKey].push({
        id: schedule.id,
        name: schedule.curveDefinition.curveName,
        location: schedule.curveDefinition.location,
        market: schedule.curveDefinition.market,
        importance: schedule.importance,
        status: run.status
      });
    });
  });
} catch (error) {
  console.error('Error fetching curve schedule:', error);
}

// Get all dates in the current month
const datesInMonth = Array.from(
  { length: lastDayOfMonth.getDate() },
  (_, i) => new Date(currentYear, currentMonth, i + 1)
);

// Get the day of week for the first day (0 = Sunday)
const firstDayOfWeek = firstDayOfMonth.getDay();

// Add empty cells for days before the first day of the month
const calendarDays = Array(firstDayOfWeek).fill(null).concat(datesInMonth);

// Function to get the importance class
function getImportanceClass(importance: number): string {
  switch (importance) {
    case 1: return 'bg-red-100 border-red-200';
    case 2: return 'bg-orange-100 border-orange-200';
    case 3: return 'bg-yellow-100 border-yellow-200';
    default: return 'bg-gray-100 border-gray-200';
  }
}

// Function to get status badge color
function getStatusClass(status: string): string {
  switch (status) {
    case 'COMPLETED': return 'bg-green-100 text-green-800';
    case 'PENDING': return 'bg-yellow-100 text-yellow-800';
    case 'FAILED': return 'bg-red-100 text-red-800';
    default: return 'bg-gray-100 text-gray-800';
  }
}
---

<Layout title="Curve Schedule Management">
  <div class="container mx-auto px-4 py-8 max-w-6xl">
    
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">üìÖ Curve Schedule Management</h1>
          <p class="text-gray-600">View schedules, add notes, and create new delivery commitments all in one place.</p>
        </div>
        <div class="flex gap-3">
          <a href="/revenue-forecasts/admin" class="inline-flex items-center px-3 py-2 bg-gray-100 text-gray-700 text-sm rounded-md hover:bg-gray-200 transition-colors">
            ‚Üê Back to Admin
          </a>
        </div>
      </div>
      
      <!-- Quick Actions -->
      <div class="mt-4 flex gap-4">
        <a href="/admin/docs" class="inline-flex items-center px-3 py-1.5 bg-blue-100 text-blue-700 text-sm rounded-md hover:bg-blue-200 transition-colors">
          üìö View Documentation
        </a>
        <a href="/admin/upload" class="inline-flex items-center px-3 py-1.5 bg-green-100 text-green-700 text-sm rounded-md hover:bg-green-200 transition-colors">
          üì§ Upload Data Now
        </a>
      </div>
    </div>

    <!-- Simplified Workflow Overview -->
    <div class="bg-gradient-to-r from-orange-50 to-yellow-50 rounded-lg p-6 mb-8 border border-orange-200">
      <h2 class="text-xl font-bold text-gray-900 mb-4 text-center">‚ö° Quick Start: Curve Delivery Workflow</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <!-- Step 1 -->
        <div class="bg-white rounded-lg p-4 shadow-sm border-l-4 border-blue-500">
          <div class="flex items-center mb-3">
            <div class="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold mr-3">1</div>
            <h3 class="font-bold text-blue-700">Define What You Need</h3>
          </div>
          <p class="text-sm text-gray-700">
            Create a <strong>curve definition</strong> specifying market, location, and product type. This describes WHAT kind of data you need.
          </p>
        </div>
        
        <!-- Step 2 -->
        <div class="bg-white rounded-lg p-4 shadow-sm border-l-4 border-orange-500">
          <div class="flex items-center mb-3">
            <div class="w-8 h-8 bg-orange-500 text-white rounded-full flex items-center justify-center font-bold mr-3">2</div>
            <h3 class="font-bold text-orange-700">Set Delivery Date</h3>
          </div>
          <p class="text-sm text-gray-700">
            Create a <strong>curve instance</strong> with WHO is providing it, WHEN it's due, and associate a delivery date to put it on the calendar.
          </p>
        </div>
        
        <!-- Step 3 -->
        <div class="bg-white rounded-lg p-4 shadow-sm border-l-4 border-green-500">
          <div class="flex items-center mb-3">
            <div class="w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center font-bold mr-3">3</div>
            <h3 class="font-bold text-green-700">Upload Data Later</h3>
          </div>
          <p class="text-sm text-gray-700">
            When data is ready, upload CSV files to fulfill the delivery commitment.
          </p>
        </div>
      </div>
    </div>
    
    <!-- Key Concept - Moved outside workflow boxes for better visibility -->
    <div class="max-w-4xl mx-auto mt-6">
      <div class="bg-white rounded-lg p-4 border border-gray-200 shadow-sm">
        <div class="flex items-start space-x-3">
          <div class="text-2xl">üí°</div>
          <div>
            <h4 class="font-bold text-gray-800 mb-2">Key Concept: Create Commitments Before Data</h4>
            <p class="text-sm text-gray-700">
              This workflow lets you create delivery requests and track deadlines <strong>before</strong> you have the actual forecast data. 
              Perfect for managing vendor deliverables and internal forecasting schedules.
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- SECTION: EXISTING SCHEDULES -->
    <section class="mb-8">
      <div class="mb-4">
        <h2 class="text-2xl font-bold text-[#2A2A2A] mb-2" style="letter-spacing: -0.01em;">Existing Schedules</h2>
        <p class="text-base text-[#6B7280]">View and manage all active curve schedules</p>
      </div>

      <div class="bg-white rounded-lg shadow-md overflow-hidden" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-[#E5E7EB]">
            <thead class="bg-[#F9FAFB]">
              <tr>
                <th class="px-4 py-3 text-left text-xs font-medium text-[#6B7280] uppercase tracking-wider">Curve Name</th>
                <th class="px-4 py-3 text-left text-xs font-medium text-[#6B7280] uppercase tracking-wider">Location</th>
                <th class="px-4 py-3 text-left text-xs font-medium text-[#6B7280] uppercase tracking-wider">Market</th>
                <th class="px-4 py-3 text-left text-xs font-medium text-[#6B7280] uppercase tracking-wider">Frequency</th>
                <th class="px-4 py-3 text-left text-xs font-medium text-[#6B7280] uppercase tracking-wider">Priority</th>
                <th class="px-4 py-3 text-left text-xs font-medium text-[#6B7280] uppercase tracking-wider">Status</th>
                <th class="px-4 py-3 text-left text-xs font-medium text-[#6B7280] uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-[#E5E7EB]">
              {schedules.length === 0 ? (
                <tr>
                  <td colspan="7" class="px-4 py-8 text-center text-[#6B7280]">
                    No schedules found. Create your first schedule below.
                  </td>
                </tr>
              ) : (
                schedules.map((schedule: any) => (
                  <tr class="hover:bg-[#F9FAFB] transition-colors">
                    <td class="px-4 py-3 text-sm text-[#111827] font-medium">{schedule.curveDefinition.curveName}</td>
                    <td class="px-4 py-3 text-sm text-[#6B7280]">{schedule.curveDefinition.location}</td>
                    <td class="px-4 py-3 text-sm text-[#6B7280]">{schedule.curveDefinition.market}</td>
                    <td class="px-4 py-3 text-sm text-[#6B7280]">{schedule.frequency}</td>
                    <td class="px-4 py-3">
                      <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        schedule.importance === 1 ? 'bg-red-100 text-red-800' :
                        schedule.importance === 2 ? 'bg-orange-100 text-orange-800' :
                        'bg-yellow-100 text-yellow-800'
                      }`}>
                        {schedule.importance === 1 ? 'High' : schedule.importance === 2 ? 'Medium' : 'Low'}
                      </span>
                    </td>
                    <td class="px-4 py-3">
                      <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        schedule.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                      }`}>
                        {schedule.isActive ? 'Active' : 'Inactive'}
                      </span>
                    </td>
                    <td class="px-4 py-3 text-sm">
                      <a href={`/curve-schedule/${schedule.id}/edit`} class="text-[#3B82F6] hover:text-[#2563EB] font-medium">
                        Edit
                      </a>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </section>

    <!-- SECTION: CURVE SCHEDULE CALENDAR -->
    <section class="mb-8">
      <div class="bg-white rounded-lg shadow-md overflow-hidden accent-border-purple" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div class="p-6 border-b border-[#E5E7EB]">
          <div class="flex justify-between items-center">
            <div class="flex items-center gap-4">
              <button 
                id="prevMonth" 
                class="p-2 hover:bg-[#F3F4F6] rounded-md transition-colors"
                title="Previous Month"
                type="button"
              >
                <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                </svg>
              </button>
              <h3 id="currentMonth" class="text-lg font-semibold text-[#1F2937] min-w-[180px] text-center">
                {displayDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
              </h3>
              <button 
                id="nextMonth" 
                class="p-2 hover:bg-[#F3F4F6] rounded-md transition-colors"
                title="Next Month"
                type="button"
              >
                <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                </svg>
              </button>
            </div>
            <div class="text-sm text-[#6B7280]">
              Click any day's <span class="text-[#8B5CF6]">+</span> to add notes
            </div>
          </div>
        </div>

        <div class="grid grid-cols-7 gap-px bg-[#E5E7EB] border-b border-[#E5E7EB]">
          {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => (
            <div class="bg-[#F9FAFB] p-3 text-center text-sm font-medium text-[#6B7280]">
              {day}
            </div>
          ))}
        </div>

        <div id="calendarGrid" class="grid grid-cols-7 gap-px bg-[#E5E7EB]">
          {calendarDays.map((date) => (
            <div 
              class={`bg-white min-h-[120px] p-2 ${
                date && date.toISOString().split('T')[0] === today.toISOString().split('T')[0]
                  ? 'ring-2 ring-inset ring-[#3B82F6] bg-[#EFF6FF]'
                  : ''
              }`}
              data-date={date ? date.toISOString().split('T')[0] : ''}
            >
              {date && (
                <div>
                  <div class="flex items-center justify-between mb-2">
                    <div class="font-medium text-sm text-[#111827]">
                      {date.getDate()}
                    </div>
                    <button 
                      class="add-note-btn p-0.5 hover:bg-[#E5E7EB] rounded transition-colors group"
                      data-date={date.toISOString().split('T')[0]}
                      title="Add note"
                      type="button"
                      onclick="event.stopPropagation(); openNoteModal(this.dataset.date);"
                    >
                      <svg class="w-3.5 h-3.5 text-[#8B5CF6] group-hover:text-[#7C3AED]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                      </svg>
                    </button>
                  </div>
                  
                  <!-- Notes container -->
                  <div class="notes-container space-y-1 mb-1" data-date={date.toISOString().split('T')[0]}>
                  </div>
                  
                  <!-- Schedules -->
                  <div class="space-y-1">
                    {(schedulesByDate[date.toISOString().split('T')[0]] || []).map((schedule: any) => (
                      <div
                        class={`block text-xs p-1.5 rounded border ${getImportanceClass(schedule.importance)} hover:opacity-75 transition-opacity`}
                      >
                        <div class="flex items-center gap-1">
                          <span class="text-xs">üìÖ</span>
                          <div class="font-medium truncate flex-1" title={`${schedule.name} - ${schedule.location}`}>
                            {schedule.name}
                          </div>
                        </div>
                        <div class="flex items-center justify-between mt-0.5">
                          <span class="text-[0.65rem] text-gray-600 truncate">{schedule.location}</span>
                          <span class={`text-[0.6rem] px-1 py-0.5 rounded ${getStatusClass(schedule.status)}`}>
                            {schedule.status}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        <!-- Calendar Legend -->
        <div class="p-4 bg-[#F9FAFB] border-t border-[#E5E7EB]">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-4">
              <h4 class="text-sm font-medium text-[#6B7280]">Priority Levels:</h4>
              <div class="flex items-center gap-2">
                <div class="w-3 h-3 rounded bg-red-100 border border-red-200"></div>
                <span class="text-xs text-[#6B7280]">High</span>
              </div>
              <div class="flex items-center gap-2">
                <div class="w-3 h-3 rounded bg-orange-100 border border-orange-200"></div>
                <span class="text-xs text-[#6B7280]">Medium</span>
              </div>
              <div class="flex items-center gap-2">
                <div class="w-3 h-3 rounded bg-yellow-100 border border-yellow-200"></div>
                <span class="text-xs text-[#6B7280]">Low</span>
              </div>
            </div>
            <p class="text-xs text-[#6B7280]">View existing schedules and add notes for planning</p>
          </div>
        </div>
      </div>
    </section>

    <!-- CREATE NEW SCHEDULE SECTION -->
    <div class="mb-6">
      <h2 class="text-2xl font-bold text-[#2A2A2A] mb-2" style="letter-spacing: -0.01em;">Create New Schedule</h2>
      <p class="text-base text-[#6B7280]">Follow the steps below to create a new curve delivery commitment</p>
    </div>

    <!-- Multi-Step Form -->
    <form id="deliveryRequestForm" class="space-y-8">
      
      <!-- STEP 1: Curve Definition Selection -->
      <div id="step1" class="bg-white rounded-lg shadow-md p-6 border-l-4 border-blue-500">
        <div class="flex items-center mb-4">
          <span class="text-2xl mr-3">üèóÔ∏è</span>
          <h2 class="text-xl font-bold text-gray-900">Step 1: Curve Definition</h2>
          <div class="ml-auto">
            <span class="text-sm text-gray-500" id="step1-status">Required</span>
          </div>
        </div>
        
        <p class="text-gray-600 mb-6">Select an existing curve definition or create a new one</p>
        
        <!-- Definition Selection -->
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2">Curve Definition *</label>
          <select id="definitionOption" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
            <option value="">Select a curve definition...</option>
            <option value="new">+ Create New Definition</option>
          </select>
        </div>
        
        <!-- New Definition Form (Hidden by default) -->
        <div id="newDefinitionForm" class="hidden bg-gray-50 rounded-lg p-4 border border-gray-200">
          <h3 class="font-medium text-gray-900 mb-4">Create New Curve Definition</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <!-- Curve Name -->
            <div class="md:col-span-2">
              <label class="block text-sm font-medium text-gray-700">Curve Name *</label>
              <input
                type="text"
                id="curveName"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="e.g., Channel_View_Revenue_4H_ANNUAL"
              />
            </div>
            
            <!-- Market -->
            <div>
              <label class="block text-sm font-medium text-gray-700">Market *</label>
              <select id="market" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                <option value="">Select Market</option>
                <option value="CAISO">CAISO</option>
                <option value="ERCOT">ERCOT</option>
                <option value="PJM">PJM</option>
                <option value="NYISO">NYISO</option>
                <option value="ISO-NE">ISO-NE</option>
                <option value="MISO">MISO</option>
              </select>
            </div>
            
            <!-- Location -->
            <div>
              <label class="block text-sm font-medium text-gray-700">Location *</label>
              <select id="location" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                <option value="">Select Location</option>
                <option value="Channel View">Channel View</option>
                <option value="NP15">NP15</option>
                <option value="SP15">SP15</option>
                <option value="ZP26">ZP26</option>
                <option value="Houston">Houston</option>
                <option value="North">North</option>
                <option value="West">West</option>
                <option value="MASS">MASS Hub</option>
              </select>
            </div>
            
            <!-- Product -->
            <div>
              <label class="block text-sm font-medium text-gray-700">Product *</label>
              <input
                type="text"
                id="product"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="e.g., Energy, AS, Total"
              />
            </div>
            
            <!-- Curve Type -->
            <div>
              <label class="block text-sm font-medium text-gray-700">Curve Type *</label>
              <select id="curveType" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                <option value="">Select Type</option>
                <option value="ENERGY">Energy</option>
                <option value="REVENUE">Revenue</option>
                <option value="TB4">TB4</option>
                <option value="ENERGY_ARB">Energy Arbitrage</option>
                <option value="AS">Ancillary Services</option>
                <option value="TOTAL">Total</option>
              </select>
            </div>
            
            <!-- Battery Duration -->
            <div>
              <label class="block text-sm font-medium text-gray-700">Battery Duration</label>
              <select id="batteryDuration" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                <option value="UNKNOWN">Unknown</option>
                <option value="HOUR_1">1 Hour</option>
                <option value="HOUR_2">2 Hours</option>
                <option value="HOUR_4">4 Hours</option>
                <option value="HOUR_6">6 Hours</option>
                <option value="HOUR_8">8 Hours</option>
              </select>
            </div>
            
            <!-- Granularity -->
            <div>
              <label class="block text-sm font-medium text-gray-700">Granularity *</label>
              <select id="granularity" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                <option value="">Select Granularity</option>
                <option value="HOURLY">Hourly</option>
                <option value="DAILY">Daily</option>
                <option value="MONTHLY">Monthly</option>
                <option value="QUARTERLY">Quarterly</option>
                <option value="ANNUAL">Annual</option>
              </select>
            </div>
            
            <!-- Scenario -->
            <div>
              <label class="block text-sm font-medium text-gray-700">Scenario</label>
              <select id="scenario" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                <option value="BASE">Base Case</option>
                <option value="BULL">Bull Case</option>
                <option value="BEAR">Bear Case</option>
                <option value="P95">P95</option>
                <option value="P50">P50</option>
                <option value="P5">P5</option>
              </select>
            </div>
            
            <!-- Degradation Type -->
            <div>
              <label class="block text-sm font-medium text-gray-700">Degradation Type</label>
              <select id="degradationType" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                <option value="NONE">None</option>
                <option value="LINEAR">Linear</option>
                <option value="DATE">Date-based</option>
                <option value="PERCENTAGE">Percentage</option>
              </select>
            </div>
            
            <!-- Description -->
            <div class="md:col-span-2">
              <label class="block text-sm font-medium text-gray-700">Description</label>
              <textarea
                id="description"
                rows="3"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="Optional description of this curve definition..."
              ></textarea>
            </div>
          </div>
        </div>
        
        <!-- Step 1 Actions -->
        <div class="flex justify-end mt-6">
          <button
            type="button"
            id="step1Next"
            class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-gray-400 disabled:cursor-not-allowed"
            disabled
          >
            Next: Instance Details
          </button>
        </div>
      </div>
      
      <!-- STEP 2: Curve Instance -->
      <div id="step2" class="bg-white rounded-lg shadow-md p-6 border-l-4 border-green-500 hidden">
        <div class="flex items-center mb-4">
          <span class="text-2xl mr-3">üìà</span>
          <h2 class="text-xl font-bold text-gray-900">Step 2: Curve Instance</h2>
          <div class="ml-auto">
            <span class="text-sm text-gray-500" id="step2-status">Required</span>
          </div>
        </div>
        
        <p class="text-gray-600 mb-6">Define the specific forecast run details</p>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Instance Version -->
          <div>
            <label class="block text-sm font-medium text-gray-700">Instance Version *</label>
            <input
              type="text"
              id="instanceVersion"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
              placeholder="e.g., Aug 2025, v1.0, Q3-2024"
            />
          </div>
          
          <!-- Created By -->
          <div>
            <label class="block text-sm font-medium text-gray-700">Created By</label>
            <input
              type="text"
              id="createdBy"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
              placeholder="e.g., GridStor Internal, Aurora"
              value="GridStor Internal"
            />
          </div>
          
          <!-- Delivery Period Start -->
          <div>
            <label class="block text-sm font-medium text-gray-700">Delivery Period Start *</label>
            <input
              type="date"
              id="deliveryPeriodStart"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            />
          </div>
          
          <!-- Delivery Period End -->
          <div>
            <label class="block text-sm font-medium text-gray-700">Delivery Period End *</label>
            <input
              type="date"
              id="deliveryPeriodEnd"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            />
          </div>
          
          <!-- Model Type -->
          <div>
            <label class="block text-sm font-medium text-gray-700">Model Type</label>
            <input
              type="text"
              id="modelType"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
              placeholder="e.g., Fundamental, Statistical"
              value="Fundamental"
            />
          </div>
          
          <!-- Notes -->
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700">Notes</label>
            <textarea
              id="notes"
              rows="3"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
              placeholder="Optional notes about this instance..."
            ></textarea>
          </div>
        </div>
        
        <!-- Step 2 Actions -->
        <div class="flex justify-between mt-6">
          <button
            type="button"
            id="step2Back"
            class="bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
          >
            Back
          </button>
          <button
            type="button"
            id="step2Next"
            class="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:bg-gray-400 disabled:cursor-not-allowed"
            disabled
          >
            Next: Delivery Request
          </button>
        </div>
      </div>
      
      <!-- STEP 3: Delivery Request -->
      <div id="step3" class="bg-white rounded-lg shadow-md p-6 border-l-4 border-purple-500 hidden">
        <div class="flex items-center mb-4">
          <span class="text-2xl mr-3">üìã</span>
          <h2 class="text-xl font-bold text-gray-900">Step 3: Delivery Request</h2>
          <div class="ml-auto">
            <span class="text-sm text-gray-500" id="step3-status">Required</span>
          </div>
        </div>
        
        <p class="text-gray-600 mb-6">Set delivery tracking and responsibility details</p>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Due Date -->
          <div>
            <label class="block text-sm font-medium text-gray-700">Due Date *</label>
            <input
              type="date"
              id="dueDate"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500"
            />
          </div>
          
          <!-- Priority -->
          <div>
            <label class="block text-sm font-medium text-gray-700">Priority</label>
            <select id="priority" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500">
              <option value="MEDIUM">Medium</option>
              <option value="HIGH">High</option>
              <option value="LOW">Low</option>
              <option value="URGENT">Urgent</option>
            </select>
          </div>
          
          <!-- Requested By -->
          <div>
            <label class="block text-sm font-medium text-gray-700">Requested By</label>
            <input
              type="text"
              id="requestedBy"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500"
              placeholder="e.g., John Doe, Analytics Team"
              value="GridStor Analytics"
            />
          </div>
          
          <!-- Responsible Team -->
          <div>
            <label class="block text-sm font-medium text-gray-700">Responsible Team</label>
            <input
              type="text"
              id="responsibleTeam"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500"
              placeholder="e.g., Forecasting, External Vendor"
              value="Forecasting Team"
            />
          </div>
          
          <!-- Request Notes -->
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700">Request Notes</label>
            <textarea
              id="requestNotes"
              rows="3"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500"
              placeholder="Additional details about this delivery request..."
            ></textarea>
          </div>
        </div>
        
        <!-- Step 3 Actions -->
        <div class="flex justify-between mt-6">
          <button
            type="button"
            id="step3Back"
            class="bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
          >
            Back
          </button>
          <button
            type="submit"
            id="createRequest"
            class="bg-purple-600 text-white px-6 py-2 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:bg-gray-400 disabled:cursor-not-allowed"
            disabled
          >
            Create Delivery Request
          </button>
        </div>
      </div>
    </form>
    
    <!-- Success/Error Messages -->
    <div id="notification" class="fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg text-white hidden">
      <p id="notification-text"></p>
    </div>

    <!-- Note Modal -->
    <div id="noteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
        <div class="p-6 border-b border-[#E5E7EB]">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-[#1F2937]">Add Note</h3>
            <button onclick="closeNoteModal()" type="button" class="text-[#6B7280] hover:text-[#374151] transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
              </svg>
            </button>
          </div>
          <p id="noteModalDate" class="text-sm text-[#6B7280] mt-1"></p>
        </div>
        <div class="p-6">
          <textarea 
            id="noteTextarea" 
            rows="4" 
            class="w-full border border-[#E5E7EB] rounded-md px-3 py-2 text-sm text-[#111827] focus:border-[#8B5CF6] focus:ring-2 focus:ring-[#8B5CF6] focus:ring-opacity-50 outline-none resize-none"
            placeholder="Enter your note here..."
          ></textarea>
        </div>
        <div class="p-6 border-t border-[#E5E7EB] flex justify-end gap-3">
          <button 
            onclick="closeNoteModal()" 
            type="button"
            class="px-4 py-2 text-sm font-medium text-[#6B7280] hover:text-[#374151] transition-colors"
          >
            Cancel
          </button>
          <button 
            onclick="saveNote()" 
            type="button"
            class="px-4 py-2 text-sm font-medium bg-[#8B5CF6] text-white rounded-md hover:bg-[#7C3AED] transition-colors"
          >
            Save Note
          </button>
        </div>
      </div>
    </div>
  </div>

  <script src="/js/delivery-request-form-hierarchical.js" is:inline></script>

  <script>
    // ==================== MONTH NAVIGATION ====================
    // Get current year and month from URL or use today
    const urlParams = new URLSearchParams(window.location.search);
    const yearParam = urlParams.get('year');
    const monthParam = urlParams.get('month');
    
    const today = new Date();
    let currentYear = yearParam ? parseInt(yearParam) : today.getFullYear();
    let currentMonth = monthParam ? parseInt(monthParam) - 1 : today.getMonth();
    
    let currentDate = new Date(currentYear, currentMonth, 1);

    function updateCalendar(year: number, month: number) {
      const url = new URL(window.location.href);
      url.searchParams.set('year', year.toString());
      url.searchParams.set('month', (month + 1).toString());
      window.location.href = url.toString();
    }

    document.getElementById('prevMonth')?.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() - 1);
      updateCalendar(currentDate.getFullYear(), currentDate.getMonth());
    });

    document.getElementById('nextMonth')?.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() + 1);
      updateCalendar(currentDate.getFullYear(), currentDate.getMonth());
    });

    // ==================== NOTES FUNCTIONALITY ====================
    interface CalendarNote {
      date: string;
      text: string;
      timestamp: number;
    }

    let currentNoteDate: string = '';
    const NOTES_STORAGE_KEY = 'calendar_notes';

    function loadNotes(): Record<string, CalendarNote[]> {
      const stored = localStorage.getItem(NOTES_STORAGE_KEY);
      return stored ? JSON.parse(stored) : {};
    }

    function saveNotesToStorage(notes: Record<string, CalendarNote[]>) {
      localStorage.setItem(NOTES_STORAGE_KEY, JSON.stringify(notes));
    }

    function openNoteModal(date: string) {
      currentNoteDate = date;
      const modal = document.getElementById('noteModal');
      const dateDisplay = document.getElementById('noteModalDate');
      const textarea = document.getElementById('noteTextarea') as HTMLTextAreaElement;
      
      if (modal && dateDisplay && textarea) {
        const dateObj = new Date(date + 'T00:00:00');
        dateDisplay.textContent = dateObj.toLocaleDateString('en-US', { 
          weekday: 'long', 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
        textarea.value = '';
        modal.classList.remove('hidden');
      }
    }

    function closeNoteModal() {
      const modal = document.getElementById('noteModal');
      const textarea = document.getElementById('noteTextarea') as HTMLTextAreaElement;
      
      if (modal && textarea) {
        modal.classList.add('hidden');
        textarea.value = '';
        currentNoteDate = '';
      }
    }

    function saveNote() {
      const textarea = document.getElementById('noteTextarea') as HTMLTextAreaElement;
      
      if (!textarea || !currentNoteDate || !textarea.value.trim()) {
        return;
      }

      const notes = loadNotes();
      
      if (!notes[currentNoteDate]) {
        notes[currentNoteDate] = [];
      }

      const newNote: CalendarNote = {
        date: currentNoteDate,
        text: textarea.value.trim(),
        timestamp: Date.now()
      };

      notes[currentNoteDate].push(newNote);
      saveNotesToStorage(notes);
      
      displayNoteInCalendar(currentNoteDate, newNote);
      closeNoteModal();
    }

    function displayNoteInCalendar(date: string, note: CalendarNote) {
      const container = document.querySelector(`.notes-container[data-date="${date}"]`);
      
      if (container) {
        const noteEl = document.createElement('div');
        noteEl.className = 'bg-[#FEF3C7] border border-[#F59E0B] rounded p-1.5 text-xs group relative';
        noteEl.innerHTML = `
          <div class="flex items-start justify-between gap-1">
            <div class="flex-1 min-w-0">
              <div class="text-[#92400E] break-words">${escapeHtml(note.text)}</div>
            </div>
            <button 
              class="opacity-0 group-hover:opacity-100 transition-opacity shrink-0 text-[#92400E] hover:text-[#78350F]"
              onclick="deleteNote('${date}', ${note.timestamp})"
              type="button"
              title="Delete note"
            >
              <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
              </svg>
            </button>
          </div>
        `;
        container.appendChild(noteEl);
      }
    }

    function deleteNote(date: string, timestamp: number) {
      const notes = loadNotes();
      
      if (notes[date]) {
        notes[date] = notes[date].filter(note => note.timestamp !== timestamp);
        
        if (notes[date].length === 0) {
          delete notes[date];
        }
        
        saveNotesToStorage(notes);
        
        const container = document.querySelector(`.notes-container[data-date="${date}"]`);
        if (container) {
          container.innerHTML = '';
          if (notes[date]) {
            notes[date].forEach(note => displayNoteInCalendar(date, note));
          }
        }
      }
    }

    function escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Load all notes on page load
    document.addEventListener('DOMContentLoaded', () => {
      const notes = loadNotes();
      
      Object.entries(notes).forEach(([date, dateNotes]) => {
        dateNotes.forEach(note => {
          displayNoteInCalendar(date, note);
        });
      });
    });

    // Close modal on ESC key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeNoteModal();
      }
    });

    // Close modal when clicking outside
    document.getElementById('noteModal')?.addEventListener('click', (e) => {
      if (e.target === e.currentTarget) {
        closeNoteModal();
      }
    });
  </script>
</Layout>

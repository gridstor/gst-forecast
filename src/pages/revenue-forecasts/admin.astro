---
import Layout from '../../layouts/Layout.astro';
import { query } from '../../lib/db';
import { prisma } from '../../lib/prisma';

// Get recent curve activity
let recentActivity = [];
try {
  const result = await query(`
    SELECT 
      cd."curveName",
      ci."instanceVersion",
      ci.status,
      ci."createdAt",
      ci."createdBy",
      cd.market,
      cd.location
    FROM "Forecasts"."CurveInstance" ci
    JOIN "Forecasts"."CurveDefinition" cd ON ci."curveDefinitionId" = cd.id
    ORDER BY ci."createdAt" DESC
    LIMIT 10
  `);
  recentActivity = result.rows;
} catch (error) {
  console.error('Error fetching activity:', error);
}

// Fetch all curve schedules with their definitions for the calendar
let schedules = [];
let schedulesByDate: Record<string, any[]> = {};
try {
  schedules = await prisma.curveSchedule.findMany({
    where: {
      isActive: true
    },
    select: {
      id: true,
      importance: true,
      frequency: true,
      curveDefinition: {
        select: {
          curveName: true,
          location: true,
          market: true
        }
      },
      scheduleRuns: {
        where: {
          runDate: {
            gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1),
            lte: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0)
          }
        },
        select: {
          runDate: true,
          status: true
        },
        orderBy: {
          runDate: 'asc'
        }
      }
    }
  });

  // Group schedules by their run dates
  schedules.forEach((schedule: any) => {
    schedule.scheduleRuns.forEach((run: any) => {
      const dateKey = run.runDate.toISOString().split('T')[0];
      if (!schedulesByDate[dateKey]) {
        schedulesByDate[dateKey] = [];
      }
      schedulesByDate[dateKey].push({
        id: schedule.id,
        name: schedule.curveDefinition.curveName,
        location: schedule.curveDefinition.location,
        market: schedule.curveDefinition.market,
        importance: schedule.importance,
        status: run.status
      });
    });
  });
} catch (error) {
  console.error('Error fetching curve schedule:', error);
}

// Get the current month's start and end dates
const today = new Date();
const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

// Get all dates in the current month
const datesInMonth = Array.from(
  { length: lastDayOfMonth.getDate() },
  (_, i) => new Date(today.getFullYear(), today.getMonth(), i + 1)
);

// Get the day of week for the first day (0 = Sunday)
const firstDayOfWeek = firstDayOfMonth.getDay();

// Add empty cells for days before the first day of the month
const calendarDays = Array(firstDayOfWeek).fill(null).concat(datesInMonth);

// Function to get the importance class
function getImportanceClass(importance: number): string {
  switch (importance) {
    case 1: return 'bg-red-100 border-red-200';
    case 2: return 'bg-orange-100 border-orange-200';
    case 3: return 'bg-yellow-100 border-yellow-200';
    default: return 'bg-gray-100 border-gray-200';
  }
}

// Function to get status badge color
function getStatusClass(status: string): string {
  switch (status) {
    case 'COMPLETED': return 'bg-green-100 text-green-800';
    case 'PENDING': return 'bg-yellow-100 text-yellow-800';
    case 'FAILED': return 'bg-red-100 text-red-800';
    default: return 'bg-gray-100 text-gray-800';
  }
}
---

<Layout title="Revenue Forecast Admin">
  <!-- SECTION: LATEST CURVE ACTIVITY -->
  <section class="mb-12">
    <div class="mb-6">
      <h1 class="text-3xl font-bold text-[#2A2A2A] mb-2" style="letter-spacing: -0.01em;">Latest Curve Activity</h1>
      <p class="text-base text-[#6B7280]">Track recent curve updates and activity across all markets and locations</p>
    </div>
    
    <!-- Activity Log -->
    <div class="bg-white rounded-lg p-6 mb-6 accent-border-blue" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
      <div class="space-y-2">
        {recentActivity.slice(0, 5).map((activity) => (
          <div class="flex items-center justify-between py-3 border-b border-[#F3F4F6] last:border-0">
            <div class="flex-1">
              <div class="font-medium text-[#111827] text-sm">{activity.curveName}</div>
              <div class="text-xs text-[#6B7280] mt-1 font-mono">{activity.instanceVersion} • {activity.market} • {activity.location}</div>
            </div>
            <div class="text-right">
              <div class="text-xs text-[#6B7280] mb-1">{new Date(activity.createdAt).toLocaleDateString()}</div>
              <span class={`inline-flex items-center px-2 py-0.5 rounded text-xs font-mono ${activity.status === 'ACTIVE' ? 'bg-[#ECFDF5] text-[#059669]' : 'bg-[#F9FAFB] text-[#6B7280]'}`}>
                {activity.status}
              </span>
            </div>
          </div>
        ))}
      </div>
      <a href="/admin/curve-logs" class="mt-4 inline-block text-sm text-[#3B82F6] hover:text-[#2563EB] font-medium">View All Activity →</a>
    </div>
  </section>

  <!-- SECTION: CURVE SCHEDULE CALENDAR -->
  <section class="mb-12">
    <div class="mb-6">
      <h2 class="text-2xl font-bold text-[#2A2A2A] mb-2" style="letter-spacing: -0.01em;">Curve Schedule Calendar</h2>
      <p class="text-base text-[#6B7280]">View and manage scheduled curve updates and delivery periods</p>
    </div>

    <!-- Full Calendar View -->
    <div class="bg-white rounded-lg shadow-md overflow-hidden accent-border-purple" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
      <div class="p-6 border-b border-[#E5E7EB]">
        <div class="flex justify-between items-center">
          <h3 class="text-lg font-semibold text-[#1F2937]">
            {today.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
          </h3>
          <div class="flex gap-3">
            <a href="/curve-schedule/create-enhanced" class="inline-flex items-center px-3 py-2 bg-[#3B82F6] text-white text-sm rounded-md hover:bg-[#2563EB] transition-colors">
              + New Schedule
            </a>
            <a href="/curve-schedule/manage" class="inline-flex items-center px-3 py-2 bg-[#10B981] text-white text-sm rounded-md hover:bg-[#059669] transition-colors">
              Manage Schedules
            </a>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-7 gap-px bg-[#E5E7EB] border-b border-[#E5E7EB]">
        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => (
          <div class="bg-[#F9FAFB] p-3 text-center text-sm font-medium text-[#6B7280]">
            {day}
          </div>
        ))}
      </div>

      <div class="grid grid-cols-7 gap-px bg-[#E5E7EB]">
        {calendarDays.map((date) => (
          <div class={`bg-white min-h-[120px] p-2 ${
            date && date.toISOString().split('T')[0] === today.toISOString().split('T')[0]
              ? 'ring-2 ring-inset ring-[#3B82F6] bg-[#EFF6FF]'
              : ''
          }`}>
            {date && (
              <div>
                <div class="font-medium text-sm text-[#111827] mb-2">
                  {date.getDate()}
                </div>
                <div class="space-y-1">
                  {(schedulesByDate[date.toISOString().split('T')[0]] || []).map((schedule: any) => (
                    <div
                      class={`block text-xs p-1.5 rounded border ${getImportanceClass(schedule.importance)} hover:opacity-75 transition-opacity`}
                    >
                      <div class="font-medium truncate" title={`${schedule.name} - ${schedule.location}`}>
                        {schedule.name}
                      </div>
                      <div class="flex items-center justify-between mt-0.5">
                        <span class="text-[0.65rem] text-gray-600 truncate">{schedule.location}</span>
                        <span class={`text-[0.6rem] px-1 py-0.5 rounded ${getStatusClass(schedule.status)}`}>
                          {schedule.status}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      <!-- Calendar Legend -->
      <div class="p-4 bg-[#F9FAFB] border-t border-[#E5E7EB]">
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-4">
            <h4 class="text-sm font-medium text-[#6B7280]">Priority Levels:</h4>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded bg-red-100 border border-red-200"></div>
              <span class="text-xs text-[#6B7280]">High</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded bg-orange-100 border border-orange-200"></div>
              <span class="text-xs text-[#6B7280]">Medium</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded bg-yellow-100 border border-yellow-200"></div>
              <span class="text-xs text-[#6B7280]">Low</span>
            </div>
          </div>
          <p class="text-xs text-[#6B7280]">Click any curve to view or edit schedule details</p>
        </div>
      </div>
    </div>
  </section>

  <!-- SECTION: CURVE MANAGEMENT -->
  <section class="mb-12">
    <div class="mb-8">
      <h2 class="text-2xl font-bold text-[#2A2A2A] mb-2" style="letter-spacing: -0.01em;">Curve Management</h2>
      <p class="text-base text-[#6B7280]">Upload and manage curve definitions and instances</p>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <a href="/admin/upload" class="bg-white rounded-lg p-6 accent-border-blue transition-all duration-200 hover:-translate-y-1" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div class="flex items-center gap-3 mb-4">
          <svg class="w-6 h-6 text-[#3B82F6]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
          </svg>
          <h3 class="text-lg font-semibold text-[#1F2937]">Upload New Curves</h3>
        </div>
        <p class="text-[#6B7280] text-sm">Create curve definitions, instances, and upload price data</p>
      </a>

      <a href="/admin/inventory" class="bg-white rounded-lg p-6 accent-border-green transition-all duration-200 hover:-translate-y-1" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div class="flex items-center gap-3 mb-4">
          <svg class="w-6 h-6 text-[#10B981]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"/>
          </svg>
          <h3 class="text-lg font-semibold text-[#1F2937]">Manage Inventory</h3>
        </div>
        <p class="text-[#6B7280] text-sm">View, edit, and delete curves, instances, and data</p>
      </a>
    </div>
  </section>

  <!-- Toast Notification -->
  <div id="toast" class="hidden fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg text-white"></div>
</Layout>

<script>
  // Smooth scroll to sections
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (this: HTMLAnchorElement, e: Event) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute('href')!);
      if (target) {
        target.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });
  });
</script>


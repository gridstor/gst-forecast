---
import Layout from '../../layouts/Layout.astro';
import FilterPanel from '../../components/curve-tracker/FilterPanel';
import CurveGrid from '../../components/curve-tracker/CurveGrid';
import StatusSummary from '../../components/curve-tracker/StatusSummary';
import DateFilter from '../../components/curve-tracker/DateFilter';
import { prisma } from '../../lib/prisma';

// Fetch initial data
const curves = await prisma.curveSchedule.findMany({
  include: {
    updateHistory: {
      orderBy: {
        updateDate: 'desc'
      },
      take: 1
    },
    receipts: {
      orderBy: {
        receivedDate: 'desc'
      },
      take: 1
    },
    _count: {
      select: {
        comments: true
      }
    }
  }
});

// Calculate summary statistics
const totalCurves = curves.length;

const overdueCurves = curves.filter(function(curve) {
  if (!curve.nextUpdateDue) return false;
  return new Date(curve.nextUpdateDue) < new Date();
}).length;

const dueSoonCurves = curves.filter(function(curve) {
  if (!curve.nextUpdateDue) return false;
  const dueDate = new Date(curve.nextUpdateDue);
  const now = new Date();
  const daysDiff = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 3600 * 24));
  return daysDiff > 0 && daysDiff <= 7;
}).length;

const initialDate = null;
---

<Layout title="Curve Schedule">
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <div>
        <h1 class="text-3xl font-bold">Curve Schedule</h1>
        <p class="mt-2 text-gray-600">Track and manage your curve updates and schedules</p>
      </div>
      <div class="space-x-4">
        <a
          href="/curve-schedule/calendar"
          class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          View Calendar
        </a>
      </div>
    </div>

    <div class="mb-8">
      <StatusSummary
        client:load
        totalCurves={totalCurves}
        overdueCurves={overdueCurves}
        dueSoonCurves={dueSoonCurves}
      />
    </div>

    <div class="mb-8">
      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="space-y-6">
          <FilterPanel client:load />
          <div id="date-filter-container">
            <DateFilter
              client:only="react"
              selectedDate={initialDate}
              onDateChange={(date) => {
                const event = new CustomEvent('dateChange', { 
                  detail: date,
                  bubbles: true,
                  composed: true
                });
                document.dispatchEvent(event);
              }}
            />
          </div>
        </div>
      </div>
    </div>

    <div class="mb-8">
      <CurveGrid
        client:load
        curves={curves}
        selectedDate={initialDate}
      />
    </div>
  </div>
</Layout>

<script>
  let selectedDate = null;
  const curves = JSON.parse(document.querySelector('#__ASTRO_DATA__')?.textContent || '[]');

  document.addEventListener('dateChange', ((e: CustomEvent) => {
    selectedDate = e.detail;
    const curveGrid = document.querySelector('astro-island[component-url*="CurveGrid"]');
    if (curveGrid) {
      // @ts-ignore - Astro component prop update
      curveGrid.setAttribute('props', JSON.stringify({ curves, selectedDate }));
    }
  }) as EventListener);
</script>

<style>
  /* Add any custom styles here */
</style> 
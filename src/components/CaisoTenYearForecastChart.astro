---
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

// Add console log to check database connection
console.log('Connecting to database...');

// Define brand colors
const colors = {
  primary: '#2AB3CB',    // Bright turquoise
  secondary: '#1D7874',  // Teal green
  tertiary: '#679289',   // Sage green
  accent: '#F4C095',     // Peach
  dark: '#E2231A'        // Red
};

const forecasts = await prisma.caiso_long_term_forecasts_annual.findMany({
  select: {
    FlowDateStart: true,
    Value: true,
    MarkType: true,
    MarkCase: true
  },
  where: {
    Value: { not: null },
    FlowDateStart: { not: null },
    AND: {
      MarkType: { not: '' },
      MarkCase: { not: '' }
    }
  },
  orderBy: {
    FlowDateStart: 'asc'
  }
});

// Convert BigInt to Number in the forecasts data
const serializedForecasts = forecasts.map(forecast => ({
  ...forecast,
  Value: forecast.Value ? Number(forecast.Value) : null,
  FlowDateStart: forecast.FlowDateStart ? Number(forecast.FlowDateStart) : null
}));

// Log the results
console.log('Fetched forecasts:', forecasts.length);
console.log('Sample forecast:', forecasts[0]);

// Group data by MarkType and MarkCase
const groupedData = forecasts.reduce((acc, forecast) => {
  const key = `${forecast.MarkType}-${forecast.MarkCase}`;
  acc[key] = acc[key] || [];  // More reliable way to initialize array
  
  const year = Number(forecast.FlowDateStart);
  const date = new Date(year, 0, 1);

  acc[key].push({
    date: date.toISOString(),
    value: forecast.Value ?? 0
  });
  return acc;
}, {});

// Add debug logging
console.log('Sample grouped data:', Object.entries(groupedData)[0]);

// Update datasets configuration
const datasets = Object.entries(groupedData).map(([key, data], index) => {
  const isDefaultLine = key.includes('GST_SP15_Revenue_4h-Base') || 
                       key.includes('GST_SP15_Revenue_4h-Upside') ||
                       key.includes('GST_SP15_Revenue_4h-Downside');
  
  return {
    label: key,
    data: data,
    borderColor: key.includes('-Base') ? colors.primary :
                key.includes('-Upside') ? colors.secondary :
                key.includes('-Downside') ? colors.tertiary :
                colors.accent,
    tension: 0,
    borderWidth: 4,
    order: 1,
    hidden: !isDefaultLine  // Hide non-default lines
  };
});
---

<div class="viz-container">
  <div class="chart-container">
    <div id="chartData" style="display: none">{JSON.stringify(serializedForecasts)}</div>
    <canvas id="caisoChart"></canvas>
  </div>
  <div class="mt-4 px-4">
    <div id="caisoSlider" class="my-4"></div>
    <div class="flex justify-between text-sm text-gray-600">
      <span id="caisoStartDate"></span>
      <span id="caisoEndDate"></span>
    </div>
  </div>
  <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
    {datasets.map(dataset => (
      <div class="bg-white rounded-lg shadow p-4">
        <h3 class="text-sm font-medium text-gray-600">{dataset.label}</h3>
        <p class="text-2xl font-bold mt-2" id={`stat-${dataset.label}`}>-</p>
        <p class="text-xs text-gray-500">Average $/kw-mn</p>
      </div>
    ))}
  </div>
</div>

<script>
  // Add type declarations for external libraries
  declare const Chart: any;
  declare const noUiSlider: any;

  const chartDataElement = document.getElementById('chartData');
  const chartData = chartDataElement ? JSON.parse(chartDataElement.textContent || '[]') : [];
  
  function loadScript(src: string) {
    return new Promise<void>((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.onload = () => resolve();
      script.onerror = (e) => reject(e);
      document.head.appendChild(script);
    });
  }

  interface ChartDataPoint {
    date: string;
    value: number;
  }

  interface Dataset {
    label: string;
    data: ChartDataPoint[];
    borderColor: string;
    tension: number;
    borderWidth: number;
    order: number;
    hidden: boolean;
  }

  interface SliderElement extends HTMLElement {
    noUiSlider: {
      on: (event: string, callback: (values: any[]) => void) => void;
      create: (options: any) => void;
    };
  }

  async function initChart() {
    try {
      await loadScript('https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js');
      await loadScript('https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js');
      await loadScript('https://cdn.jsdelivr.net/npm/nouislider@15.7.1/dist/nouislider.min.js');

      interface Forecast {
        MarkType: string;
        MarkCase: string;
        FlowDateStart: number;
        Value: number;
      }

      const groupedData: Record<string, ChartDataPoint[]> = chartData.reduce((acc: Record<string, ChartDataPoint[]>, forecast: Forecast) => {
        const key = `${forecast.MarkType}-${forecast.MarkCase}`;
        acc[key] = acc[key] || [];
        
        const year = Number(forecast.FlowDateStart);
        const date = new Date(year, 0, 1);

        acc[key].push({
          date: date.toISOString(),
          value: forecast.Value ?? 0
        });
        return acc;
      }, {} as Record<string, ChartDataPoint[]>);

      const datasets: Dataset[] = Object.entries(groupedData).map(([key, data]) => {
        const isDefaultLine = key.includes('GST_SP15_Revenue_4h-Base') || 
                           key.includes('GST_SP15_Revenue_4h-Upside') ||
                           key.includes('GST_SP15_Revenue_4h-Downside');
        
        return {
          label: key,
          data,
          borderColor: key.includes('-Base') ? '#2AB3CB' :
                    key.includes('-Upside') ? '#1D7874' :
                    key.includes('-Downside') ? '#679289' :
                    '#F4C095',
          tension: 0,
          borderWidth: 4,
          order: 1,
          hidden: !isDefaultLine
        };
      });

      const canvas = document.getElementById('caisoChart') as HTMLCanvasElement;
      
      if (canvas) {
        const chart = new Chart(canvas, {
          type: 'line',
          data: {
            datasets: datasets.map(dataset => ({
              ...dataset,
              parsing: {
                xAxisKey: 'date',
                yAxisKey: 'value'
              },
              pointRadius: 1,
              fill: false
            }))
          },
          options: {
            maintainAspectRatio: false,
            responsive: true,
            interaction: {
              mode: 'nearest',
              intersect: false
            },
            scales: {
              x: {
                type: 'time',
                time: {
                  unit: 'year',
                  displayFormats: {
                    year: 'yyyy'
                  },
                  tooltipFormat: 'yyyy'
                },
                title: {
                  display: true,
                  text: 'Year',
                  font: {
                    size: 14,
                    weight: 500
                  }
                },
                grid: {
                  color: '#E5E7EB'
                }
              },
              y: {
                title: {
                  display: true,
                  text: '$/kw-mn',
                  font: {
                    size: 14,
                    weight: 500
                  }
                },
                grid: {
                  color: '#E5E7EB'
                }
              }
            },
            plugins: {
              title: {
                display: false
              },
              legend: {
                position: 'bottom',
                labels: {
                  padding: 20,
                  usePointStyle: true,
                  font: {
                    size: 12
                  }
                }
              },
              tooltip: {
                backgroundColor: 'rgba(255, 255, 255, 0.95)',
                titleColor: '#2A2A2A',
                bodyColor: '#2A2A2A',
                borderColor: '#E5E7EB',
                borderWidth: 1,
                padding: 12,
                displayColors: true,
                intersect: false
              }
            }
          }
        });

        // Initialize slider
        const slider = document.getElementById('caisoSlider') as SliderElement;
        if (slider) {
          const years = datasets[0]?.data.map(d => new Date(d.date).getFullYear()) || [];
          const minYear = Math.min(...years);
          const maxYear = Math.max(...years);

          noUiSlider.create(slider, {
            start: [minYear, maxYear],
            connect: true,
            range: {
              'min': minYear,
              'max': maxYear
            },
            step: 1
          });

          // Add slider update handler
          slider.noUiSlider.on('update', (values) => {
            const [start, end] = values.map(Number);
            const startDate = new Date(start, 0, 1);
            const endDate = new Date(end, 11, 31);
            
            chart.options.scales.x.min = startDate;
            chart.options.scales.x.max = endDate;
            chart.update();

            // Update stats cards
            datasets.forEach(dataset => {
              const filteredData = dataset.data.filter(d => {
                const year = new Date(d.date).getFullYear();
                return year >= start && year <= end;
              });
              
              const average = filteredData.reduce((sum, d) => sum + d.value, 0) / filteredData.length;
              const statEl = document.getElementById(`stat-${dataset.label}`);
              if (statEl) {
                statEl.textContent = `$${average.toLocaleString('en-US', { 
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2 
                })}`;
              }
            });
          });
        }
      }
    } catch (error) {
      console.error('Error initializing CAISO chart:', error);
    }
  }

  // Initialize the chart when the DOM is ready
  document.addEventListener('DOMContentLoaded', initChart);

  function downloadData() {
    const datasets = JSON.parse(document.getElementById('caisoChart')?.dataset?.datasets || '[]');
    const csvRows = [['Date', ...datasets.map((d: Dataset) => d.label)]];
    
    const dataByDate = Object.create(null);
    
    datasets.forEach((dataset: Dataset) => {
      dataset.data.forEach((point: ChartDataPoint) => {
        if (!dataByDate[point.date]) {
          dataByDate[point.date] = { date: point.date };
        }
        dataByDate[point.date][dataset.label] = point.value;
      });
    });

    Object.values(dataByDate).forEach((row: unknown) => {
      const typedRow = row as { date: string; [key: string]: any };
      csvRows.push([
        new Date(typedRow.date).getFullYear(),
        ...datasets.map((d: Dataset) => typedRow[d.label] || '')
      ]);
    });

    const csvContent = csvRows.map(row => row.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'sp15-battery-revenue.csv';
    a.click();
    window.URL.revokeObjectURL(url);
  }
</script>

<style>
  .chart-container {
    position: relative;
    width: 100%;
    height: 600px;
    margin: 0 auto;
  }
</style> 
---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Manage Curve Inventory">
  <!-- Page Header - Design System -->
  <div class="mb-8">
    <h1 class="text-2xl font-bold text-[#2A2A2A] mb-2" style="letter-spacing: -0.01em;">Manage Curve Inventory</h1>
    <p class="text-base text-[#6B7280]">View, edit, and delete curve definitions, instances, and data</p>
  </div>

  <div class="max-w-[1800px] mx-auto">

    <!-- Global Filters - Design System Card -->
    <div class="bg-white rounded-lg p-6 mb-6 accent-border-gray" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
      <div class="flex items-center gap-2 mb-4">
        <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/>
        </svg>
        <h2 class="text-lg font-semibold text-[#1F2937]">Global Filters</h2>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Market</label>
          <select id="globalMarket" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white text-[#111827] focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all">
            <option value="">All Markets</option>
            <option value="CAISO">CAISO</option>
            <option value="ERCOT">ERCOT</option>
            <option value="PJM">PJM</option>
          </select>
        </div>
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Location</label>
          <input type="text" id="globalLocation" placeholder="Any location" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white text-[#111827] placeholder-[#9CA3AF] focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all" />
        </div>
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Product</label>
          <input type="text" id="globalProduct" placeholder="Any product" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white text-[#111827] placeholder-[#9CA3AF] focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all" />
        </div>
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Curve Type</label>
          <select id="globalCurveType" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white text-[#111827] focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all">
            <option value="">All Types</option>
            <option value="REVENUE">Revenue</option>
            <option value="ENERGY">Energy</option>
            <option value="AS">Ancillary Services</option>
          </select>
        </div>
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Status</label>
          <select id="globalStatus" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white text-[#111827] focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all">
            <option value="">All</option>
            <option value="ACTIVE">Active</option>
            <option value="DRAFT">Draft</option>
            <option value="ARCHIVED">Archived</option>
          </select>
        </div>
      </div>
      <div class="mt-4 flex items-center justify-between">
        <button id="clearFilters" class="text-sm text-[#3B82F6] hover:text-[#2563EB] font-medium">Clear All Filters</button>
        <span id="filterCount" class="text-sm text-[#6B7280] font-mono"></span>
      </div>
    </div>

    <!-- Three Column Layout - Design System Cards -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      
      <!-- COLUMN 1: DEFINITIONS -->
      <div class="bg-white rounded-lg overflow-hidden flex flex-col h-[700px] accent-border-blue" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div class="px-6 py-4 border-b border-[#F3F4F6]">
          <h2 class="text-lg font-semibold text-[#1F2937]">Curve Definitions</h2>
        </div>
        <div class="px-6 py-3 border-b border-[#F3F4F6] space-y-3">
          <input type="text" id="defSearch" placeholder="Search..." class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white placeholder-[#9CA3AF] focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all" />
          <select id="defSort" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all">
            <option value="recent">Recent First</option>
            <option value="name">Name (A-Z)</option>
            <option value="market">Market</option>
          </select>
        </div>
        <div id="defList" class="flex-1 overflow-y-auto px-4 py-3"></div>
      </div>

      <!-- COLUMN 2: INSTANCES -->
      <div class="bg-white rounded-lg overflow-hidden flex flex-col h-[700px] accent-border-green" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div class="px-6 py-4 border-b border-[#F3F4F6]">
          <h2 class="text-lg font-semibold text-[#1F2937]">Curve Instances</h2>
        </div>
        <div class="px-6 py-3 border-b border-[#F3F4F6] space-y-3">
          <input type="text" id="instSearch" placeholder="Search..." class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white placeholder-[#9CA3AF] focus:border-[#10B981] focus:ring-2 focus:ring-[#10B981] focus:ring-opacity-50 outline-none transition-all" disabled />
          <select id="instSort" class="w-full px-3 py-2 text-sm border border-[#E5E7EB] rounded-md bg-white focus:border-[#10B981] focus:ring-2 focus:ring-[#10B981] focus:ring-opacity-50 outline-none transition-all" disabled>
            <option value="recent">Recent First</option>
            <option value="version">Version</option>
            <option value="status">Status</option>
          </select>
        </div>
        <div id="instList" class="flex-1 overflow-y-auto px-4 py-3">
          <div class="text-center text-[#6B7280] text-sm py-8">Select a definition first</div>
        </div>
      </div>

      <!-- COLUMN 3: ACTIONS -->
      <div class="bg-white rounded-lg overflow-hidden flex flex-col h-[700px] accent-border-purple" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div class="px-6 py-4 border-b border-[#F3F4F6]">
          <h2 class="text-lg font-semibold text-[#1F2937]">Actions</h2>
        </div>
        <div id="actionPanel" class="flex-1 overflow-y-auto px-6 py-4">
          <div class="text-center text-[#6B7280] text-sm py-8">Select an item to see actions</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast -->
  <div id="toast" class="hidden fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg text-white"></div>

  <!-- Edit Definition Modal - Design System -->
  <div id="editDefModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-lg max-w-2xl w-full" style="box-shadow: 0 12px 30px rgba(0,0,0,0.1);">
      <div class="px-6 py-4 border-b border-[#E5E7EB] flex items-center justify-between">
        <h3 class="text-lg font-semibold text-[#1F2937]">Edit Definition</h3>
        <button id="closeEditDef" class="text-[#9CA3AF] hover:text-[#6B7280] transition-colors">âœ•</button>
      </div>
      <div class="px-6 py-4 grid grid-cols-2 gap-4">
        <input type="hidden" id="editDefId" />
        <div class="col-span-2">
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Curve Name</label>
          <input type="text" id="editDefName" class="w-full px-3 py-2 border border-[#E5E7EB] rounded-md bg-white focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all" />
        </div>
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Market</label>
          <select id="editDefMarket" class="w-full px-3 py-2 border border-[#E5E7EB] rounded-md bg-white focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all">
            <option value="CAISO">CAISO</option>
            <option value="ERCOT">ERCOT</option>
            <option value="PJM">PJM</option>
          </select>
        </div>
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Location</label>
          <input type="text" id="editDefLocation" class="w-full px-3 py-2 border border-[#E5E7EB] rounded-md bg-white focus:border-[#3B82F6] focus:ring-2 focus:ring-[#3B82F6] focus:ring-opacity-50 outline-none transition-all" />
        </div>
      </div>
      <div class="px-6 py-4 border-t border-[#E5E7EB] bg-[#F9FAFB] flex justify-end gap-3">
        <button id="cancelEditDef" class="px-4 py-2 border border-[#E5E7EB] rounded-md text-[#6B7280] hover:bg-[#F3F4F6] font-medium transition-colors">Cancel</button>
        <button id="saveEditDef" class="px-4 py-2 bg-[#3B82F6] text-white rounded-md hover:bg-[#2563EB] font-medium transition-colors">Save</button>
      </div>
    </div>
  </div>

  <!-- Edit Instance Modal - Design System -->
  <div id="editInstModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-lg max-w-2xl w-full" style="box-shadow: 0 12px 30px rgba(0,0,0,0.1);">
      <div class="px-6 py-4 border-b border-[#E5E7EB] flex items-center justify-between">
        <h3 class="text-lg font-semibold text-[#1F2937]">Edit Instance</h3>
        <button id="closeEditInst" class="text-[#9CA3AF] hover:text-[#6B7280] transition-colors">âœ•</button>
      </div>
      <div class="px-6 py-4 grid grid-cols-2 gap-4">
        <input type="hidden" id="editInstId" />
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Version</label>
          <input type="text" id="editInstVersion" class="w-full px-3 py-2 border border-[#E5E7EB] rounded-md bg-white focus:border-[#10B981] focus:ring-2 focus:ring-[#10B981] focus:ring-opacity-50 outline-none transition-all" />
        </div>
        <div>
          <label class="block text-xs font-medium text-[#6B7280] uppercase tracking-wider mb-1">Status</label>
          <select id="editInstStatus" class="w-full px-3 py-2 border border-[#E5E7EB] rounded-md bg-white focus:border-[#10B981] focus:ring-2 focus:ring-[#10B981] focus:ring-opacity-50 outline-none transition-all">
            <option value="DRAFT">Draft</option>
            <option value="ACTIVE">Active</option>
            <option value="ARCHIVED">Archived</option>
          </select>
        </div>
      </div>
      <div class="px-6 py-4 border-t border-[#E5E7EB] bg-[#F9FAFB] flex justify-end gap-3">
        <button id="cancelEditInst" class="px-4 py-2 border border-[#E5E7EB] rounded-md text-[#6B7280] hover:bg-[#F3F4F6] font-medium transition-colors">Cancel</button>
        <button id="saveEditInst" class="px-4 py-2 bg-[#10B981] text-white rounded-md hover:bg-[#059669] font-medium transition-colors">Save</button>
      </div>
    </div>
  </div>
</Layout>

<script>
  let allDefs: any[] = [];
  let allInsts: any[] = [];
  let selectedDef: any = null;
  let selectedInst: any = null;

  function toast(msg: string, type: 'success' | 'error' = 'success') {
    const el = document.getElementById('toast')!;
    el.textContent = msg;
    el.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white font-medium ${type === 'success' ? 'bg-[#10B981]' : 'bg-[#EF4444]'}`;
    el.style.boxShadow = '0 12px 30px rgba(0,0,0,0.1)';
    el.classList.remove('hidden');
    setTimeout(() => el.classList.add('hidden'), 4000);
  }

  async function loadDefinitions() {
    try {
      const res = await fetch('/api/curves/definitions');
      allDefs = await res.json();
      renderDefinitions();
    } catch (e) {
      toast('Failed to load definitions', 'error');
    }
  }

  function renderDefinitions() {
    const container = document.getElementById('defList')!;
    const search = (document.getElementById('defSearch') as HTMLInputElement).value.toLowerCase();
    const sort = (document.getElementById('defSort') as HTMLSelectElement).value;

    let filtered = allDefs.filter(d => 
      d.curveName.toLowerCase().includes(search) ||
      d.market.toLowerCase().includes(search) ||
      d.location.toLowerCase().includes(search)
    );

    filtered.sort((a, b) => {
      if (sort === 'name') return a.curveName.localeCompare(b.curveName);
      if (sort === 'market') return a.market.localeCompare(b.market);
      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
    });

    container.innerHTML = filtered.map(d => `
      <div class="mb-2 p-3 border rounded-lg cursor-pointer transition-all hover:shadow-md ${selectedDef?.id === d.id ? 'bg-[#EFF6FF] border-[#3B82F6]' : 'bg-white border-[#E5E7EB]'}" data-def-id="${d.id}">
        <div class="font-semibold text-sm text-[#111827]">${d.curveName}</div>
        <div class="text-xs text-[#6B7280] mt-1 font-mono">${d.market} â€¢ ${d.location}</div>
        <div class="text-xs text-[#6B7280] mt-1 font-mono">${d.instanceCount || 0} instances</div>
      </div>
    `).join('');

    container.querySelectorAll('[data-def-id]').forEach(el => {
      el.addEventListener('click', () => {
        selectDefinition(allDefs.find(d => d.id == el.getAttribute('data-def-id')));
      });
    });
  }

  function selectDefinition(def: any) {
    selectedDef = def;
    selectedInst = null;
    renderDefinitions();
    loadInstances(def.id);
    showDefActions(def);
    (document.getElementById('instSearch') as HTMLInputElement).disabled = false;
    (document.getElementById('instSort') as HTMLSelectElement).disabled = false;
  }

  async function loadInstances(defId: number) {
    try {
      const res = await fetch(`/api/curves/instances?definitionId=${defId}`);
      const data = await res.json();
      allInsts = data.instances || [];
      renderInstances();
    } catch (e) {
      toast('Failed to load instances', 'error');
    }
  }

  function renderInstances() {
    const container = document.getElementById('instList')!;
    const search = (document.getElementById('instSearch') as HTMLInputElement).value.toLowerCase();
    
    let filtered = allInsts.filter(i =>
      i.instanceVersion.toLowerCase().includes(search) ||
      i.status?.toLowerCase().includes(search)
    );

    container.innerHTML = filtered.map(i => `
      <div class="mb-2 p-3 border rounded-lg cursor-pointer transition-all hover:shadow-md ${selectedInst?.id === i.id ? 'bg-[#ECFDF5] border-[#10B981]' : 'bg-white border-[#E5E7EB]'}" data-inst-id="${i.id}">
        <div class="font-semibold text-sm text-[#111827]">${i.instanceVersion}</div>
        <div class="text-xs text-[#6B7280] mt-1 font-mono">${i.status}</div>
        <div class="text-xs text-[#6B7280] mt-1 font-mono">${new Date(i.createdAt).toLocaleDateString()}</div>
      </div>
    `).join('');

    container.querySelectorAll('[data-inst-id]').forEach(el => {
      el.addEventListener('click', () => {
        selectInstance(allInsts.find(i => i.id == el.getAttribute('data-inst-id')));
      });
    });
  }

  function selectInstance(inst: any) {
    selectedInst = inst;
    renderInstances();
    showInstActions(inst);
  }

  function showDefActions(def: any) {
    const panel = document.getElementById('actionPanel')!;
    panel.innerHTML = `
      <div class="space-y-4">
        <div class="p-4 bg-[#EFF6FF] rounded-lg border border-[#3B82F6]">
          <h4 class="font-semibold text-[#1F2937] mb-3">Definition: ${def.curveName}</h4>
          <div class="text-xs text-[#6B7280] space-y-2 font-mono">
            <div class="flex justify-between"><span class="font-medium uppercase tracking-wider">ID:</span><span>${def.id}</span></div>
            <div class="flex justify-between"><span class="font-medium uppercase tracking-wider">Market:</span><span>${def.market}</span></div>
            <div class="flex justify-between"><span class="font-medium uppercase tracking-wider">Location:</span><span>${def.location}</span></div>
            <div class="flex justify-between"><span class="font-medium uppercase tracking-wider">Instances:</span><span>${def.instanceCount || 0}</span></div>
          </div>
        </div>
        <button onclick="editDef(${def.id})" class="w-full px-4 py-2 bg-[#3B82F6] text-white rounded-md hover:bg-[#2563EB] font-medium transition-colors">Edit Definition</button>
        <button onclick="deleteDef(${def.id}, '${def.curveName}')" class="w-full px-4 py-2 bg-[#EF4444] text-white rounded-md hover:bg-[#DC2626] font-medium transition-colors">Delete Definition</button>
      </div>
    `;
  }

  function showInstActions(inst: any) {
    const panel = document.getElementById('actionPanel')!;
    panel.innerHTML = `
      <div class="space-y-4">
        <div class="p-4 bg-[#EFF6FF] rounded-lg border border-[#3B82F6]">
          <h4 class="font-semibold text-[#1F2937] mb-2">Definition</h4>
          <div class="text-sm text-[#111827] font-mono">${selectedDef.curveName}</div>
        </div>
        <div class="p-4 bg-[#ECFDF5] rounded-lg border border-[#10B981]">
          <h4 class="font-semibold text-[#1F2937] mb-3">Instance: ${inst.instanceVersion}</h4>
          <div class="text-xs text-[#6B7280] space-y-2 font-mono">
            <div class="flex justify-between"><span class="font-medium uppercase tracking-wider">ID:</span><span>${inst.id}</span></div>
            <div class="flex justify-between"><span class="font-medium uppercase tracking-wider">Status:</span><span>${inst.status}</span></div>
            <div class="flex justify-between"><span class="font-medium uppercase tracking-wider">Period:</span><span>${inst.deliveryPeriodStart.split('T')[0]} to ${inst.deliveryPeriodEnd.split('T')[0]}</span></div>
          </div>
        </div>
        <button onclick="editInst(${inst.id})" class="w-full px-4 py-2 bg-[#10B981] text-white rounded-md hover:bg-[#059669] font-medium transition-colors">Edit Instance</button>
        <button onclick="downloadInstData(${inst.id})" class="w-full px-4 py-2 bg-[#8B5CF6] text-white rounded-md hover:bg-[#7C3AED] font-medium transition-colors">Download Data</button>
        <button onclick="deleteInst(${inst.id}, '${inst.instanceVersion}')" class="w-full px-4 py-2 bg-[#EF4444] text-white rounded-md hover:bg-[#DC2626] font-medium transition-colors">Delete Instance</button>
      </div>
    `;
  }

  async function deleteDef(id: number, name: string) {
    if (!confirm(`Delete "${name}"? This will delete all instances and data.`)) return;
    try {
      const res = await fetch('/api/admin/edit-curve-definition', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id, performedBy: 'Admin' })
      });
      if (res.ok) {
        toast('Definition deleted');
        await loadDefinitions();
        selectedDef = null;
        document.getElementById('actionPanel')!.innerHTML = '<div class="text-center text-gray-500 text-sm py-8">Select an item</div>';
      } else {
        toast('Delete failed', 'error');
      }
    } catch (e) {
      toast('Error deleting', 'error');
    }
  }

  async function deleteInst(id: number, version: string) {
    if (!confirm(`Delete instance "${version}"? This will delete all data.`)) return;
    try {
      const res = await fetch('/api/admin/delete-curve-instance', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ instanceId: id })
      });
      if (res.ok) {
        toast('Instance deleted');
        await loadInstances(selectedDef.id);
        selectedInst = null;
        showDefActions(selectedDef);
      } else {
        toast('Delete failed', 'error');
      }
    } catch (e) {
      toast('Error deleting', 'error');
    }
  }

  async function downloadInstData(instId: number) {
    try {
      const res = await fetch(`/api/curves/${instId}/data`);
      const data = await res.json();
      if (data.length === 0) {
        toast('No data to download', 'error');
        return;
      }
      const rows = [];
      for (const point of data) {
        const ts = point.flow_date_start;
        if (point.valueP5 !== null) rows.push(`${ts},${point.valueP5},5,$/MWh`);
        if (point.valueP25 !== null) rows.push(`${ts},${point.valueP25},25,$/MWh`);
        if (point.valueP50 !== null) rows.push(`${ts},${point.valueP50},50,$/MWh`);
        if (point.valueP75 !== null) rows.push(`${ts},${point.valueP75},75,$/MWh`);
        if (point.valueP95 !== null) rows.push(`${ts},${point.valueP95},95,$/MWh`);
      }
      const csv = ['timestamp,value,pvalue,units', ...rows].join('\n');
      const blob = new Blob([csv], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `instance_${instId}_data.csv`;
      a.click();
      URL.revokeObjectURL(url);
      toast('Data downloaded');
    } catch (e) {
      toast('Download failed', 'error');
    }
  }

  function editDef(id: number) {
    toast('Edit feature coming soon');
  }

  function editInst(id: number) {
    toast('Edit feature coming soon');
  }

  (window as any).editDef = editDef;
  (window as any).editInst = editInst;
  (window as any).deleteDef = deleteDef;
  (window as any).deleteInst = deleteInst;
  (window as any).downloadInstData = downloadInstData;

  document.getElementById('defSearch')?.addEventListener('input', renderDefinitions);
  document.getElementById('defSort')?.addEventListener('change', renderDefinitions);
  document.getElementById('instSearch')?.addEventListener('input', renderInstances);
  document.getElementById('instSort')?.addEventListener('change', renderInstances);

  document.getElementById('clearFilters')?.addEventListener('click', () => {
    (document.getElementById('globalMarket') as HTMLSelectElement).value = '';
    (document.getElementById('globalLocation') as HTMLInputElement).value = '';
    (document.getElementById('globalProduct') as HTMLInputElement).value = '';
    (document.getElementById('globalCurveType') as HTMLSelectElement).value = '';
    (document.getElementById('globalStatus') as HTMLSelectElement).value = '';
    renderDefinitions();
  });

  loadDefinitions();
</script>
</Layout>

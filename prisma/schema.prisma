generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model caiso_long_term_forecasts_annual {
  FlowDateStart                BigInt?
  Term                         String?
  MarkDate                     String?
  MarkType                     String?
  MarkCase                     String?
  MarkFundamentalsDesc         String?
  MarkModelTypeDesc            String?
  MarkDispatchOptimizationDesc String?
  GridStorPurpose              String?
  Value                        Float?
  Units                        String?
  TableCreationTime            String?
  MarkLocation                 String?
  MarkMarket                   String?
  CurveCreator                 String?
  CurrentMark                  BigInt?
  valueType                    String?

  @@ignore
}

model curve_definitions {
  curve_id                        Int               @id @default(autoincrement())
  mark_type                       String?           @db.VarChar
  mark_case                       String?           @db.VarChar
  mark_date                       DateTime?         @db.Timestamp(6)
  location                        String?           @db.VarChar
  market                          String?           @db.VarChar
  curve_creator                   String?           @db.VarChar
  mark_fundamentals_desc          String?           @db.VarChar
  mark_model_type_desc            String?           @db.VarChar
  mark_dispatch_optimization_desc String?           @db.VarChar
  gridstor_purpose                String?           @db.VarChar
  value_type                      String?           @db.VarChar
  created_at                      DateTime?         @default(now()) @db.Timestamp(6)
  curve_start_date                DateTime?         @db.Timestamp(6)
  curve_end_date                  DateTime?         @db.Timestamp(6)
  granularity                     String?           @db.VarChar
  display_curves                  display_curves[]
  price_forecasts                 price_forecasts[]

  @@index([curve_start_date, curve_end_date], map: "idx_curve_dates")
  @@index([location], map: "idx_curve_location")
  @@index([mark_case], map: "idx_curve_mark_case")
  @@index([mark_date], map: "idx_curve_mark_date")
  @@index([mark_type], map: "idx_curve_mark_type")
  @@index([market], map: "idx_curve_market")
  @@index([market, location], map: "idx_curve_market_location")
}

model display_curves {
  display_id        Int
  curve_id          Int
  display_order     Int?
  display_color     String?           @db.VarChar(50)
  display_label     String?           @db.VarChar(100)
  created_at        DateTime?         @default(now()) @db.Timestamp(6)
  curve_definitions curve_definitions @relation(fields: [curve_id], references: [curve_id], onDelete: NoAction, onUpdate: NoAction)
  website_displays  website_displays  @relation(fields: [display_id], references: [display_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([display_id, curve_id])
  @@index([curve_id], map: "idx_display_curves_curve_id")
  @@index([display_id], map: "idx_display_curves_display_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ercot_long_term_forecasts_annual {
  FlowDateStart                BigInt?
  Term                         String?
  MarkDate                     String?
  MarkType                     String?
  MarkCase                     String?
  MarkFundamentalsDesc         String?
  MarkModelTypeDesc            String?
  MarkDispatchOptimizationDesc String?
  GridStorPurpose              String?
  Value                        Float?
  Units                        String?
  TableCreationTime            String?
  MarkLocation                 String?
  MarkMarket                   String?
  CurveCreator                 String?
  CurrentMark                  BigInt?
  valueType                    String?

  @@ignore
}

model price_forecasts {
  id                Int                         @id @default(autoincrement())
  curve_id          Int?
  flow_date_start   DateTime?                   @db.Timestamp(6)
  granularity       Unsupported("granularity")?
  value             Float?
  units             String?                     @db.VarChar
  location          String?                     @db.VarChar
  mark_case         String?                     @db.VarChar
  curve_creator     String?                     @db.VarChar
  value_type        String?                     @db.VarChar
  mark_date         DateTime?                   @db.Timestamp(6)
  curve_definitions curve_definitions?          @relation(fields: [curve_id], references: [curve_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([curve_creator], map: "idx_price_creator")
  @@index([curve_id, flow_date_start], map: "idx_price_curve_date")
  @@index([curve_id], map: "idx_price_curve_id")
  @@index([flow_date_start], map: "idx_price_flow_date")
  @@index([location], map: "idx_price_location")
  @@index([mark_case], map: "idx_price_mark_case")
  @@index([mark_date], map: "idx_price_mark_date")
  @@index([value_type], map: "idx_price_value_type")
}

model website_display {
  display_id   Int       @id @default(autoincrement())
  display_name String    @db.VarChar
  description  String?   @db.VarChar
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
}

model website_displays {
  display_id     Int              @id @default(autoincrement())
  display_name   String           @unique @db.VarChar(100)
  description    String?          @db.VarChar
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  display_curves display_curves[]
}

// Curve Schedule Model
model CurveSchedule {
  id                Int                @id @default(autoincrement()) @map("schedule_id")
  curvePattern      String             @map("curve_pattern") @db.VarChar(100)
  location          String             @db.VarChar(100)
  sourceType        String             @map("source_type") @db.VarChar(50)
  provider          String?            @db.VarChar(100)
  granularity       String             @db.VarChar(20)
  modelType         String?            @map("model_type") @db.VarChar(50)
  updateFrequency   String             @map("update_frequency") @db.VarChar(50)
  updateDay         Int?               @map("update_day")
  responsibleTeam   String             @map("responsible_team") @db.VarChar(100)
  description       String?            @db.Text
  importance        Int
  lastReceivedDate  DateTime?          @map("last_received_date") @db.Date
  nextExpectedDate  DateTime?          @map("next_expected_date") @db.Date
  providerContact   String?            @map("provider_contact") @db.VarChar(100)
  lastUpdatedDate   DateTime?          @map("last_updated_date") @db.Date
  nextUpdateDue     DateTime?          @map("next_update_due") @db.Date
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  
  // Relations
  updateHistory     CurveUpdateHistory[]
  receipts          CurveReceipt[]
  comments          CurveComment[]

  @@map("curve_schedule")
}

// Curve Update History Model
model CurveUpdateHistory {
  id          Int           @id @default(autoincrement()) @map("history_id")
  scheduleId  Int           @map("schedule_id")
  updateDate  DateTime      @map("update_date")
  updatedBy   String        @map("updated_by") @db.VarChar(100)
  notes       String?       @db.Text
  status      String        @db.VarChar(50)
  fileReference String?     @map("file_reference") @db.VarChar(255)
  createdAt   DateTime      @default(now()) @map("created_at")
  
  // Relations
  schedule    CurveSchedule @relation(fields: [scheduleId], references: [id])

  @@map("curve_update_history")
}

// Curve Receipt Model
model CurveReceipt {
  id              Int           @id @default(autoincrement()) @map("receipt_id")
  scheduleId      Int           @map("schedule_id")
  receivedDate    DateTime      @map("received_date") @db.Date
  receivedBy      String        @map("received_by") @db.VarChar(100)
  providerContact String?       @map("provider_contact") @db.VarChar(100)
  fileReference   String?       @map("file_reference") @db.VarChar(255)
  processingStatus String       @map("processing_status") @db.VarChar(50)
  notes           String?       @db.Text
  createdAt       DateTime      @default(now()) @map("created_at")
  
  // Relations
  schedule        CurveSchedule @relation(fields: [scheduleId], references: [id])

  @@map("curve_receipt")
}

// Curve Comment Model
model CurveComment {
  id          Int           @id @default(autoincrement()) @map("comment_id")
  scheduleId  Int           @map("schedule_id")
  userName    String        @map("user_name") @db.VarChar(100)
  commentText String        @map("comment_text") @db.Text
  commentDate DateTime      @default(now()) @map("comment_date")
  isResolved  Boolean       @default(false) @map("is_resolved")
  createdAt   DateTime      @default(now()) @map("created_at")
  
  // Relations
  schedule    CurveSchedule @relation(fields: [scheduleId], references: [id])

  @@map("curve_comment")
}

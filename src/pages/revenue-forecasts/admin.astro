---
import Layout from '../../layouts/Layout.astro';
import { query } from '../../lib/db';
import { prisma } from '../../lib/prisma';

// Get recent curve activity with instance IDs
let recentActivity = [];
try {
  const result = await query(`
    SELECT 
      ci.id as "instanceId",
      cd."curveName",
      ci."instanceVersion",
      ci.status,
      ci."createdAt",
      ci."createdBy",
      cd.market,
      cd.location,
      cd.units
    FROM "Forecasts"."CurveInstance" ci
    JOIN "Forecasts"."CurveDefinition" cd ON ci."curveDefinitionId" = cd.id
    ORDER BY ci."createdAt" DESC
    LIMIT 10
  `);
  recentActivity = result.rows;
} catch (error) {
  console.error('Error fetching activity:', error);
}

// Get the current month's start and end dates (with URL param support)
const urlParams = new URL(Astro.request.url).searchParams;
const yearParam = urlParams.get('year');
const monthParam = urlParams.get('month');

const today = new Date();
const currentYear = yearParam ? parseInt(yearParam) : today.getFullYear();
const currentMonth = monthParam ? parseInt(monthParam) - 1 : today.getMonth();

const displayDate = new Date(currentYear, currentMonth, 1);
const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);

// Fetch all curve schedules with their definitions for the calendar
let schedules = [];
let schedulesByDate: Record<string, any[]> = {};
try {
  schedules = await prisma.curveSchedule.findMany({
    where: {
      isActive: true
    },
    select: {
      id: true,
      importance: true,
      frequency: true,
      curveDefinition: {
        select: {
          curveName: true,
          location: true,
          market: true
        }
      },
      scheduleRuns: {
        where: {
          runDate: {
            gte: firstDayOfMonth,
            lte: lastDayOfMonth
          }
        },
        select: {
          runDate: true,
          status: true
        },
        orderBy: {
          runDate: 'asc'
        }
      }
    }
  });

  // Group schedules by their run dates
  schedules.forEach((schedule: any) => {
    schedule.scheduleRuns.forEach((run: any) => {
      const dateKey = run.runDate.toISOString().split('T')[0];
      if (!schedulesByDate[dateKey]) {
        schedulesByDate[dateKey] = [];
      }
      schedulesByDate[dateKey].push({
        id: schedule.id,
        name: schedule.curveDefinition.curveName,
        location: schedule.curveDefinition.location,
        market: schedule.curveDefinition.market,
        importance: schedule.importance,
        status: run.status,
        type: 'scheduled'
      });
    });
  });
} catch (error) {
  console.error('Error fetching curve schedule:', error);
}

// Fetch recently uploaded curves for current month
try {
  const uploadedCurves = await prisma.curveInstance.findMany({
    where: {
      createdAt: {
        gte: firstDayOfMonth,
        lte: lastDayOfMonth
      }
    },
    include: {
      curveDefinition: {
        select: {
          curveName: true,
          location: true,
          market: true
        }
      }
    },
    orderBy: {
      createdAt: 'desc'
    }
  });

  // Add uploaded curves to calendar
  uploadedCurves.forEach(curve => {
    const dateKey = curve.createdAt.toISOString().split('T')[0];
    if (!schedulesByDate[dateKey]) {
      schedulesByDate[dateKey] = [];
    }
    schedulesByDate[dateKey].push({
      id: curve.id,
      name: curve.curveDefinition.curveName,
      location: curve.curveDefinition.location,
      market: curve.curveDefinition.market,
      instanceVersion: curve.instanceVersion,
      status: curve.status,
      type: 'uploaded'
    });
  });
} catch (error) {
  console.error('Error fetching uploaded curves:', error);
}

// Get all dates in the current month
const datesInMonth = Array.from(
  { length: lastDayOfMonth.getDate() },
  (_, i) => new Date(currentYear, currentMonth, i + 1)
);

// Get the day of week for the first day (0 = Sunday)
const firstDayOfWeek = firstDayOfMonth.getDay();

// Add empty cells for days before the first day of the month
const calendarDays = Array(firstDayOfWeek).fill(null).concat(datesInMonth);

// Function to get the importance class
function getImportanceClass(importance: number): string {
  switch (importance) {
    case 1: return 'bg-red-100 border-red-200';
    case 2: return 'bg-orange-100 border-orange-200';
    case 3: return 'bg-yellow-100 border-yellow-200';
    default: return 'bg-gray-100 border-gray-200';
  }
}

// Function to get status badge color
function getStatusClass(status: string): string {
  switch (status) {
    case 'COMPLETED': return 'bg-green-100 text-green-800';
    case 'PENDING': return 'bg-yellow-100 text-yellow-800';
    case 'FAILED': return 'bg-red-100 text-red-800';
    default: return 'bg-gray-100 text-gray-800';
  }
}
---

<Layout title="Revenue Forecast Admin">
  <!-- SECTION: LATEST CURVE ACTIVITY -->
  <section class="mb-12">
    <div class="mb-6">
      <h1 class="text-3xl font-bold text-[#2A2A2A] mb-2" style="letter-spacing: -0.01em;">Latest Curve Activity</h1>
      <p class="text-base text-[#6B7280]">Track recent curve updates and activity across all markets and locations</p>
    </div>
    
    <!-- Activity Log -->
    <div class="bg-white rounded-lg p-6 mb-6 accent-border-blue" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
      <div class="space-y-2">
        {recentActivity.slice(0, 5).map((activity, index) => (
          <div class="border-b border-[#F3F4F6] last:border-0">
            <div 
              class="flex items-center justify-between py-3 cursor-pointer hover:bg-[#F9FAFB] transition-colors rounded px-2"
              onclick={`toggleActivity(${activity.instanceId}, ${index})`}
            >
              <div class="flex-1 flex items-center gap-2">
                <svg id={`expand-icon-${index}`} class="w-4 h-4 text-[#9CA3AF] transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                </svg>
                <div>
                  <div class="font-medium text-[#111827] text-sm">{activity.curveName}</div>
                  <div class="text-xs text-[#6B7280] mt-1 font-mono">{activity.instanceVersion} • {activity.market} • {activity.location}</div>
                </div>
              </div>
              <div class="text-right">
                <div class="text-xs text-[#6B7280] mb-1">{new Date(activity.createdAt).toLocaleDateString()}</div>
                <span class={`inline-flex items-center px-2 py-0.5 rounded text-xs font-mono ${activity.status === 'ACTIVE' ? 'bg-[#ECFDF5] text-[#059669]' : 'bg-[#F9FAFB] text-[#6B7280]'}`}>
                  {activity.status}
                </span>
              </div>
            </div>
            
            <!-- Expandable Data Preview -->
            <div id={`activity-data-${index}`} class="hidden px-2 pb-3 pt-1">
              <div class="bg-[#F9FAFB] rounded-lg p-3 border border-[#E5E7EB]">
                <div class="flex items-center justify-between mb-2">
                  <h4 class="text-xs font-semibold text-[#374151]">First 5 Data Points</h4>
                  <span class="text-xs text-[#6B7280]" id={`data-loading-${index}`}>Loading...</span>
                </div>
                <div class="overflow-x-auto">
                  <table class="min-w-full text-xs" id={`data-table-${index}`}>
                    <thead class="bg-white">
                      <tr>
                        <th class="px-2 py-1.5 text-left font-medium text-[#6B7280]">Timestamp</th>
                        <th class="px-2 py-1.5 text-left font-medium text-[#6B7280]">Type</th>
                        <th class="px-2 py-1.5 text-left font-medium text-[#6B7280]">Commodity</th>
                        <th class="px-2 py-1.5 text-left font-medium text-[#6B7280]">Scenario</th>
                        <th class="px-2 py-1.5 text-right font-medium text-[#6B7280]">Value</th>
                        <th class="px-2 py-1.5 text-left font-medium text-[#6B7280]">Units</th>
                      </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-[#E5E7EB]">
                      <!-- Data will be loaded here -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
      <a href="/admin/curve-logs" class="mt-4 inline-block text-sm text-[#3B82F6] hover:text-[#2563EB] font-medium">View All Activity →</a>
    </div>
  </section>

  <!-- SECTION: CURVE SCHEDULE CALENDAR -->
  <section class="mb-12">
    <div class="mb-6">
      <h2 class="text-2xl font-bold text-[#2A2A2A] mb-2" style="letter-spacing: -0.01em;">Curve Schedule Calendar</h2>
      <p class="text-base text-[#6B7280]">View and manage scheduled curve updates and delivery periods</p>
    </div>

    <!-- Full Calendar View -->
    <div class="bg-white rounded-lg shadow-md overflow-hidden accent-border-purple" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
      <div class="p-6 border-b border-[#E5E7EB]">
        <div class="flex justify-between items-center">
          <div class="flex items-center gap-4">
            <button 
              id="prevMonth" 
              class="p-2 hover:bg-[#F3F4F6] rounded-md transition-colors"
              title="Previous Month"
            >
              <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
              </svg>
            </button>
          <h3 id="currentMonth" class="text-lg font-semibold text-[#1F2937] min-w-[180px] text-center">
            {displayDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
          </h3>
            <button 
              id="nextMonth" 
              class="p-2 hover:bg-[#F3F4F6] rounded-md transition-colors"
              title="Next Month"
            >
              <svg class="w-5 h-5 text-[#6B7280]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
              </svg>
            </button>
          </div>
          <a href="/curve-schedule" class="inline-flex items-center px-4 py-2 bg-[#8B5CF6] text-white text-sm rounded-md hover:bg-[#7C3AED] transition-colors font-medium">
            New/Manage Schedules
          </a>
        </div>
      </div>

      <div class="grid grid-cols-7 gap-px bg-[#E5E7EB] border-b border-[#E5E7EB]">
        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => (
          <div class="bg-[#F9FAFB] p-3 text-center text-sm font-medium text-[#6B7280]">
            {day}
          </div>
        ))}
      </div>

      <div id="calendarGrid" class="grid grid-cols-7 gap-px bg-[#E5E7EB]" data-schedules={JSON.stringify(schedulesByDate)}>
        {calendarDays.map((date) => (
          <div 
            class={`bg-white min-h-[120px] p-2 ${
              date && date.toISOString().split('T')[0] === today.toISOString().split('T')[0]
                ? 'ring-2 ring-inset ring-[#3B82F6] bg-[#EFF6FF]'
                : ''
            }`}
            data-date={date ? date.toISOString().split('T')[0] : ''}
          >
            {date && (
              <div>
                <div class="flex items-center justify-between mb-2">
                  <div class="font-medium text-sm text-[#111827]">
                    {date.getDate()}
                  </div>
                  <button 
                    class="add-note-btn p-0.5 hover:bg-[#E5E7EB] rounded transition-colors group"
                    data-date={date.toISOString().split('T')[0]}
                    title="Add note"
                    onclick="event.stopPropagation(); openNoteModal(this.dataset.date);"
                  >
                    <svg class="w-3.5 h-3.5 text-[#8B5CF6] group-hover:text-[#7C3AED]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                    </svg>
                  </button>
                </div>
                
                <!-- Notes container -->
                <div class="notes-container space-y-1 mb-1" data-date={date.toISOString().split('T')[0]}>
                </div>
                
                <!-- Schedules -->
                <div class="space-y-1">
                  {(() => {
                    const dateKey = date.toISOString().split('T')[0];
                    const items = schedulesByDate[dateKey] || [];
                    const maxVisible = 3; // Show max 3 items initially
                    const visibleItems = items.slice(0, maxVisible);
                    const hasMore = items.length > maxVisible;
                    const moreCount = items.length - maxVisible;
                    
                    return (
                      <>
                        {visibleItems.map((schedule: any) => (
                          <div
                            class={`block text-xs p-1.5 rounded border ${
                              schedule.type === 'uploaded' 
                                ? 'bg-[#EFF6FF] border-[#3B82F6]' 
                                : getImportanceClass(schedule.importance)
                            } hover:opacity-75 transition-opacity`}
                            title={schedule.type === 'uploaded' ? `Uploaded: ${schedule.instanceVersion}` : 'Scheduled Update'}
                          >
                            <div class="flex items-center gap-1">
                              <span class="text-xs">
                                {schedule.type === 'uploaded' ? '⬆️' : '📅'}
                              </span>
                              <div class="font-medium truncate flex-1" title={`${schedule.name} - ${schedule.location}`}>
                                {schedule.name}
                              </div>
                            </div>
                            <div class="flex items-center justify-between mt-0.5">
                              <span class="text-[0.65rem] text-gray-600 truncate">{schedule.location}</span>
                              <span class={`text-[0.6rem] px-1 py-0.5 rounded ${getStatusClass(schedule.status)}`}>
                                {schedule.status}
                              </span>
                            </div>
                          </div>
                        ))}
                        {hasMore && (
                          <button
                            class="w-full text-xs p-1.5 rounded border border-gray-300 bg-gray-50 hover:bg-gray-100 text-gray-700 font-medium transition-colors"
                            onclick={`showAllForDate('${dateKey}')`}
                            type="button"
                          >
                            +{moreCount} more
                          </button>
                        )}
                      </>
                    );
                  })()}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      <!-- Calendar Legend -->
      <div class="p-4 bg-[#F9FAFB] border-t border-[#E5E7EB]">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="flex items-center gap-4">
            <h4 class="text-sm font-medium text-[#374151]">📅 Scheduled:</h4>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded bg-red-100 border border-red-200"></div>
              <span class="text-xs text-[#6B7280]">High</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded bg-orange-100 border border-orange-200"></div>
              <span class="text-xs text-[#6B7280]">Medium</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded bg-yellow-100 border border-yellow-200"></div>
              <span class="text-xs text-[#6B7280]">Low</span>
            </div>
          </div>
          <div class="flex items-center gap-4">
            <h4 class="text-sm font-medium text-[#374151]">⬆️ Uploaded:</h4>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded bg-[#EFF6FF] border border-[#3B82F6]"></div>
              <span class="text-xs text-[#6B7280]">Auto-populated from uploads</span>
            </div>
          </div>
        </div>
        <p class="text-xs text-[#6B7280] mt-2">Uploaded curves appear automatically on calendar without manual scheduling</p>
      </div>
    </div>
  </section>

  <!-- SECTION: CURVE MANAGEMENT -->
  <section class="mb-12">
    <div class="mb-8">
      <h2 class="text-2xl font-bold text-[#2A2A2A] mb-2" style="letter-spacing: -0.01em;">Curve Management</h2>
      <p class="text-base text-[#6B7280]">Upload and manage curve definitions and instances</p>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <a href="/admin/upload" class="bg-white rounded-lg p-6 accent-border-blue transition-all duration-200 hover:-translate-y-1" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div class="flex items-center gap-3 mb-4">
          <svg class="w-6 h-6 text-[#3B82F6]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
          </svg>
          <h3 class="text-lg font-semibold text-[#1F2937]">Upload New Curves</h3>
        </div>
        <p class="text-[#6B7280] text-sm">Create curve definitions, instances, and upload price data</p>
      </a>

      <a href="/admin/inventory" class="bg-white rounded-lg p-6 accent-border-green transition-all duration-200 hover:-translate-y-1" style="box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <div class="flex items-center gap-3 mb-4">
          <svg class="w-6 h-6 text-[#10B981]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"/>
          </svg>
          <h3 class="text-lg font-semibold text-[#1F2937]">Manage Inventory</h3>
        </div>
        <p class="text-[#6B7280] text-sm">View, edit, and delete curves, instances, and data</p>
      </a>
    </div>
  </section>

  <!-- Toast Notification -->
  <div id="toast" class="hidden fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg text-white"></div>

  <!-- Show All Curves Modal -->
  <div id="showAllCurvesModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-lg max-w-2xl w-full max-h-[80vh] overflow-hidden flex flex-col">
      <div class="px-6 py-4 border-b border-[#E5E7EB] flex items-center justify-between">
        <div>
          <h3 class="text-lg font-semibold text-[#1F2937]">All Curves</h3>
          <p id="allCurvesDate" class="text-sm text-[#6B7280] mt-1"></p>
        </div>
        <button id="closeAllCurves" class="text-[#9CA3AF] hover:text-[#6B7280]">✕</button>
      </div>
      <div id="allCurvesList" class="px-6 py-4 overflow-y-auto flex-1">
        <!-- Items will be dynamically added here -->
      </div>
    </div>
  </div>

  <!-- Note Modal -->
  <div id="noteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
      <div class="p-6 border-b border-[#E5E7EB]">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-[#1F2937]">Add Note</h3>
          <button onclick="closeNoteModal()" class="text-[#6B7280] hover:text-[#374151] transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
        <p id="noteModalDate" class="text-sm text-[#6B7280] mt-1"></p>
      </div>
      <div class="p-6">
        <textarea 
          id="noteTextarea" 
          rows="4" 
          class="w-full border border-[#E5E7EB] rounded-md px-3 py-2 text-sm text-[#111827] focus:border-[#8B5CF6] focus:ring-2 focus:ring-[#8B5CF6] focus:ring-opacity-50 outline-none resize-none"
          placeholder="Enter your note here..."
        ></textarea>
      </div>
      <div class="p-6 border-t border-[#E5E7EB] flex justify-end gap-3">
        <button 
          onclick="closeNoteModal()" 
          class="px-4 py-2 text-sm font-medium text-[#6B7280] hover:text-[#374151] transition-colors"
        >
          Cancel
        </button>
        <button 
          onclick="saveNote()" 
          class="px-4 py-2 text-sm font-medium bg-[#8B5CF6] text-white rounded-md hover:bg-[#7C3AED] transition-colors"
        >
          Save Note
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Declare global types
  declare global {
    interface Window {
      toggleActivity: (instanceId: number, index: number) => Promise<void>;
      openNoteModal: (date: string) => void;
      closeNoteModal: () => void;
      saveNote: () => void;
      deleteNote: (date: string, timestamp: number) => void;
    }
  }

  // Smooth scroll to sections
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (this: HTMLAnchorElement, e: Event) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute('href')!);
      if (target) {
        target.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });
  });

  // Track expanded activities to avoid re-fetching
  const expandedActivities = new Set<number>();

  // Toggle activity data preview
  async function toggleActivity(instanceId: number, index: number) {
    const dataDiv = document.getElementById(`activity-data-${index}`);
    const icon = document.getElementById(`expand-icon-${index}`);
    
    if (!dataDiv || !icon) return;
    
    // Toggle visibility
    const isExpanding = dataDiv.classList.contains('hidden');
    dataDiv.classList.toggle('hidden');
    
    // Rotate icon
    if (isExpanding) {
      icon.style.transform = 'rotate(90deg)';
    } else {
      icon.style.transform = 'rotate(0deg)';
      return; // Don't fetch again when collapsing
    }
    
    // Fetch data if not already loaded
    if (!expandedActivities.has(instanceId)) {
      try {
        const response = await fetch(`/api/curves/instance/${instanceId}/preview`);
        const result = await response.json();
        
        const loadingSpan = document.getElementById(`data-loading-${index}`);
        const tbody = document.querySelector(`#data-table-${index} tbody`);
        
        if (!tbody) return;
        
        if (result.success && result.data && result.data.length > 0) {
          tbody.innerHTML = result.data.map((row: any) => `
            <tr class="hover:bg-[#F9FAFB]">
              <td class="px-2 py-1.5 text-left text-[#374151]">${new Date(row.timestamp).toLocaleDateString()}</td>
              <td class="px-2 py-1.5 text-left text-[#374151]"><span class="px-2 py-0.5 bg-blue-100 text-blue-800 rounded text-xs">${row.curveType || '-'}</span></td>
              <td class="px-2 py-1.5 text-left text-[#374151]"><span class="px-2 py-0.5 bg-green-100 text-green-800 rounded text-xs">${row.commodity || '-'}</span></td>
              <td class="px-2 py-1.5 text-left text-[#374151]"><span class="px-2 py-0.5 bg-purple-100 text-purple-800 rounded text-xs">${row.scenario || '-'}</span></td>
              <td class="px-2 py-1.5 text-right text-[#111827] font-semibold">${row.value !== null && row.value !== undefined ? row.value.toFixed(2) : '-'}</td>
              <td class="px-2 py-1.5 text-left text-[#6B7280]">${row.units || '-'}</td>
            </tr>
          `).join('');
          
          if (loadingSpan) {
            loadingSpan.textContent = `${result.count} rows`;
          }
        } else {
          tbody.innerHTML = '<tr><td colspan="6" class="px-2 py-2 text-center text-[#6B7280]">No data available</td></tr>';
          if (loadingSpan) {
            loadingSpan.textContent = 'No data';
          }
        }
        
        expandedActivities.add(instanceId);
      } catch (error) {
        console.error('Error fetching preview data:', error);
        const tbody = document.querySelector(`#data-table-${index} tbody`);
        const loadingSpan = document.getElementById(`data-loading-${index}`);
        if (tbody) {
          tbody.innerHTML = '<tr><td colspan="6" class="px-2 py-2 text-center text-red-500">Error loading data</td></tr>';
        }
        if (loadingSpan) {
          loadingSpan.textContent = 'Error';
        }
      }
    }
  }

  // Make function available globally
  window.toggleActivity = toggleActivity;

  // Show all curves for a specific date
  (window as any).showAllForDate = function(dateKey: string) {
    const calendarGrid = document.getElementById('calendarGrid');
    const schedulesData = calendarGrid ? JSON.parse(calendarGrid.getAttribute('data-schedules') || '{}') : {};
    const items = schedulesData[dateKey] || [];
    const dateObj = new Date(dateKey + 'T00:00:00');
    const dateDisplay = dateObj.toLocaleDateString('en-US', { 
      weekday: 'long', 
      month: 'long', 
      day: 'numeric',
      year: 'numeric'
    });
    
    const dateDisplayEl = document.getElementById('allCurvesDate');
    const listEl = document.getElementById('allCurvesList');
    
    if (dateDisplayEl && listEl) {
      dateDisplayEl.textContent = dateDisplay;
      
      listEl.innerHTML = items.map((schedule: any) => `
        <div class="mb-2 p-3 rounded-lg border ${
          schedule.type === 'uploaded' 
            ? 'bg-blue-50 border-blue-200' 
            : schedule.importance === 1 ? 'bg-red-50 border-red-200' :
              schedule.importance === 2 ? 'bg-orange-50 border-orange-200' :
              'bg-yellow-50 border-yellow-200'
        }">
          <div class="flex items-center gap-2 mb-1">
            <span class="text-base">${schedule.type === 'uploaded' ? '⬆️' : '📅'}</span>
            <div class="font-semibold text-sm text-gray-900">${schedule.name}</div>
          </div>
          <div class="text-xs text-gray-600 ml-6">
            <div>📍 ${schedule.location} • ${schedule.market || 'N/A'}</div>
            ${schedule.type === 'uploaded' ? `<div>Version: ${schedule.instanceVersion}</div>` : ''}
            <div class="mt-1">
              <span class="inline-block px-2 py-0.5 rounded text-xs font-medium ${
                schedule.status === 'COMPLETED' ? 'bg-green-100 text-green-800' :
                schedule.status === 'ACTIVE' ? 'bg-green-100 text-green-800' :
                schedule.status === 'PENDING' ? 'bg-yellow-100 text-yellow-800' :
                schedule.status === 'FAILED' ? 'bg-red-100 text-red-800' :
                'bg-gray-100 text-gray-800'
              }">
                ${schedule.status}
              </span>
            </div>
          </div>
        </div>
      `).join('');
    }
    
    document.getElementById('showAllCurvesModal')!.classList.remove('hidden');
  };

  // Close "Show All Curves" modal
  document.getElementById('closeAllCurves')?.addEventListener('click', () => {
    document.getElementById('showAllCurvesModal')!.classList.add('hidden');
  });

  document.getElementById('showAllCurvesModal')?.addEventListener('click', (e) => {
    if (e.target === e.currentTarget) {
      document.getElementById('showAllCurvesModal')!.classList.add('hidden');
    }
  });

  // ==================== MONTH NAVIGATION ====================
  // Get current year and month from URL or use today
  const urlParams = new URLSearchParams(window.location.search);
  const yearParam = urlParams.get('year');
  const monthParam = urlParams.get('month');
  
  const today = new Date();
  let currentYear = yearParam ? parseInt(yearParam) : today.getFullYear();
  let currentMonth = monthParam ? parseInt(monthParam) - 1 : today.getMonth();
  
  let currentDate = new Date(currentYear, currentMonth, 1);

  function updateCalendar(year: number, month: number) {
    // Reload page with new date query params
    const url = new URL(window.location.href);
    url.searchParams.set('year', year.toString());
    url.searchParams.set('month', (month + 1).toString());
    window.location.href = url.toString();
  }

  document.getElementById('prevMonth')?.addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    updateCalendar(currentDate.getFullYear(), currentDate.getMonth());
  });

  document.getElementById('nextMonth')?.addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    updateCalendar(currentDate.getFullYear(), currentDate.getMonth());
  });

  // ==================== NOTES FUNCTIONALITY ====================
  interface CalendarNote {
    date: string;
    text: string;
    timestamp: number;
  }

  let currentNoteDate: string = '';
  const NOTES_STORAGE_KEY = 'calendar_notes';

  // Load notes from localStorage
  function loadNotes(): Record<string, CalendarNote[]> {
    const stored = localStorage.getItem(NOTES_STORAGE_KEY);
    return stored ? JSON.parse(stored) : {};
  }

  // Save notes to localStorage
  function saveNotesToStorage(notes: Record<string, CalendarNote[]>) {
    localStorage.setItem(NOTES_STORAGE_KEY, JSON.stringify(notes));
  }

  // Open note modal
  function openNoteModal(date: string) {
    currentNoteDate = date;
    const modal = document.getElementById('noteModal');
    const dateDisplay = document.getElementById('noteModalDate');
    const textarea = document.getElementById('noteTextarea') as HTMLTextAreaElement;
    
    if (modal && dateDisplay && textarea) {
      const dateObj = new Date(date + 'T00:00:00');
      dateDisplay.textContent = dateObj.toLocaleDateString('en-US', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      });
      textarea.value = '';
      modal.classList.remove('hidden');
    }
  }

  // Close note modal
  function closeNoteModal() {
    const modal = document.getElementById('noteModal');
    const textarea = document.getElementById('noteTextarea') as HTMLTextAreaElement;
    
    if (modal && textarea) {
      modal.classList.add('hidden');
      textarea.value = '';
      currentNoteDate = '';
    }
  }

  // Save note
  function saveNote() {
    const textarea = document.getElementById('noteTextarea') as HTMLTextAreaElement;
    
    if (!textarea || !currentNoteDate || !textarea.value.trim()) {
      return;
    }

    const notes = loadNotes();
    
    if (!notes[currentNoteDate]) {
      notes[currentNoteDate] = [];
    }

    const newNote: CalendarNote = {
      date: currentNoteDate,
      text: textarea.value.trim(),
      timestamp: Date.now()
    };

    notes[currentNoteDate].push(newNote);
    saveNotesToStorage(notes);
    
    // Display the note
    displayNoteInCalendar(currentNoteDate, newNote);
    
    closeNoteModal();
  }

  // Display note in calendar
  function displayNoteInCalendar(date: string, note: CalendarNote) {
    const container = document.querySelector(`.notes-container[data-date="${date}"]`);
    
    if (container) {
      const noteEl = document.createElement('div');
      noteEl.className = 'bg-[#FEF3C7] border border-[#F59E0B] rounded p-1.5 text-xs group relative';
      noteEl.innerHTML = `
        <div class="flex items-start justify-between gap-1">
          <div class="flex-1 min-w-0">
            <div class="text-[#92400E] break-words">${escapeHtml(note.text)}</div>
          </div>
          <button 
            class="opacity-0 group-hover:opacity-100 transition-opacity shrink-0 text-[#92400E] hover:text-[#78350F]"
            onclick="deleteNote('${date}', ${note.timestamp})"
            title="Delete note"
          >
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
      `;
      container.appendChild(noteEl);
    }
  }

  // Delete note
  function deleteNote(date: string, timestamp: number) {
    const notes = loadNotes();
    
    if (notes[date]) {
      notes[date] = notes[date].filter(note => note.timestamp !== timestamp);
      
      if (notes[date].length === 0) {
        delete notes[date];
      }
      
      saveNotesToStorage(notes);
      
      // Reload notes for this date
      const container = document.querySelector(`.notes-container[data-date="${date}"]`);
      if (container) {
        container.innerHTML = '';
        if (notes[date]) {
          notes[date].forEach(note => displayNoteInCalendar(date, note));
        }
      }
    }
  }

  // HTML escape function
  function escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Load all notes on page load
  document.addEventListener('DOMContentLoaded', () => {
    const notes = loadNotes();
    
    Object.entries(notes).forEach(([date, dateNotes]) => {
      dateNotes.forEach(note => {
        displayNoteInCalendar(date, note);
      });
    });
  });

  // Make functions globally available
  window.openNoteModal = openNoteModal;
  window.closeNoteModal = closeNoteModal;
  window.saveNote = saveNote;
  window.deleteNote = deleteNote;

  // Close modal on ESC key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeNoteModal();
    }
  });

  // Close modal when clicking outside
  document.getElementById('noteModal')?.addEventListener('click', (e) => {
    if (e.target === e.currentTarget) {
      closeNoteModal();
    }
  });
</script>


---
interface Props {
  market: 'caiso' | 'ercot';
}

const { market } = Astro.props;
const currentHash = Astro.url.hash.slice(1);

const caisoForecasts = [
  { id: 'sp15', name: 'SP-15 10-year Battery Revenue' },
  // Add other CAISO forecasts here
];

const ercotForecasts = [
  { id: 'houston', name: 'Houston 10-year Battery Revenue' },
  { id: 'south', name: 'South 10-year Battery Revenue' },
];

const forecasts = market === 'caiso' ? caisoForecasts : ercotForecasts;
---

<div class="fixed right-8 top-32 w-64 bg-white rounded-lg shadow-lg">
  <nav class="p-4">
    <h3 class="text-sm font-semibold text-gray-500 uppercase tracking-wider mb-4">Jump to</h3>
    <div class="flex flex-col space-y-2">
      {forecasts.map(forecast => (
        <button
          data-target={forecast.id}
          class={`text-left px-4 py-2 rounded-md transition-colors text-sm font-medium ${
            currentHash === forecast.id 
              ? 'bg-gs-blue text-white' 
              : 'text-gray-500 hover:text-gray-900 hover:bg-gray-100'
          }`}
        >
          {forecast.name}
        </button>
      ))}
    </div>
  </nav>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('button[data-target]');
    const sections = new Map();
    let activeButton = null;

    // Create an IntersectionObserver
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const id = entry.target.id;
          const button = document.querySelector(`button[data-target="${id}"]`);
          if (button && activeButton !== button) {
            // Update active state
            if (activeButton) {
              activeButton.classList.remove('bg-gs-blue', 'text-white');
              activeButton.classList.add('text-gray-500');
            }
            button.classList.remove('text-gray-500');
            button.classList.add('bg-gs-blue', 'text-white');
            activeButton = button;
            // Update URL without scrolling
            history.replaceState(null, '', `#${id}`);
          }
        }
      });
    }, {
      threshold: 0.2,
      rootMargin: '-100px 0px -50% 0px'
    });

    // Setup click handlers and observe sections
    buttons.forEach(button => {
      const targetId = button.dataset.target;
      const section = document.getElementById(targetId);
      if (section) {
        sections.set(targetId, section);
        observer.observe(section);
        
        button.addEventListener('click', () => {
          section.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start'
          });
        });
      }
    });

    // Handle initial hash
    const initialHash = window.location.hash.slice(1);
    if (initialHash) {
      const section = sections.get(initialHash);
      if (section) {
        setTimeout(() => {
          section.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start'
          });
        }, 100);
      }
    }
  });
</script> 
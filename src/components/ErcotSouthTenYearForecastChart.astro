---
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

// Define brand colors
const colors = {
  primary: '#2AB3CB',    // Bright turquoise
  secondary: '#1D7874',  // Teal green
  tertiary: '#679289',   // Sage green
  accent: '#F4C095',     // Peach
  dark: '#E2231A'        // Red
};

// Add debug logs
console.log('Starting ERCOT South data fetch...');

const forecasts = await prisma.ercot_long_term_forecasts_annual.findMany({
  select: {
    FlowDateStart: true,
    Value: true,
    MarkType: true,
    MarkCase: true
  },
  where: {
    Value: { not: null },
    FlowDateStart: { not: null },
    AND: {
      MarkType: { startsWith: 'SOUTH_' },
      MarkCase: { not: '' }
    }
  },
  orderBy: {
    FlowDateStart: 'asc'
  }
});

// Log raw data
console.log('Raw ERCOT South forecasts:', forecasts);

// Group data by MarkType and MarkCase
const groupedData = forecasts.reduce((acc, forecast) => {
  const key = `${forecast.MarkType}-${forecast.MarkCase}`;
  console.log('Processing forecast:', forecast);
  console.log('Generated key:', key);
  
  if (!acc[key]) {
    acc[key] = [];
  }

  const year = typeof forecast.FlowDateStart === 'string' 
    ? parseInt(forecast.FlowDateStart, 10) 
    : Number(forecast.FlowDateStart);

  acc[key].push({
    date: new Date(year, 0, 1).toISOString(),
    value: Number(forecast.Value) || 0
  });
  return acc;
}, {} as { [key: string]: Array<{date: string, value: number}> });

// Log grouped data
console.log('Grouped ERCOT South data:', groupedData);

// Update datasets configuration
const datasets = Object.entries(groupedData).map(([key, data], index) => {
  const dataset = {
    label: key,
    data: data,
    borderColor: index === 0 ? colors.primary : 
                 index === 1 ? colors.secondary :
                 index === 2 ? colors.tertiary : 
                 colors.accent,
    tension: 0,
    borderWidth: 4,
    order: 1,
    hidden: !key.includes('SOUTH_GST - Base-Base') && !key.includes('SOUTH_Aurora-Base')
  };
  console.log('Created dataset:', dataset);
  return dataset;
});

console.log('Final ERCOT South datasets:', datasets);

const years = datasets[0]?.data.map(d => new Date(d.date).getFullYear()) || [];
const minYear = Math.min(...years.map(Number));
const maxYear = Math.max(...years.map(Number));
// Add debug logs in the frontmatter
console.log('Years:', years);
---

<!-- Add these to the head of your Layout.astro or directly here -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nouislider@15.7.1/dist/nouislider.min.css">

<div class="viz-container">
  <div class="flex justify-between items-center mb-4">
    <div>
      <h2 class="viz-title">ERCOT South 10-year Battery Revenue</h2>
      <p class="text-gray-600">Long-term revenue projections across scenarios</p>
    </div>
    <button 
      onclick="downloadData()"
      class="bg-gs-blue hover:bg-gs-dark text-white font-medium py-2 px-4 rounded transition-colors"
    >
      Download Data
    </button>
  </div>
  <div class="chart-container" style="height: 500px;">
    <canvas id="southChart" data-datasets={JSON.stringify(datasets)}></canvas>
  </div>
  
  <!-- Date Range Selector -->
  <div class="mt-4 px-4">
    <div id="slider" class="my-4"></div>
    <div class="flex justify-between text-sm text-gray-600">
      <span id="startDate"></span>
      <span id="endDate"></span>
    </div>
  </div>

  <!-- Stats Cards -->
  <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
    {datasets.map(dataset => (
      <div class="bg-white rounded-lg shadow p-4">
        <h3 class="text-sm font-medium text-gray-600">{dataset.label}</h3>
        <p class="text-2xl font-bold mt-2" id={`stat-${dataset.label}`}>-</p>
        <p class="text-xs text-gray-500">Average $/kw-mn</p>
      </div>
    ))}
  </div>
</div>

<script is:inline>
  // Load scripts in order
  function loadScript(src) {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  async function initChart() {
    try {
      await loadScript('https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js');
      await loadScript('https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js');
      await loadScript('https://cdn.jsdelivr.net/npm/nouislider@15.7.1/dist/nouislider.min.js');

      const canvas = document.getElementById('southChart');
      const datasets = JSON.parse(canvas?.dataset?.datasets || '[]');
      
      console.log('ERCOT South Initial data:', datasets);

      if (canvas && datasets.length > 0) {
        const chart = new Chart(canvas, {
          type: 'line',
          data: {
            datasets: datasets.map(dataset => ({
              ...dataset,
              parsing: {
                xAxisKey: 'date',
                yAxisKey: 'value'
              },
              pointRadius: 1,
              fill: false
            }))
          },
          options: {
            maintainAspectRatio: false,
            responsive: true,
            scales: {
              x: {
                type: 'time',
                time: {
                  unit: 'year',
                  displayFormats: {
                    year: 'yyyy'
                  }
                }
              },
              y: {
                beginAtZero: true,
                title: {
                  display: true,
                  text: '$/kw-mn'
                }
              }
            },
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  padding: 20,
                  usePointStyle: true,
                  font: {
                    size: 12
                  }
                }
              }
            }
          }
        });

        // Initialize slider
        const slider = document.getElementById('slider');
        if (slider) {
          const years = datasets[0]?.data.map(d => new Date(d.date).getFullYear()) || [];
          const minYear = Math.min(...years);
          const maxYear = Math.max(...years);

          noUiSlider.create(slider, {
            start: [minYear, maxYear],
            connect: true,
            range: {
              'min': minYear,
              'max': maxYear
            },
            step: 1
          });

          // Add slider update handler
          slider.noUiSlider.on('update', (values) => {
            const [start, end] = values.map(Number);
            const startDate = new Date(start, 0, 1);
            const endDate = new Date(end, 11, 31);
            
            chart.options.scales.x.min = startDate;
            chart.options.scales.x.max = endDate;
            chart.update();

            // Update stats cards
            datasets.forEach(dataset => {
              const filteredData = dataset.data.filter(d => {
                const year = new Date(d.date).getFullYear();
                return year >= start && year <= end;
              });
              
              const average = filteredData.reduce((sum, d) => sum + d.value, 0) / filteredData.length;
              const statEl = document.getElementById(`stat-${dataset.label}`);
              if (statEl) {
                statEl.textContent = `$${average.toLocaleString('en-US', { 
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2 
                })}`;
              }
            });
          });
        }
      }
    } catch (error) {
      console.error('Error initializing ERCOT South chart:', error);
    }
  }

  // Initialize everything
  initChart();
</script>

<style>
  input[type="range"] {
    @apply h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer;
  }
  input[type="range"]::-webkit-slider-thumb {
    @apply appearance-none w-4 h-4 bg-gs-blue rounded-full hover:bg-gs-dark transition-colors;
  }
  .chart-container {
    @apply mb-8;
  }
  .noUi-connect {
    @apply bg-gs-blue;
  }
  .noUi-handle {
    @apply bg-gs-blue hover:bg-gs-dark transition-colors cursor-pointer;
    border: none !important;
    box-shadow: none !important;
    border-radius: 50% !important;
    width: 16px !important;
    height: 16px !important;
    right: -8px !important;
  }
  .noUi-handle::before,
  .noUi-handle::after {
    display: none;
  }
  .noUi-target {
    @apply bg-gray-200 border-0 shadow-none h-2;
  }
  /* Slider styling */
  .noUi-connect {
    background: #34D5ED; /* Your primary blue color */
  }
  
  .noUi-handle {
    border: none;
    background: #34D5ED;
    box-shadow: none;
    border-radius: 50%;
    cursor: pointer;
    transition: transform 0.1s;
  }
  
  .noUi-handle:hover {
    transform: scale(1.1);
  }
  
  .noUi-handle::before,
  .noUi-handle::after {
    display: none;
  }
  
  .noUi-target {
    background: #e5e7eb;
    border: none;
    box-shadow: none;
    height: 8px;
  }
  
  /* Tooltip styling */
  .noUi-tooltip {
    background: #34D5ED;
    color: white;
    border: none;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
  }
</style> 
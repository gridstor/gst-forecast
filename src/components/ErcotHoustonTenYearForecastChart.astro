---
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

// Define brand colors
const colors = {
  primary: '#34D5ED',      // Bright blue
  secondary: '#107D87',    // Teal
  tertiary: '#0B2B5B',     // Navy
  accent: '#FF9F1C',       // Orange
};

const forecasts = await prisma.ercot_long_term_forecasts_annual.findMany({
  select: {
    FlowDateStart: true,
    Value: true,
    MarkType: true,
    MarkCase: true
  },
  where: {
    Value: { not: null },
    FlowDateStart: { not: null },
    AND: {
      MarkType: { startsWith: 'HOUSTON_' },
      MarkCase: { not: '' }
    }
  },
  orderBy: {
    FlowDateStart: 'asc'
  }
});

// Group data by MarkType and MarkCase
const groupedData = forecasts.reduce((acc, forecast) => {
  const key = `${forecast.MarkType}-${forecast.MarkCase}`;
  acc[key] = acc[key] || [];  // More reliable way to initialize array
  
  const year = Number(forecast.FlowDateStart);
  const date = new Date(year, 0, 1);

  acc[key].push({
    date: date.toISOString(),
    value: forecast.Value ?? 0
  });
  return acc;
}, {});

// Update datasets configuration
const datasets = Object.entries(groupedData).map(([key, data], index) => ({
  label: key,
  data: data,
  borderColor: index === 0 ? colors.primary : 
               index === 1 ? colors.secondary :
               index === 2 ? colors.tertiary : 
               colors.accent,
  tension: 0.3,
  borderWidth: 4,
  order: 1,
  hidden: !key.includes('HOUSTON_GST - Base-Base') && !key.includes('HOUSTON_Aurora-Base')  // Hide all except GST Base and Aurora Base
}));
---

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nouislider@15.7.1/dist/nouislider.min.css">

<div class="viz-container">
  <div class="flex justify-between items-center mb-4">
    <div>
      <h2 class="viz-title">ERCOT Houston 10-year Battery Revenue</h2>
      <p class="text-gray-600">Long-term revenue projections across scenarios</p>
    </div>
    <button 
      onclick="downloadData()"
      class="bg-gs-blue hover:bg-gs-dark text-white font-medium py-2 px-4 rounded transition-colors"
    >
      Download Data
    </button>
  </div>
  <div class="chart-container">
    <canvas id="houstonChart" data-datasets={JSON.stringify(datasets)}></canvas>
  </div>
  <div class="mt-4 px-4">
    <div id="houstonSlider" class="my-4"></div>
    <div class="flex justify-between text-sm text-gray-600">
      <span id="houstonStartDate"></span>
      <span id="houstonEndDate"></span>
    </div>
  </div>
  <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
    {datasets.map(dataset => (
      <div class="bg-white rounded-lg shadow p-4">
        <h3 class="text-sm font-medium text-gray-600">{dataset.label}</h3>
        <p class="text-2xl font-bold mt-2" id={`stat-${dataset.label}`}>-</p>
        <p class="text-xs text-gray-500">Average $/kw-mn</p>
      </div>
    ))}
  </div>
</div>

<script is:inline>
  function loadScript(src) {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  async function initChart() {
    try {
      await loadScript('https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js');
      await loadScript('https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js');
      await loadScript('https://cdn.jsdelivr.net/npm/nouislider@15.7.1/dist/nouislider.min.js');

      const canvas = document.getElementById('houstonChart');
      const datasets = JSON.parse(canvas?.dataset?.datasets || '[]');
      
      console.log('ERCOT Houston Initial data:', datasets);

      if (canvas && datasets.length > 0) {
        const chart = new Chart(canvas, {
          type: 'line',
          data: {
            datasets: datasets.map(dataset => ({
              ...dataset,
              parsing: {
                xAxisKey: 'date',
                yAxisKey: 'value'
              },
              pointRadius: 1,
              fill: false
            }))
          },
          options: {
            maintainAspectRatio: false,
            responsive: true,
            scales: {
              x: {
                type: 'time',
                time: {
                  unit: 'year',
                  displayFormats: {
                    year: 'yyyy'
                  }
                }
              },
              y: {
                beginAtZero: true,
                title: {
                  display: true,
                  text: '$/kw-mn'
                }
              }
            },
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  padding: 20,
                  usePointStyle: true,
                  font: {
                    size: 12
                  }
                }
              }
            }
          }
        });

        // Initialize slider
        const slider = document.getElementById('houstonSlider');
        if (slider) {
          const years = datasets[0]?.data.map(d => new Date(d.date).getFullYear()) || [];
          const minYear = Math.min(...years);
          const maxYear = Math.max(...years);

          noUiSlider.create(slider, {
            start: [minYear, maxYear],
            connect: true,
            range: {
              'min': minYear,
              'max': maxYear
            },
            step: 1
          });

          // Add slider update handler
          slider.noUiSlider.on('update', (values) => {
            const [start, end] = values.map(Number);
            const startDate = new Date(start, 0, 1);
            const endDate = new Date(end, 11, 31);
            
            chart.options.scales.x.min = startDate;
            chart.options.scales.x.max = endDate;
            chart.update();

            // Update stats cards
            datasets.forEach(dataset => {
              const filteredData = dataset.data.filter(d => {
                const year = new Date(d.date).getFullYear();
                return year >= start && year <= end;
              });
              
              const average = filteredData.reduce((sum, d) => sum + d.value, 0) / filteredData.length;
              const statEl = document.getElementById(`stat-${dataset.label}`);
              if (statEl) {
                statEl.textContent = `$${average.toLocaleString('en-US', { 
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2 
                })}`;
              }
            });
          });
        }
      }
    } catch (error) {
      console.error('Error initializing ERCOT Houston chart:', error);
    }
  }

  // Initialize everything
  initChart();

  function downloadData() {
    const datasets = JSON.parse(document.getElementById('houstonChart')?.dataset?.datasets || '[]');
    const csvRows = [['Date', ...datasets.map(d => d.label)]];

    const dataByDate = {};
    datasets.forEach(dataset => {
      dataset.data.forEach(point => {
        if (!dataByDate[point.date]) {
          dataByDate[point.date] = { date: point.date };
        }
        dataByDate[point.date][dataset.label] = point.value;
      });
    });

    Object.values(dataByDate).forEach(row => {
      csvRows.push([
        new Date(row.date).getFullYear(),
        ...datasets.map(d => row[d.label] || '')
      ]);
    });

    const csvContent = csvRows.map(row => row.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'houston-battery-revenue.csv';
    a.click();
    window.URL.revokeObjectURL(url);
  }
</script>

<style>
  .chart-container {
    position: relative;
    width: 100%;
    max-width: 1200px;
    height: 600px;
    margin: 0 auto;
    padding: 20px;
    border: 1px solid #ccc;
  }
</style> 
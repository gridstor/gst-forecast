---
import Layout from '../../layouts/Layout.astro';
import { prisma } from '../../lib/prisma';
import CurveDetails from '../../components/curve-tracker/CurveDetails';
import type { CurveScheduleWithRelations, CurveDefinition } from '../../types/curve';

interface PageData {
  schedule: CurveScheduleWithRelations | null;
  associatedCurve: CurveDefinition | null;
  error: string | null;
}

// Get the curve ID from the URL parameter and validate
const { id } = Astro.params;
const scheduleId = parseInt(id as string);
let pageData: PageData = {
  schedule: null,
  associatedCurve: null,
  error: null
};

if (isNaN(scheduleId)) {
  return new Response('Invalid schedule ID', { status: 400 });
}

try {
  // First get the schedule
  const schedule = await prisma.curveSchedule.findUnique({
    where: { id: scheduleId },
    include: {
      curveDefinition: {
        include: {
          instances: {
            orderBy: { forecastRunDate: 'desc' },
            take: 5,
            select: {
              id: true,
              instanceVersion: true,
              status: true,
              forecastRunDate: true,
              createdBy: true,
              notes: true
            }
          }
        }
      },
      scheduleRuns: {
        orderBy: { runDate: 'desc' },
        take: 10,
        select: {
          id: true,
          runDate: true,
          runType: true,
          status: true,
          instancesCreated: true,
          startedAt: true,
          completedAt: true
        }
      }
    }
  });

  if (!schedule) {
    return Astro.redirect('/curve-schedule', 404);
  }

  pageData.schedule = schedule;
  pageData.associatedCurve = schedule.curveDefinition || null;

} catch (e) {
  console.error('Error fetching curve data:', e);
  pageData.error = 'Failed to fetch curve data';
}

const { schedule, associatedCurve, error } = pageData;
---

<Layout title={schedule ? `Curve Schedule - ${schedule.curvePattern}` : 'Curve Schedule Not Found'}>
  <div class="container mx-auto px-4 py-8">
    {error && (
      <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-8">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">Error</h3>
            <p class="text-sm text-red-700 mt-1">{error}</p>
          </div>
        </div>
      </div>
    )}

    {!schedule && !error && (
      <div class="text-center py-12">
        <h2 class="text-xl font-bold text-gray-900">Schedule Not Found</h2>
        <p class="mt-2 text-gray-600">The requested curve schedule could not be found.</p>
        <a
          href="/curve-schedule"
          class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
        >
          Return to Schedule List
        </a>
      </div>
    )}

    {schedule && (
      <>
        <div class="flex justify-between items-center mb-8">
          <div>
            <h1 class="text-3xl font-bold">{schedule.curvePattern}</h1>
            <p class="mt-2 text-gray-600">
              {associatedCurve ? (
                <span class="text-green-600">Linked to existing curve</span>
              ) : (
                <span class="text-yellow-600">Planned curve - Not yet created</span>
              )}
            </p>
          </div>
          <div class="space-x-4">
            <a
              href="/curve-schedule"
              class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
            >
              Back to List
            </a>
            <a
              href={`/curve-schedule/${schedule.id}/edit`}
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
            >
              Edit Schedule
            </a>
            {associatedCurve && (
              <a
                href={`/curves/${associatedCurve.curve_id}`}
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700"
              >
                View Curve Data
              </a>
            )}
          </div>
        </div>

        <CurveDetails schedule={schedule} associatedCurve={associatedCurve} client:load />
      </>
    )}
  </div>
</Layout>

<style>
  /* Add any custom styles here */
</style> 
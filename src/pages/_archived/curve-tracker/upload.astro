---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Curve Upload">
  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center mb-4">
        <a href="/curve-tracker" class="text-blue-600 hover:text-blue-700 mr-4">
          ‚Üê Back to Curve Tracker
        </a>
      </div>
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Upload Curve Data</h1>
      <p class="text-gray-600">Upload CSV files with curve price forecasts</p>
    </div>

    <!-- Expected Format -->
    <div class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8">
      <h2 class="text-lg font-semibold text-blue-900 mb-4">Expected CSV Format</h2>
      <div class="text-sm text-blue-800">
        <p class="mb-2">Your CSV should include these columns:</p>
        <code class="bg-blue-100 px-2 py-1 rounded text-xs">
          flow_start_date, granularity, mark_date, mark_type, mark_case, value, units, location, market
        </code>
        <p class="mt-2 text-xs">Example: 2025-01-01, MONTHLY, 2024-12-15, LMP, BASE, 45.50, $/MWh, Houston, ERCOT</p>
      </div>
    </div>

    <!-- Upload Form -->
    <div class="bg-white rounded-lg shadow-md p-6">
      <form id="uploadForm" enctype="multipart/form-data" class="space-y-6">
        
        <!-- File Upload -->
        <div>
          <label for="csvFile" class="block text-sm font-medium text-gray-700 mb-2">
            Select CSV File
          </label>
          <input type="file" 
                 id="csvFile" 
                 name="file" 
                 accept=".csv" 
                 required
                 class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none">
          <p class="mt-1 text-sm text-gray-500">Upload a CSV file with curve data</p>
        </div>

        <!-- File Preview -->
        <div id="filePreview" class="hidden">
          <h3 class="text-lg font-medium text-gray-900 mb-3">File Preview</h3>
          <div class="bg-gray-50 p-4 rounded-lg">
            <p id="fileInfo" class="text-sm text-gray-600 mb-2"></p>
            <div class="overflow-x-auto">
              <table id="previewTable" class="min-w-full text-xs">
                <thead id="previewHead" class="bg-gray-100"></thead>
                <tbody id="previewBody"></tbody>
              </table>
            </div>
          </div>
        </div>

        <!-- Submit Button -->
        <div class="pt-4">
          <button type="submit" 
                  id="submitBtn"
                  disabled
                  class="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed">
            Upload Curve Data
          </button>
        </div>
      </form>
    </div>

    <!-- Results -->
    <div id="results" class="hidden mt-8">
      <div id="successMessage" class="hidden bg-green-50 border border-green-200 rounded-lg p-4">
        <div class="flex">
          <svg class="w-5 h-5 text-green-400 mr-3 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          <div>
            <h3 class="text-sm font-medium text-green-800">Upload Successful!</h3>
            <p id="successDetails" class="text-sm text-green-700 mt-1"></p>
          </div>
        </div>
      </div>

      <div id="errorMessage" class="hidden bg-red-50 border border-red-200 rounded-lg p-4">
        <div class="flex">
          <svg class="w-5 h-5 text-red-400 mr-3 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
          </svg>
          <div>
            <h3 class="text-sm font-medium text-red-800">Upload Failed</h3>
            <p id="errorDetails" class="text-sm text-red-700 mt-1"></p>
          </div>
        </div>
      </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 z-50 flex items-center justify-center">
      <div class="bg-white rounded-lg p-6 text-center">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p class="text-gray-600">Uploading...</p>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('uploadForm');
      const fileInput = document.getElementById('csvFile');
      const submitBtn = document.getElementById('submitBtn');
      const filePreview = document.getElementById('filePreview');
      const fileInfo = document.getElementById('fileInfo');
      const previewTable = document.getElementById('previewTable');
      const previewHead = document.getElementById('previewHead');
      const previewBody = document.getElementById('previewBody');
      const results = document.getElementById('results');
      const successMessage = document.getElementById('successMessage');
      const errorMessage = document.getElementById('errorMessage');
      const successDetails = document.getElementById('successDetails');
      const errorDetails = document.getElementById('errorDetails');
      const loadingOverlay = document.getElementById('loadingOverlay');

      // File input change handler
      fileInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file && file.type === 'text/csv') {
          previewCSV(file);
          submitBtn.disabled = false;
        } else {
          filePreview.classList.add('hidden');
          submitBtn.disabled = true;
          if (file) {
            alert('Please select a CSV file');
          }
        }
      });

      // Preview CSV function
      function previewCSV(file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const csv = e.target.result;
          const lines = csv.split('\n').filter(line => line.trim());
          
          if (lines.length < 2) {
            alert('CSV file must have at least a header and one data row');
            return;
          }

          // Parse header
          const headers = parseCSVLine(lines[0]);
          
          // Parse first few data rows
          const dataRows = lines.slice(1, 6).map(line => parseCSVLine(line));
          
          // Display file info
          fileInfo.textContent = `File: ${file.name} (${lines.length - 1} data rows)`;
          
          // Create table header
          previewHead.innerHTML = '';
          const headerRow = document.createElement('tr');
          headers.forEach(header => {
            const th = document.createElement('th');
            th.className = 'px-2 py-1 text-left font-medium text-gray-700 border-b';
            th.textContent = header;
            headerRow.appendChild(th);
          });
          previewHead.appendChild(headerRow);
          
          // Create table body
          previewBody.innerHTML = '';
          dataRows.forEach(row => {
            const tr = document.createElement('tr');
            row.forEach(cell => {
              const td = document.createElement('td');
              td.className = 'px-2 py-1 text-gray-600 border-b';
              td.textContent = cell || '';
              tr.appendChild(td);
            });
            previewBody.appendChild(tr);
          });
          
          filePreview.classList.remove('hidden');
        };
        reader.readAsText(file);
      }

      // Simple CSV parser
      function parseCSVLine(line) {
        const result = [];
        let current = '';
        let inQuotes = false;
        
        for (let i = 0; i < line.length; i++) {
          const char = line[i];
          if (char === '"') {
            inQuotes = !inQuotes;
          } else if (char === ',' && !inQuotes) {
            result.push(current.trim());
            current = '';
          } else {
            current += char;
          }
        }
        result.push(current.trim());
        return result.map(cell => cell.replace(/^["']|["']$/g, ''));
      }

      // Form submission
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(form);
        
        // Show loading
        loadingOverlay.classList.remove('hidden');
        results.classList.add('hidden');
        successMessage.classList.add('hidden');
        errorMessage.classList.add('hidden');
        
        try {
          const response = await fetch('/api/curves/upload', {
            method: 'POST',
            body: formData
          });
          
          const data = await response.json();
          
          if (response.ok) {
            successDetails.textContent = data.message;
            successMessage.classList.remove('hidden');
          } else {
            errorDetails.textContent = data.error || 'Upload failed';
            errorMessage.classList.remove('hidden');
          }
          
          results.classList.remove('hidden');
          
        } catch (error) {
          errorDetails.textContent = 'Network error: ' + error.message;
          errorMessage.classList.remove('hidden');
          results.classList.remove('hidden');
        } finally {
          loadingOverlay.classList.add('hidden');
        }
      });
    });
  </script>
</Layout> 